<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Optimization on Tinkering.xyz</title>
    <link>https://tinkering.xyz/tags/optimization/index.xml</link>
    <description>Recent content in Optimization on Tinkering.xyz</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://tinkering.xyz/tags/optimization/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Minimizing Student Loan Interest with Python - Part 3</title>
      <link>https://tinkering.xyz/posts/student-loan-simulator-part-3/</link>
      <pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tinkering.xyz/posts/student-loan-simulator-part-3/</guid>
      <description>

&lt;p&gt;Ok, I&amp;rsquo;ve discussed the &lt;a href=&#34;https://tinkering.xyz/posts/student-loan-simulator-part-1/&#34;&gt;basics&lt;/a&gt; of student loans and the &lt;a href=&#34;https://tinkering.xyz/posts/student-loan-simulator-part-2/&#34;&gt;program&lt;/a&gt; I wrote to simulate the loan payoff process, so let&amp;rsquo;s finally get into some results. I&amp;rsquo;ll assume you&amp;rsquo;ve read those posts so that I don&amp;rsquo;t have to explain reiterate all of the detail. The code for this project can be found &lt;a href=&#34;https://github.com/zmitchell/student-loan-simulator&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s get some terminology out of the way. In each case (unless otherwise specified) I&amp;rsquo;ve received a chunk of money from somewhere (security deposit, tax return, the will of a long lost relative who was an oil baron, etc). I&amp;rsquo;m going to call this money the &amp;ldquo;lump sum.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;scipy.optimize.minimize&lt;/code&gt; function needs you to give it a hint as to where it should start its search. In this case it will need a hint for each loan, so I&amp;rsquo;m going to call that list of hints the &amp;ldquo;guesses.&amp;rdquo; Unless otherwise specified, my guesses will just be the lump sum divided by the number of loans.&lt;/p&gt;

&lt;p&gt;Recall from Part 2 that monthly payments work by making the minimum payments on each active loan and putting the rest of the monthly budget towards one loan. Which loan the budget surplus is applied to is determined by which targeting method I&amp;rsquo;ve chosen. I can target the loan with the highest interest rate, the lowest principal, or any other method I cook up. Unless otherwise specified I&amp;rsquo;m targeting the loan with the highest interest rate.&lt;/p&gt;

&lt;h2 id=&#34;sanity-check-identical-loans-identical-guesses&#34;&gt;Sanity Check - Identical Loans, Identical Guesses&lt;/h2&gt;

&lt;p&gt;Before I can believe what my program is telling me, I need to make sure that it behaves as expected. If I get the expected results for a simple case, that&amp;rsquo;s a step in the right direction. The first thing I&amp;rsquo;ll do is see how it decides to allocate funds between identical loans. Here&amp;rsquo;s the setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4 identical loans&lt;/li&gt;
&lt;li&gt;each loan has a $5k principal&lt;/li&gt;
&lt;li&gt;each loan has a 5% interest rate&lt;/li&gt;
&lt;li&gt;all of the loans start payments immediately&lt;/li&gt;
&lt;li&gt;$1k to distribute&lt;/li&gt;
&lt;li&gt;The lump sum is distributed&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I would expect the simulator to distribute the money evenly between the four loans, but that means the expected behavior is the same as my guesses, so we can&amp;rsquo;t draw any deep conclusions from the results if everything works as expected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Guesses: [250.0, 250.0, 250.0, 250.0]
Starting Budget: 1000.0
Loan 1: $250.00
Loan 2: $250.00
Loan 3: $250.00
Loan 4: $250.00
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So the program does actually evenly distribute the lump sum between the loans. Exciting. We don&amp;rsquo;t really know yet whether it&amp;rsquo;s just copying my guesses, or whether that&amp;rsquo;s really the optimum solution.&lt;/p&gt;

&lt;p&gt;Something else to keep in mind is that there&amp;rsquo;s no mathematical difference between 4 $5k loans with 5% interest rates and a single $20k loan with a 5% interest rate. I&amp;rsquo;ll pay the same interest no matter where I put the money. I was reminded of this when I discovered that the program would just use whatever guesses I supplied. We&amp;rsquo;ll take a look at the influence of the guesses in the next case.&lt;/p&gt;

&lt;h2 id=&#34;sanity-check-deliberately-bad-guesses&#34;&gt;Sanity Check - Deliberately Bad Guesses&lt;/h2&gt;

&lt;p&gt;Minimization algorithms can have a problem telling the difference between a local minimum and the global minimum, or in other words they can have a hard time knowing if the minimum they&amp;rsquo;ve found is just the minimum value in some region, or the absolute minimum for the entire space. To avoid problems like this many algorithms let you tweak some parameters to narrow down the space that the algorithm will search through.&lt;/p&gt;

&lt;p&gt;One common parameter to tweak is the point at which the algorithm should begin its search. The algorithm can find the minimum quickly if you give it a guess near the actual minimum, but it can get stuck in a local minimum (not what you&amp;rsquo;re looking for) or not find a minimum at all if supplied with a bad guess.&lt;/p&gt;

&lt;p&gt;In this scenario I had two loans with $5k principals, but one had a 5% interest rate, and the other had a 5.1% interest rate. The expected behavior to put the money towards the loan with the higher interest rate. To sabotage the program I gave it guesses that were weighted towards the loan with the lower interest rate to see how bad I could make my guesses before it would start to allocate money to the loan with the lower interest rate. I made it all the way up to a ratio of 1,000,000:1 and just gave up. I wasn&amp;rsquo;t able to get the program to make a mistake this way.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Loan 1: P $5000.00 | I $0.00 5.10%
Loan 2: P $5000.00 | I $0.00 5.00%
Guesses: [0.000999999000001, 999.999000001]
Starting Budget: 1000.0
Monthly Budget: 159.47
Loan 1: $1000.00
Loan 2: $0.00
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One thing that makes a difference to the quality of this test is how long the loans take to pay off. As you can probably imagine, differences in payoff strategies will become more apparent as the loans take longer to pay off. I realized this when the program would allocate money incorrectly for guesses that were only slightly off. I later realized the monthly budget was set too high so the loans were beign paid off before any real differences in payoff strategy could have an effect. With that in mind I set the monthly budget to 1.5x the sum of the minimum monthly payments for this test, which greatly increased the resistance to bad guesses.&lt;/p&gt;

&lt;h2 id=&#34;case-equal-principals-different-rates&#34;&gt;Case - Equal Principals, Different Rates&lt;/h2&gt;

&lt;p&gt;Now we&amp;rsquo;ll throw a handful of loans at the program that all have different interest rates and see what it does with a few different payment strategies. We&amp;rsquo;ll take 5 loans with $5k principals, and give each one a different interest rate. The last sanity check showed that your guesses don&amp;rsquo;t really matter, so I&amp;rsquo;ll just give the loans equal guesses.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Loan 1: P $5000.00 | I $0.00 3.00%
Loan 2: P $5000.00 | I $0.00 3.50%
Loan 3: P $5000.00 | I $0.00 4.00%
Loan 4: P $5000.00 | I $0.00 4.50%
Loan 5: P $5000.00 | I $0.00 5.00%
Starting Budget: 1000.0
Guesses: [200.0, 200.0, 200.0, 200.0, 200.0]
Monthly Budget: 379.80
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may recall from the previous post that the monthly budget is applied by first making the minimum payments on all of the active loans, leaving a surplus that can be applied in a number of different ways. I&amp;rsquo;ll look at applying the surplus to the loan with the highest interest rate, the lowest principal, and the highest principal. I&amp;rsquo;ll compare the total interest paid, and how long it takes to pay off the loans. I&amp;rsquo;ve included the distribution of the lump sum and how much interest was paid for each method below. All three methods completed in 74 months, but the highest interest rate method ended with a payment of ~$3 in the last month, so I&amp;rsquo;m going to say it really completed in 73 months.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Highest Interest Rate
Loan 1: $0.00
Loan 2: $0.00
Loan 3: $0.00
Loan 4: $0.00
Loan 5: $1000.00
Interest Paid: $2747.79
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Highest Principal
Loan 1: $199.99
Loan 2: $200.00
Loan 3: $200.00
Loan 4: $200.00
Loan 5: $200.01
Interest Paid: $2962.26
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Lowest Principal
Loan 1: $0.00
Loan 2: $47.73
Loan 3: $230.60
Loan 4: $410.98
Loan 5: $310.70
Interest Paid: $2799.28
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first interesting thing to note is that targeting the lowest principal and the highest interest rate resulted in very nearly the same total interest despite distributing the lump sum in very different ways. For simple loan situations I could see this being worth the extra interest you pay because you get a warm fuzzy feeling from knocking out loans sooner and more frequently, which could help with the emotional burden of being saddled with a mountain of debt.&lt;/p&gt;

&lt;p&gt;The second interesting thing is the difference in how the lump sum is distributed in each case. Targeting the highest interest rate puts the entire sum towards the highest interest rate loan. Targeting the lowest principal puts money towards all but the first loans and seems to give progressively more money to loans with higher interest rates. I say &amp;ldquo;seems&amp;rdquo; because loan 4 has a lower interest rate than loan 5, but is given $100 more than loan 5. I&amp;rsquo;m not really sure what&amp;rsquo;s going on there. Targeting the highest principal loan seems to just use my guesses.&lt;/p&gt;

&lt;h2 id=&#34;case-our-loans&#34;&gt;Case - Our Loans&lt;/h2&gt;

&lt;p&gt;Now let&amp;rsquo;s take a look at a more realistic, more complicated scenario. We have 3 loans that are currently being paid and 4 that won&amp;rsquo;t start payments for a few years. Of those 4 that haven&amp;rsquo;t started payments yet, 3 are currently accruing interest. For more information on how student loan interest works, refer back to &lt;a href=&#34;https://tinkering.xyz/posts/student-loan-simulator-part-1/&#34;&gt;part 1&lt;/a&gt; of the series. For the loan amounts I picked some random numbers and rounded to make things a little nicer to look at. Here&amp;rsquo;s what the loans look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Loan 1: P $7000.00  | I $2700.00 | 6.80%
Loan 2: P $6900.00  | I $1500.00 | 6.80%
Loan 3: P $9500.00  | I $3100.00 | 6.80%
Loan 4: P $5800.00  | I $0.00    | 3.40%
Loan 5: P $27000.00 | I $3000.00 | 5.40%
Loan 6: P $8500.00  | I $350.00  | 6.40%
Loan 7: P $24000.00 | I $8200.00 | 6.20%
Starting Budget: 15000.0
Guesses: 2142.86 for each
Monthly Budget: 1500.00
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although I randomly generated the loan amounts, the loan starting dates, payments remaining, and interest rates are close to our real situation. Loans 1-3 haven&amp;rsquo;t started payments yet, but are accruing interest. Loan 4 hasn&amp;rsquo;t started payments yet, but isn&amp;rsquo;t accruing interest yet. Loans 1-4 will use the standard 10 year repayment plan (120 payments). Loans 5-7 have already started payments, and have ~90 payments left. Here are the results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Highest Interest Rate
Loan 1: $3005.06
Loan 2: $3223.74
Loan 3: $0.00
Loan 4: $0.00
Loan 5: $0.00
Loan 6: $8771.20
Loan 7: $0.00
Months: 72
Interest Paid: $33823.60
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Highest Principal
Loan 1: $6628.04
Loan 2: $8371.96
Loan 3: $0.00
Loan 4: $0.00
Loan 5: $0.00
Loan 6: $0.00
Loan 7: $0.00
Months: 73
Interest Paid: $34740.63
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Lowest Principal
Loan 1: $0.00
Loan 2: $8393.03
Loan 3: $0.00
Loan 4: $0.00
Loan 5: $0.00
Loan 6: $6606.97
Loan 7: $0.00
Months: 73
Interest Paid: $34396.28
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It looks like targeting payments towards the highest interest rate saves you ~$1k over targeting the highest principal and ~$400 over targeting the lowest principal. This would lead me to believe that there&amp;rsquo;s not a significant difference between the highest interest and lowest principal targeting methods. Sure, there&amp;rsquo;s a $400 difference between the two cases with these randomly generated loan amounts, but that&amp;rsquo;s over 6 years and on top of ~$34k in interest. You could save $400 by buying groceries differently, cutting back on Starbucks, or something else very minor &lt;em&gt;for a single year&lt;/em&gt;. I guess the point I&amp;rsquo;m trying to make here is that if you are struggling with the emotional toll of your seemingly never ending student loan debt, maybe target your payments towards the loan with the lowest principal so you can get a sense of accomplishment before paying off the next loan.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Minimizing Student Loan Interest with Python - Part 2</title>
      <link>https://tinkering.xyz/posts/student-loan-simulator-part-2/</link>
      <pubDate>Mon, 13 Mar 2017 16:53:14 -0400</pubDate>
      
      <guid>https://tinkering.xyz/posts/student-loan-simulator-part-2/</guid>
      <description>

&lt;p&gt;In &lt;a href=&#34;https://tinkering.xyz/posts/student-loan-simulator-part-1/&#34;&gt;Part 1&lt;/a&gt; of this series I discussed the ins and outs of student loans and in this installment I&amp;rsquo;ll be discussing the program I wrote to simulate paying off our student loans. If you haven&amp;rsquo;t read Part 1 I recommend doing that before continuing so that you can familiarize yourself with the terminology. The code for this project can be found &lt;a href=&#34;https://github.com/zmitchell/student-loan-simulator&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;loan-information&#34;&gt;Loan Information&lt;/h2&gt;

&lt;p&gt;I started out by making a class to hold all of the information related to each loan. For each loan I need the following pieces of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a name or label&lt;/li&gt;
&lt;li&gt;the current principal&lt;/li&gt;
&lt;li&gt;the current interest&lt;/li&gt;
&lt;li&gt;the interest rate&lt;/li&gt;
&lt;li&gt;how many payments are left&lt;/li&gt;
&lt;li&gt;how many months until payments start&lt;/li&gt;
&lt;li&gt;whether the interest is deferred&lt;/li&gt;
&lt;li&gt;the total interest paid&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I store most of those fields using &lt;code&gt;@property&lt;/code&gt;, which is the first time I&amp;rsquo;ve really used the &lt;code&gt;@property&lt;/code&gt; decorator. If you&amp;rsquo;ve never heard of &lt;code&gt;@property&lt;/code&gt;, &lt;a href=&#34;http://stackabuse.com/python-properties/&#34;&gt;here&amp;rsquo;s&lt;/a&gt; a nice overview. In a nutshell, &lt;code&gt;@property&lt;/code&gt; lets you write methods that are accessed like properties i.e. &lt;code&gt;foo.set_bar(value)&lt;/code&gt; becomes &lt;code&gt;foo.bar = value&lt;/code&gt; and &lt;code&gt;value = foo.get_bar()&lt;/code&gt; becomes &lt;code&gt;value = foo.bar&lt;/code&gt;. You can even use &lt;code&gt;@property&lt;/code&gt; to give your class properties whose values are calculated each time they are accessed.&lt;/p&gt;

&lt;h2 id=&#34;payoff-algorithm&#34;&gt;Payoff Algorithm&lt;/h2&gt;

&lt;p&gt;The question I wanted to answer was this: if I receive a big check, how should I distribute the money between my student loans to minimize the total interest I&amp;rsquo;ll pay over the lifetime of my loans? The two functions below outline the loan payoff process.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;interest_func&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(payments):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;loans&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;make_loans(print_report&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;False)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;payment,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;loan&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;zip(payments,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;loans):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;loan&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;make_payment(payment)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;payoff_loans(loans,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;print_report&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;False)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;total_paid_interest(loans)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;payoff_loans&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(loans):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;active_loans&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;active_loan_indices(loans)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;monthly_budget&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1000.0&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;len(active_loans)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;make_payments(loans,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;active_loans,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;monthly_budget)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;accrue_interest(loans)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;increment_payoff_times(loans)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;active_loans&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;active_loan_indices(loans)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first step is to supply &lt;code&gt;interest_func&lt;/code&gt; with a list of dollar amounts to pay towards the corresponding loans. This list of dollar amounts represents how I&amp;rsquo;ve decided to split up the hypothetical big check I&amp;rsquo;ve received. How the individual dollar amounts are chosen will be discussed later.&lt;/p&gt;

&lt;p&gt;The next step is handled by &lt;code&gt;payoff_loans&lt;/code&gt;, which handles the process of making monthly payments until all of the loans are paid off. This function is where the monthly budget is set, payments are made, interest is accrued, etc.&lt;/p&gt;

&lt;p&gt;The last step, totaling the interest, occurs back in &lt;code&gt;interest_func&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;optimization&#34;&gt;Optimization&lt;/h2&gt;

&lt;p&gt;Rather than figuring out how to allocate funds for each loan myself, I use the optimization toolkit provided by SciPy, specifically &lt;code&gt;scipy.optimize.minimize&lt;/code&gt;. &lt;code&gt;minimize&lt;/code&gt; takes a function you want to minimize and finds the input for which the output of that function is a minimum (if a minimum exists). For example, if you gave &lt;code&gt;minimize&lt;/code&gt; the function &lt;code&gt;f(x) = x^2&lt;/code&gt; it would give you back &lt;code&gt;x = 0&lt;/code&gt; since that is the &lt;code&gt;x&lt;/code&gt; for which &lt;code&gt;f(x)&lt;/code&gt; has its lowest value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;scipy&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;optimize&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;minimize(interest_func,&lt;/span&gt; 
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;guess_weights,&lt;/span&gt; 
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_method,&lt;/span&gt; 
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;bounds&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_bounds,&lt;/span&gt; 
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;constraints&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;my_constraint,&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;maxiter&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1000000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;scipy.optimize.minimize&lt;/code&gt; function decides how to allocate funds to each loan using a guess I provide, passes that list of payments to &lt;code&gt;interest_func&lt;/code&gt;, and gets back the amount of interest I&amp;rsquo;ll pay. &lt;code&gt;minimize&lt;/code&gt; tweaks how it allocates funds and sees how much interest I&amp;rsquo;ll pay after the tweak. This process is repeated several times until the minimum amount of interest is found.&lt;/p&gt;

&lt;p&gt;How exactly &lt;code&gt;minimize&lt;/code&gt; decides what tweaks to make is determined by the minimization method you choose via the &lt;code&gt;method&lt;/code&gt; parameter. SciPy provides a variety of methods to choose from, but it&amp;rsquo;s up to you to choose which method is the best fit for your problem. Some factors that can guide your choice are the smoothness of your function, whether you want to provide upper or lower bounds on the function inputs, and whether the function inputs need to satisfy some other constraints.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve chosen to use the sequential least squares programming (SLSQP) method because it allows me to supply bounds and constraints on the inputs supplied to &lt;code&gt;interest_func&lt;/code&gt;. Supplying bounds ensures that the dollar amounts are positive. Supplying a constraint function ensures that the dollar amounts always add up to the big chunk of money I started with.&lt;/p&gt;

&lt;h2 id=&#34;targeting-payments&#34;&gt;Targeting Payments&lt;/h2&gt;

&lt;p&gt;The last detail to discuss is how payments are made on a monthly basis. Each month starts with an identical budget. The minimum payments are made on active loans from that monthly budget, leaving me with a surplus each month. What I decide to do with the surplus makes a difference. I came up with three different ways to use the surplus in the program:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;pay towards the loan with the highest interest rate&lt;/li&gt;
&lt;li&gt;pay towards the loan that costs the most in interest in terms of sheer dollar amount&lt;/li&gt;
&lt;li&gt;pay towards the loan with the lowest principal&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Regardless of which method is chosen the surplus is put towards one loan at a time. If a loan payment is larger than the remaining balance, the amount that is overpaid is put back into the monthly surplus to be used towards other loans. I&amp;rsquo;ll examine the differences between the different payoff methods in the next part of the series.&lt;/p&gt;

&lt;h2 id=&#34;looking-ahead&#34;&gt;Looking Ahead&lt;/h2&gt;

&lt;p&gt;In the next part of this series, I&amp;rsquo;ll examine a few different cases using my student loan simulator.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Minimizing Student Loan Interest with Python - Part 1</title>
      <link>https://tinkering.xyz/posts/student-loan-simulator-part-1/</link>
      <pubDate>Thu, 09 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://tinkering.xyz/posts/student-loan-simulator-part-1/</guid>
      <description>

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;First off, my wife and I live in the United States. I&amp;rsquo;m not sure how student loans work in other countries, so keep that in mind as I pretend to know what I&amp;rsquo;m talking about.&lt;/p&gt;

&lt;p&gt;My wife and I both have student loans (shocker). I&amp;rsquo;m still in graduate school, so I don&amp;rsquo;t have to start making payments on my student loans yet. On the other hand, my wife has a Grown Up job, so she has to make student loan payments.&lt;/p&gt;

&lt;p&gt;What I want to investigate is how much total interest do I pay when we pay off our student loans in different ways. There are formulas that let you calulate interest for single loans, but we have several loans with different principals, different interest rates, different numbers of payments remaining, and different dates at which payments start. It just seemed easier to have a computer do all of these calculations.&lt;/p&gt;

&lt;p&gt;Then, let&amp;rsquo;s say we get a big check like a tax return, a returned security deposit, etc. If we want to put that towards student loans, how should we spread out that money to reduce the total interest that we pay?&lt;/p&gt;

&lt;h2 id=&#34;parts-of-a-loan&#34;&gt;Parts of a Loan&lt;/h2&gt;

&lt;p&gt;For those of you who are fortunate enough to not have to know how a loan works, let&amp;rsquo;s start with a refresher course on the various parts of a loan. When a bank gives you a loan, they let you borrow a chunk of money and tell you a percentage. The chunk of money you&amp;rsquo;re given is called the &lt;strong&gt;principal&lt;/strong&gt; and the the percentage is the &lt;strong&gt;interest rate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;By letting you borrow some money that you promise to pay back, a bank is providing a service. Any time a bank lets someone borrow money, there is some risk that the bank won&amp;rsquo;t get its money back for one reason or another. So, in order to have a successful business, the bank charges you a fee for the service it&amp;rsquo;s providing you and the risk it&amp;rsquo;s taking on you. The fee the bank charges you is the &lt;strong&gt;interest&lt;/strong&gt; you pay on your loan.&lt;/p&gt;

&lt;p&gt;The interest you pay depends on how much money you&amp;rsquo;re borrowing and how long it takes for you to pay it back. The interest rate is a percentage which is used to determine how much interest you pay the bank as a fraction of the amount that you borrowed. Rather than pay all of the interest up front, you accumulate or &lt;em&gt;accrue&lt;/em&gt; interest every second that you still owe the bank money. The interest that you pay on your monthly payment is (typically) the interest that has accrued since the last payment.&lt;/p&gt;

&lt;h2 id=&#34;types-of-student-loans&#34;&gt;Types of Student Loans&lt;/h2&gt;

&lt;p&gt;There are a bunch of different types of student loans that you can get from the government or private banks. My wife and I have two different kinds of loans: subsidized and unsubsidized federal student loans.&lt;/p&gt;

&lt;p&gt;Before diving in, it&amp;rsquo;s worth mentioning the different time periods involved in the student loan process. The first time period is obviously while you&amp;rsquo;re in school. While you&amp;rsquo;re in the &lt;strong&gt;deferrment&lt;/strong&gt; period, you don&amp;rsquo;t have to pay back your student loans. In my case, I&amp;rsquo;m in deferrment because I&amp;rsquo;m in graduate school. The &lt;strong&gt;grace&lt;/strong&gt; period is the time (typically six months) between leaving the deferrment period and the start of student loan payments. In my case, the grace period would be the six months between leaving graduate school and the start of my student loan payments.&lt;/p&gt;

&lt;h3 id=&#34;unsubsidized&#34;&gt;Unsubsidized&lt;/h3&gt;

&lt;p&gt;This type of student loan is always accruing interest, but you don&amp;rsquo;t have to make payments until the end of the grace period. At the end of the grace period, all of the accrued interest is added to the principal, and the interest is set back to zero. This process is called &lt;strong&gt;capitalization&lt;/strong&gt;. Now you have a loan with a larger principal that hasn&amp;rsquo;t accrued any interest yet, but will accrue interest on the new, larger principal.&lt;/p&gt;

&lt;p&gt;In this case you essentially have to pay back a larger loan than you took out, but with the same interest rate. I guess this is better than having to make payments while you&amp;rsquo;re in school, but it seems to penalize people who have long post-graduate programs (like physicists).&lt;/p&gt;

&lt;p&gt;The question this type of loan raises is whether my wife and I should try to pay down her current loans, or pay down my loans before they have a chance to capitalize. This is something I want to look at with my student loan simulator.&lt;/p&gt;

&lt;h3 id=&#34;subsidized&#34;&gt;Subsidized&lt;/h3&gt;

&lt;p&gt;This type of student loan doesn&amp;rsquo;t accrue interest until after the grace period. I only have one of these loans, and it&amp;rsquo;s the smallest loan that either of us have, so my gut tells me that we should put our money towards the other loans.&lt;/p&gt;

&lt;h2 id=&#34;monthly-payments&#34;&gt;Monthly Payments&lt;/h2&gt;

&lt;p&gt;There is a ton of different student loan repayment plans. Some plans adjust your monthly payments based on your income, and others payoff the loan in a specified number of years. In general, the longer it takes to payoff the loan, the more you pay in interest.&lt;/p&gt;

&lt;p&gt;For the sake of simplicity and minimizing the amount of interest we&amp;rsquo;ll pay over time, I went with the standard repayment plan. The standard repayment plan has a term of 10 years, or 120 monthly payments. Monthly payments always target interest first, and what&amp;rsquo;s left over is applied to the principal.&lt;/p&gt;

&lt;p&gt;As part of this program I needed to calculate these monthly payments. Initially I thought you would calculate the monthly payment by dividing the principal up into 120 equal chunks plus accrued interest. Well, that&amp;rsquo;s not how things really work. In actuality, your monthly payments are constant, but over time you pay less towards interest and more towards the principal.&lt;/p&gt;

&lt;p&gt;I thought about how to derive the formula for the monthly payment for about 1 minute, and then just looked for it on the internet. Most of the search results are just calculators that tell you what your payments are, but not how to calculate them, so I&amp;rsquo;m listing the formula here:&lt;/p&gt;

&lt;p&gt;M = (r * P) / (1 + (1 + r)^(-n))&lt;/p&gt;

&lt;p&gt;where &amp;ldquo;M&amp;rdquo; is the monthly payment, &amp;ldquo;r&amp;rdquo; is the monthly interest rate (yearly rate divided by 12, not as a percent), and &amp;ldquo;n&amp;rdquo; is the number of payments you have to make.&lt;/p&gt;

&lt;p&gt;The typical use case for this formula is calculating what your payments will be before you have to start paying them, but it also works if you have already made some payments. Just use your current principal for &amp;ldquo;P&amp;rdquo;, and your payments remaining for &amp;ldquo;n.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;loan-details&#34;&gt;Loan Details&lt;/h2&gt;

&lt;p&gt;My wife has been making student loan payments for a little while, but my payments won&amp;rsquo;t start for quite some time. One of my loans is subsidized, but all of the other loans are unsubsidized.&lt;/p&gt;

&lt;p&gt;The process I wanted to simulate looks like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(Maybe) make a big initial payment on some loans&lt;/li&gt;
&lt;li&gt;Make payments on my wife&amp;rsquo;s loans for a while&lt;/li&gt;
&lt;li&gt;My loans capitalize&lt;/li&gt;
&lt;li&gt;Make payments on all of the loans until they&amp;rsquo;re paid off&lt;br /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you read some personal finance blogs or student loan websites, you&amp;rsquo;ll generally get pretty good advice, but that advice tends to be pretty general. Some people say you should pay off the smallest loan first, then put the money you were spending on that loan towards the next smallest loan, and so on. This is called the &amp;ldquo;snowball&amp;rdquo; method. You pay more in interest this way, but you get the warm, fuzzy feeling of having paid of a loan sooner. Other people say you should focus on the loan with the highest interest rate.&lt;/p&gt;

&lt;p&gt;Our situation isn&amp;rsquo;t the typical situation in which you have a handfull of loans that all start at the same time, so I was skeptical of any generally prescribed plan. With that in mind, I got to work.&lt;/p&gt;

&lt;h2 id=&#34;looking-ahead&#34;&gt;Looking Ahead&lt;/h2&gt;

&lt;p&gt;In the next part of this series, I&amp;rsquo;ll describe the program I wrote to simulate the student loan payoff process.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>