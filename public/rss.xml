<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Tinkering</title>
      <link>https://tinkering.xyz</link>
      <description>Come for the Foo, stay for the Bar</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://tinkering.xyz/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Mon, 09 Sep 2024 00:00:00 +0000</lastBuildDate>
      <item>
          <title>proctrace - a high level profiler for process lifecycle events</title>
          <pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/proctrace/</link>
          <guid>https://tinkering.xyz/proctrace/</guid>
          <description xml:base="https://tinkering.xyz/proctrace/">&lt;p&gt;&lt;code&gt;proctrace&lt;&#x2F;code&gt; is a profiler that runs on top of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bpftrace&#x2F;bpftrace&quot;&gt;bpftrace&lt;&#x2F;a&gt; (for now) and traces
the execution of a process tree rooted at a user-provided command.
Right now it records the following events and the time between them:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fork&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;exec&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;exit&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;setsid&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;setpgid&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the future I&#x27;d like to extend that to opening&#x2F;closing&#x2F;inheriting file
descriptors and reads&#x2F;writes.&lt;&#x2F;p&gt;
&lt;p&gt;You can find the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;proctrace&quot;&gt;repository on GitHub&lt;&#x2F;a&gt; and usage instructions
on the &lt;a href=&quot;https:&#x2F;&#x2F;proctrace.xyz&quot;&gt;documentation site&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;details&gt;
    &lt;summary&gt;RustConf 2024&lt;&#x2F;summary&gt;
    &lt;p&gt;I&#x27;ll be at RustConf 2024 in Montreal in just a few days.
If you&#x27;d like to get together and chat about &lt;code&gt;proctrace&lt;&#x2F;code&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&quot;&gt;Flox&lt;&#x2F;a&gt;,
feel free to hit me up on &lt;a href=&quot;https:&#x2F;&#x2F;hachyderm.io&#x2F;@zmitchell&quot;&gt;Mastodon&lt;&#x2F;a&gt; or &lt;a href=&quot;mailto:zmitchell@fastmail.com&quot;&gt;email&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;

&lt;&#x2F;details&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The output can be rendered in a few different ways,
but the most interesting one is as a Mermaid Gantt diagram
(inspired by &lt;a href=&quot;https:&#x2F;&#x2F;brycemecum.com&#x2F;2023&#x2F;03&#x2F;31&#x2F;til-mermaid-tracing&#x2F;&quot;&gt;this article&lt;&#x2F;a&gt;).
If you were to clone the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;proctrace&quot;&gt;proctrace repo&lt;&#x2F;a&gt; on Linux and do the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ flox activate # provides dev dependencies
&lt;&#x2F;span&gt;&lt;span&gt;$ cargo build
&lt;&#x2F;span&gt;&lt;span&gt;$ proctrace record -o demo.log -b $(which bpftrace) -- .&#x2F;demo_script.sh
&lt;&#x2F;span&gt;&lt;span&gt;$ proctrace render -i demo.log -d mermaid
&lt;&#x2F;span&gt;&lt;span&gt;gantt
&lt;&#x2F;span&gt;&lt;span&gt;    title Process Trace
&lt;&#x2F;span&gt;&lt;span&gt;    dateFormat x
&lt;&#x2F;span&gt;&lt;span&gt;    axisFormat %S.%L
&lt;&#x2F;span&gt;&lt;span&gt;    todayMarker off
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    section 310331 execs
&lt;&#x2F;span&gt;&lt;span&gt;    [310331] &#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh :active, 0, 1ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310331] &#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh :active, 1, 1ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310331] &#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh :active, 1, 1ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310331] bash .&#x2F;demo_script.sh :active, 1, 1ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310331] bash .&#x2F;demo_script.sh :active, 1, 1ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310331] bash .&#x2F;demo_script.sh :active, 1, 1ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310331] bash .&#x2F;demo_script.sh :active, 1, 1ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310331] bash .&#x2F;demo_script.sh :active, 1, 1ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310331] bash .&#x2F;demo_script.sh :active, 1, 327ms
&lt;&#x2F;span&gt;&lt;span&gt;    section other
&lt;&#x2F;span&gt;&lt;span&gt;    [310332] &amp;lt;fork&amp;gt; :active, 2, 1ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310333] sleep 0.25 :active, 3, 251ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310334] curl -s -X GET example.com -o &#x2F;dev&#x2F;null -w %{http_code} :active, 255, 72ms
&lt;&#x2F;span&gt;&lt;span&gt;    [310336] &amp;lt;fork&amp;gt; :active, 328, 1ms
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then copy the output of the final command into the &lt;a href=&quot;https:&#x2F;&#x2F;mermaid.live&quot;&gt;Mermaid Live Editor&lt;&#x2F;a&gt;,
you would see something like this:
&lt;img src=&quot;&#x2F;images&#x2F;demo-process-trace.webp&quot; alt=&quot;A Gantt chart showing the execution of a Bash script&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You can probably already spot some of the known bugs in &lt;code&gt;proctrace&lt;&#x2F;code&gt; from looking
at that image,
but we&#x27;ll get into that later.
First, let&#x27;s discuss why I wrote &lt;code&gt;proctrace&lt;&#x2F;code&gt; and what problems it&#x27;s intended to solve (for me at least).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-problem&quot; aria-label=&quot;Anchor link for: the-problem&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I work at &lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&quot;&gt;Flox&lt;&#x2F;a&gt;,
which is a new tool for setting up reproducible developer environments using
carefully configured subshells and Nix under the hood.
The idea is that you get the best of both worlds:
everything &quot;just works&quot; from machine to machine and developer to developer,
but you also don&#x27;t have to mount in your home directory just to keep your
dotfiles like you would inside of a container.
I actually used Flox to develop &lt;code&gt;proctrace&lt;&#x2F;code&gt;,
and if you&#x27;re interested in reading about what that looks like,
you can read about that &lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&#x2F;blog&#x2F;rust&quot;&gt;here&lt;&#x2F;a&gt;.
That&#x27;s the end of the product pitch, I promise.&lt;&#x2F;p&gt;
&lt;p&gt;We &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flox&#x2F;flox&#x2F;releases&#x2F;tag&#x2F;v1.3.0&quot;&gt;recently released&lt;&#x2F;a&gt; a feature called
&lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&#x2F;docs&#x2F;concepts&#x2F;services&#x2F;&quot;&gt;&quot;service management&quot;&lt;&#x2F;a&gt;,
which is our take on providing long-running programs (e.g. a web server, database, etc)
to your development environment like you would with Docker Compose or
&lt;code&gt;overmind&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;hivemind&lt;&#x2F;code&gt;.
The difference is that we automatically clean up those processes when you leave
your development environment (e.g. close your shell).&lt;&#x2F;p&gt;
&lt;p&gt;Getting all of that working was a bit of a hassle due to the wealth of race
conditions involved,
the various ways in which an error could cause processes to be leaked, etc.
The race conditions caused &lt;em&gt;several&lt;&#x2F;em&gt; flaky tests that would regularly cause
issues for the entire test suite.&lt;&#x2F;p&gt;
&lt;p&gt;For example, since we do a lot of gymnastics to configure your shell properly
we want to ensure that we have good test coverage for that.
We make extensive use of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bats-core&#x2F;bats-core&quot;&gt;bats&lt;&#x2F;a&gt;,
the Bash Automated Test Suite,
for writing certain tests as shell scripts since trying to test how a shell behaves
turns out to be a bit of a nightmare from something other than a shell.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;details&gt;
    &lt;summary&gt;matklad had helpful ideas&lt;&#x2F;summary&gt;
    &lt;p&gt;I&#x27;m a bit of a testing nerd and the state of our test suite really bugs me.
I&#x27;ve been reading &lt;a href=&quot;https:&#x2F;&#x2F;matklad.github.io&#x2F;&quot;&gt;Alex Kladov&#x27;s blog&lt;&#x2F;a&gt; for a while,
and one of the things they write about extensively is testing.
At one point I reached out for advice and they were very helpful with their
suggestions,
but we haven&#x27;t found the time to actually implement them :)
That&#x27;s startup life for you.&lt;&#x2F;p&gt;

&lt;&#x2F;details&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Since &lt;code&gt;bats&lt;&#x2F;code&gt; is aimed at things happening in your shell,
it captures &lt;code&gt;stdout&lt;&#x2F;code&gt; and &lt;code&gt;stderr&lt;&#x2F;code&gt; so that you can make assertions about their
contents.
This means that if you want to debug by printing&#x2F;&lt;code&gt;echo&lt;&#x2F;code&gt;ing,
that output would get mixed in with the output of the program under test.
&lt;code&gt;bats&lt;&#x2F;code&gt; gets around this by opening a new file descriptor (3).
When you write to fd 3,
the output is shown without being captured.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, it also waits for this file descriptor to
be closed before the test suite will conclude.
If a process inherits this file descriptor and is later backgrounded,
you have a perfect storm for a deadlock.
&lt;code&gt;bats&lt;&#x2F;code&gt; will happily wait forever for that file descriptor to close
while the background process happily waits for someone to clean it up.
This is a &lt;a href=&quot;https:&#x2F;&#x2F;bats-core.readthedocs.io&#x2F;en&#x2F;stable&#x2F;writing-tests.html#file-descriptor-3-read-this-if-bats-hangs&quot;&gt;known issue&lt;&#x2F;a&gt;
that &lt;code&gt;bats&lt;&#x2F;code&gt; warns you about (if you read the documentation),
but sometimes you make mistakes.&lt;&#x2F;p&gt;
&lt;p&gt;This issue rocked our world for a little bit when we were getting service
management off the ground.
We didn&#x27;t have great visibility into which tests were even causing the failures
(the tests all passed),
much less which processes were holding on to fd 3.&lt;&#x2F;p&gt;
&lt;p&gt;I wanted to be able to quickly and easily identify which test leaked the
background process,
what the background process &lt;em&gt;was&lt;&#x2F;em&gt;,
etc.
There weren&#x27;t really any tools I found that would let me do this out of the box,
so I wrote &lt;code&gt;proctrace&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;design-phase&quot;&gt;Design phase&lt;a class=&quot;zola-anchor&quot; href=&quot;#design-phase&quot; aria-label=&quot;Anchor link for: design-phase&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;requirements&quot;&gt;Requirements&lt;a class=&quot;zola-anchor&quot; href=&quot;#requirements&quot; aria-label=&quot;Anchor link for: requirements&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Given a PID, I need to be able to track:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When it creates a new process via &lt;code&gt;fork&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;When it executes a new program via &lt;code&gt;exec&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;When it terminates via &lt;code&gt;exit&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;When it changes its relationship to other processes via &lt;code&gt;setpgid&lt;&#x2F;code&gt; and &lt;code&gt;setsid&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;When any descendent process of this PID does any of the above&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once I have that process tree and events associated with each PID,
I need to be able to render that information in a &quot;useful&quot; way.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;interface&quot;&gt;Interface&lt;a class=&quot;zola-anchor&quot; href=&quot;#interface&quot; aria-label=&quot;Anchor link for: interface&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I saw two interfaces to choose from:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User turns on recording and events are recorded from all processes, user runs their command, user stops recording, user tells &lt;code&gt;proctrace&lt;&#x2F;code&gt; to post-process and return the clean output.&lt;&#x2F;li&gt;
&lt;li&gt;User supplies a command, we run it for them and filter irrelevant events, then give them the clean output.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Both have their tradeoffs.&lt;&#x2F;p&gt;
&lt;p&gt;The &quot;record everything&quot; approach puts control flow in the user&#x27;s hands,
leaves them with a recording that contains more information than is necessary,
and requires that they know how to do the post-processing that they need
e.g. which PID is the root of the process tree.
It also lets the user do multiple rounds of post-processing without the need to
collect another recording.&lt;&#x2F;p&gt;
&lt;p&gt;The &quot;do it for the user&quot; approach requires less of the user,
but doesn&#x27;t allow for different types of post-processing without another recording.&lt;&#x2F;p&gt;
&lt;p&gt;As you&#x27;ll see later,
we&#x27;re actually able to meet both of these needs,
but I decided the default mode would be the &quot;do it for the user&quot; mode.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;event-source&quot;&gt;Event source&lt;a class=&quot;zola-anchor&quot; href=&quot;#event-source&quot; aria-label=&quot;Anchor link for: event-source&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I knew that I had a few tools at my disposal for collecting the kinds of events
that I was looking for,
namely &lt;code&gt;strace&lt;&#x2F;code&gt;, &lt;code&gt;DTrace&lt;&#x2F;code&gt;, and &lt;code&gt;bpftrace&lt;&#x2F;code&gt;
(you know, all of the &lt;code&gt;*trace&lt;&#x2F;code&gt;s).
&lt;code&gt;DTrace&lt;&#x2F;code&gt; and &lt;code&gt;bpftrace&lt;&#x2F;code&gt; have the advantage that they&#x27;re scriptable and use
similar scripting languages,
so I immediately gravitated towards those tools.&lt;&#x2F;p&gt;
&lt;p&gt;One benefit of starting the command for the user is that you get to know which
PID is at the root of the process tree while you&#x27;re recording.
The downside is that you&#x27;re also responsible for starting recording before that
command runs (so you don&#x27;t miss the beginning of its execution),
so you have to start the recorder before you know the PID.
At that point it&#x27;s also too late to somehow embed the PID
in the execution of the tool (e.g. through templating a script or something).
You could do something like issue a sentinel system call containing the
PID,
but that would be cursed.&lt;&#x2F;p&gt;
&lt;p&gt;Given that constraint,
the recorder will know nothing about which PIDs it&#x27;s interested in and just
report events for all PIDs.
An external tool (&lt;code&gt;proctrace&lt;&#x2F;code&gt;) will consume those events and do the book keeping.&lt;&#x2F;p&gt;
&lt;p&gt;For now &lt;code&gt;proctrace&lt;&#x2F;code&gt; only supports &lt;code&gt;bpftrace&lt;&#x2F;code&gt; because there is a &lt;a href=&quot;https:&#x2F;&#x2F;forums.developer.apple.com&#x2F;forums&#x2F;thread&#x2F;735939&quot;&gt;macOS bug&lt;&#x2F;a&gt;
that causes your machine to hang if you run DTrace and your machine has ever
been to sleep since boot.
Putting your machine to sleep seems like an edge case to me though,
so I get it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;termination&quot;&gt;Termination&lt;a class=&quot;zola-anchor&quot; href=&quot;#termination&quot; aria-label=&quot;Anchor link for: termination&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When do we stop recording?
To me the most reasonable answer is &quot;when all of the processes in the tree have exited.&quot;
In the case that a process doesn&#x27;t exit,
the user will need to &lt;code&gt;Ctrl-C&lt;&#x2F;code&gt; and kill the recording,
at which point &lt;code&gt;proctrace&lt;&#x2F;code&gt; should persist any data that was still in flight
and exit.
If &lt;code&gt;proctrace&lt;&#x2F;code&gt; detects that all of the processes in the tree have exited,
it will shutdown automatically.&lt;&#x2F;p&gt;
&lt;p&gt;Right now &lt;code&gt;proctrace&lt;&#x2F;code&gt; doesn&#x27;t kill the process that was still running,
but there&#x27;s an open issue to do this in the future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;a class=&quot;zola-anchor&quot; href=&quot;#usage&quot; aria-label=&quot;Anchor link for: usage&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Before we get into implementation challenges, let&#x27;s talk about how you use
&lt;code&gt;proctrace&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;First you create a recording:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ proctrace record -o &amp;lt;file&amp;gt; -- &amp;lt;cmd&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will call &lt;code&gt;bpftrace&lt;&#x2F;code&gt; under the hood, so it will prompt for your password.
If you&#x27;ve installed &lt;code&gt;bpftrace&lt;&#x2F;code&gt; in a location that&#x27;s only in your user&#x27;s
&lt;code&gt;PATH&lt;&#x2F;code&gt;
(this is the case if you&#x27;ve installed via Flox or &lt;code&gt;nix profile install&lt;&#x2F;code&gt;),
then you&#x27;ll need to pass in the path of the &lt;code&gt;bpftrace&lt;&#x2F;code&gt; execuable with the
&lt;code&gt;-b&lt;&#x2F;code&gt; flag.&lt;&#x2F;p&gt;
&lt;p&gt;This command will record events in newline-delimited JSON format to the
specified file.
It looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{&amp;quot;Fork&amp;quot;:{&amp;quot;timestamp&amp;quot;:874106944,&amp;quot;parent_pid&amp;quot;:566940,&amp;quot;child_pid&amp;quot;:566954,&amp;quot;parent_pgid&amp;quot;:566939}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:874201623,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:null}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;ExecArgs&amp;quot;:{&amp;quot;timestamp&amp;quot;:874201623,&amp;quot;pid&amp;quot;:566954,&amp;quot;args&amp;quot;:&amp;quot;&#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;ExecArgs&amp;quot;:{&amp;quot;timestamp&amp;quot;:874201623,&amp;quot;pid&amp;quot;:566954,&amp;quot;args&amp;quot;:&amp;quot;.&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once you have that recording you can render it in a few ways.
I&#x27;ve already showed you the Mermaid output above, so I&#x27;ll skip that.&lt;&#x2F;p&gt;
&lt;p&gt;The default render method (&lt;code&gt;sequential&lt;&#x2F;code&gt;) is to just display the events in the order that they
occurred.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{&amp;quot;Fork&amp;quot;:{&amp;quot;timestamp&amp;quot;:874106944,&amp;quot;parent_pid&amp;quot;:566940,&amp;quot;child_pid&amp;quot;:566954,&amp;quot;parent_pgid&amp;quot;:566939}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:874201623,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;&#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875457447,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice that the &lt;code&gt;ExecArgs&lt;&#x2F;code&gt; events have been removed.
That&#x27;s part of the post-processing that&#x27;s done when rendering, but we&#x27;ll get
into that later.&lt;&#x2F;p&gt;
&lt;p&gt;The other render method (&lt;code&gt;by-process&lt;&#x2F;code&gt;) does a similar thing except it groups
events by process and reports processes in the order that they were forked.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;PID 566954: &#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Fork&amp;quot;:{&amp;quot;timestamp&amp;quot;:874106944,&amp;quot;parent_pid&amp;quot;:566940,&amp;quot;child_pid&amp;quot;:566954,&amp;quot;parent_pgid&amp;quot;:566939}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:874201623,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;&#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875296339,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;&#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875354678,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;&#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875404667,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;&#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875457447,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875489336,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875526926,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875571015,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875602105,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875633734,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875674564,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:875707274,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954,&amp;quot;cmdline&amp;quot;:&amp;quot;bash .&#x2F;demo_script.sh&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exit&amp;quot;:{&amp;quot;timestamp&amp;quot;:1204543692,&amp;quot;pid&amp;quot;:566954,&amp;quot;ppid&amp;quot;:566940,&amp;quot;pgid&amp;quot;:566954}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;PID 566955, forked from 566954
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Fork&amp;quot;:{&amp;quot;timestamp&amp;quot;:877599490,&amp;quot;parent_pid&amp;quot;:566954,&amp;quot;child_pid&amp;quot;:566955,&amp;quot;parent_pgid&amp;quot;:566940}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exit&amp;quot;:{&amp;quot;timestamp&amp;quot;:877995285,&amp;quot;pid&amp;quot;:566955,&amp;quot;ppid&amp;quot;:566954,&amp;quot;pgid&amp;quot;:566955}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;PID 566956: sleep 0.25
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Fork&amp;quot;:{&amp;quot;timestamp&amp;quot;:878221082,&amp;quot;parent_pid&amp;quot;:566954,&amp;quot;child_pid&amp;quot;:566956,&amp;quot;parent_pgid&amp;quot;:566940}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:878429699,&amp;quot;pid&amp;quot;:566956,&amp;quot;ppid&amp;quot;:566954,&amp;quot;pgid&amp;quot;:566956,&amp;quot;cmdline&amp;quot;:&amp;quot;sleep 0.25&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exit&amp;quot;:{&amp;quot;timestamp&amp;quot;:1129839058,&amp;quot;pid&amp;quot;:566956,&amp;quot;ppid&amp;quot;:566954,&amp;quot;pgid&amp;quot;:566956}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;PID 566957: curl -s -X GET example.com -o &#x2F;dev&#x2F;null -w %{http_code}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Fork&amp;quot;:{&amp;quot;timestamp&amp;quot;:1130015346,&amp;quot;parent_pid&amp;quot;:566954,&amp;quot;child_pid&amp;quot;:566957,&amp;quot;parent_pgid&amp;quot;:566940}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exec&amp;quot;:{&amp;quot;timestamp&amp;quot;:1130503480,&amp;quot;pid&amp;quot;:566957,&amp;quot;ppid&amp;quot;:566954,&amp;quot;pgid&amp;quot;:566957,&amp;quot;cmdline&amp;quot;:&amp;quot;curl -s -X GET example.com -o &#x2F;dev&#x2F;null -w %{http_code}&amp;quot;}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exit&amp;quot;:{&amp;quot;timestamp&amp;quot;:1203740882,&amp;quot;pid&amp;quot;:566957,&amp;quot;ppid&amp;quot;:566954,&amp;quot;pgid&amp;quot;:566957}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;PID 566959, forked from 566954
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Fork&amp;quot;:{&amp;quot;timestamp&amp;quot;:1203848581,&amp;quot;parent_pid&amp;quot;:566954,&amp;quot;child_pid&amp;quot;:566959,&amp;quot;parent_pgid&amp;quot;:566940}}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;Exit&amp;quot;:{&amp;quot;timestamp&amp;quot;:1204271226,&amp;quot;pid&amp;quot;:566959,&amp;quot;ppid&amp;quot;:566954,&amp;quot;pgid&amp;quot;:566959}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In a Mermaid rendering I also do some quality of life tweaks to the labels:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Nix store paths (&lt;code&gt;&#x2F;nix&#x2F;store&#x2F;&amp;lt;hash&amp;gt;-&amp;lt;name&amp;gt;&lt;&#x2F;code&gt;) get shortened to &lt;code&gt;&amp;lt;store&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Processes that were forked without later &lt;code&gt;exec&lt;&#x2F;code&gt;ing are displayed as &lt;code&gt;&amp;lt;fork&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;raw-recordings&quot;&gt;Raw recordings&lt;a class=&quot;zola-anchor&quot; href=&quot;#raw-recordings&quot; aria-label=&quot;Anchor link for: raw-recordings&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I mentioned earlier that we&#x27;re able to meet both sets of needs:
&quot;do it for me&quot; and &quot;put me in the driver&#x27;s seat&quot;.
That&#x27;s accomplished by taking &quot;raw&quot; recordings.&lt;&#x2F;p&gt;
&lt;p&gt;A raw recording is simply the recorded output of the &lt;code&gt;bpftrace&lt;&#x2F;code&gt; script.
You can do this one of two ways.
Since the script is stored in the repository and we quite literally just
write its output,
you could just run the script yourself whenever and however you want.&lt;&#x2F;p&gt;
&lt;p&gt;That output looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;EXEC: ts=874201623,pid=566954,ppid=566940,pgid=566954
&lt;&#x2F;span&gt;&lt;span&gt;EXEC_ARGS: ts=874201623,pid=566954,&#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh
&lt;&#x2F;span&gt;&lt;span&gt;EXEC_ARGS: ts=874201623,pid=566954,.&#x2F;demo_script.sh
&lt;&#x2F;span&gt;&lt;span&gt;FORK: ts=874106944,parent_pid=566940,child_pid=566954,parent_pgid=566939
&lt;&#x2F;span&gt;&lt;span&gt;EXEC: ts=875296339,pid=566954,ppid=566940,pgid=566954
&lt;&#x2F;span&gt;&lt;span&gt;EXEC_ARGS: ts=875296339,pid=566954,&#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh
&lt;&#x2F;span&gt;&lt;span&gt;EXEC_ARGS: ts=875296339,pid=566954,bash .&#x2F;demo_script.sh
&lt;&#x2F;span&gt;&lt;span&gt;EXEC: ts=875354678,pid=566954,ppid=566940,pgid=566954
&lt;&#x2F;span&gt;&lt;span&gt;EXEC_ARGS: ts=875354678,pid=566954,&#x2F;usr&#x2F;bin&#x2F;env bash .&#x2F;demo_script.sh
&lt;&#x2F;span&gt;&lt;span&gt;EXEC_ARGS: ts=875354678,pid=566954,bash .&#x2F;demo_script.sh
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The other way is to run &lt;code&gt;proctrace record&lt;&#x2F;code&gt; with the &lt;code&gt;--raw&lt;&#x2F;code&gt; flag,
in which case it will also tell you the PID of your command,
which you&#x27;ll need for the next step:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ proctrace record -r -o demo_raw.log -- .&#x2F;demo_script.sh
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Process tree root was PID 305101
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One of the benefits of a raw recording is that you can ingest and render a
process tree from a root other than the command that you actually ran.
For instance, say I recorded the entire shell test suite for Flox,
then only wanted to render the process tree starting at a particular test.
I would need to track down that PID, but that&#x27;s not terribly difficult.&lt;&#x2F;p&gt;
&lt;p&gt;To turn the raw recording into something renderable,
you use the &lt;code&gt;proctrace ingest&lt;&#x2F;code&gt; command:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ proctrace ingest -i demo_raw.log -o demo_ingested.log --root-pid 12345
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then you would render the &lt;code&gt;demo_ingested.log&lt;&#x2F;code&gt; file as you would a normal
(non-raw? cooked?) recording.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementation-challenges&quot;&gt;Implementation challenges&lt;a class=&quot;zola-anchor&quot; href=&quot;#implementation-challenges&quot; aria-label=&quot;Anchor link for: implementation-challenges&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;recording-processes-vs-threads&quot;&gt;Recording processes vs. threads&lt;a class=&quot;zola-anchor&quot; href=&quot;#recording-processes-vs-threads&quot; aria-label=&quot;Anchor link for: recording-processes-vs-threads&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;In order to start recording we launch &lt;code&gt;bpftrace&lt;&#x2F;code&gt; with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;proctrace&#x2F;blob&#x2F;main&#x2F;proctrace&#x2F;assets&#x2F;proctrace.bt&quot;&gt;script&lt;&#x2F;a&gt;
that&#x27;s stored in the repository.
This script enables probes for certain events in the Linux kernel and then
prints formatted output that &lt;code&gt;proctrace&lt;&#x2F;code&gt; can parse.
An example of one of these probes is shown below:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;tracepoint:sched:sched_process_exit
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  $task = (struct task_struct *)curtask;
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; Ensures that we don&amp;#39;t record threads exiting
&lt;&#x2F;span&gt;&lt;span&gt;  if ($task-&amp;gt;pid == $task-&amp;gt;tgid) {
&lt;&#x2F;span&gt;&lt;span&gt;    $ts = elapsed;
&lt;&#x2F;span&gt;&lt;span&gt;  	printf(&amp;quot;EXIT: ts=%u,pid=%d,ppid=%d,pgid=%d\n&amp;quot;, $ts, $task-&amp;gt;tgid, $task-&amp;gt;real_parent-&amp;gt;tgid, $task-&amp;gt;group_leader-&amp;gt;tgid);
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you aren&#x27;t familiar with the inner workings of the Linux kernel,
playing around with &lt;code&gt;bpftrace&lt;&#x2F;code&gt; is actually a great way to learn.
For example,
you may not have known that threads and processes are actually represented with
the same data structure (&lt;code&gt;struct task_struct&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;This means that if you&#x27;re only interested in process-level events,
then you need to ensure that your probes filter out events from threads.
Confusingly, each task has a &lt;code&gt;pid&lt;&#x2F;code&gt; field which is not actually the user-space
PID,
but I guess more of a generic ID for the task.
A user-space process is referred to as a &quot;thread group&quot;.
If you want to record an event once per process you can check whether the
task that triggered the probe is the main thread of the process.
That&#x27;s what the &lt;code&gt;$task-&amp;gt;pid == $task-&amp;gt;tgid&lt;&#x2F;code&gt; check is doing in the probe above.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duplicate-forks&quot;&gt;Duplicate &lt;code&gt;fork&lt;&#x2F;code&gt;s&lt;a class=&quot;zola-anchor&quot; href=&quot;#duplicate-forks&quot; aria-label=&quot;Anchor link for: duplicate-forks&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Early on when I was testing &lt;code&gt;proctrace&lt;&#x2F;code&gt; on Flox I would often see a flurry
of &lt;code&gt;fork&lt;&#x2F;code&gt;s when Flox started.
I knew it wasn&#x27;t &lt;em&gt;actually&lt;&#x2F;em&gt; forking,
and after some investigation I determined that it was this
&quot;thread vs. process&quot; distinction that was missing.&lt;&#x2F;p&gt;
&lt;p&gt;It turns out that on Linux both creating new threads and creating new processes
go through the &lt;code&gt;clone&lt;&#x2F;code&gt; system call,
and silly me I guess I expected the &lt;code&gt;tracepoint:sched:sched_process_fork&lt;&#x2F;code&gt; probe
to only fire when processes fork given that...it&#x27;s what the name says.
So instead of using that probe I switched to instrumenting &lt;code&gt;clone&lt;&#x2F;code&gt; directly and
inspecting the flags passed to &lt;code&gt;clone&lt;&#x2F;code&gt; that determine whether a thread or a process
gets created.&lt;&#x2F;p&gt;
&lt;p&gt;This is also an interesting system call to instrument because it returns more
than once!
It returns once in the parent (the caller), and once in the child
(the new thread or process).
In order to only capture one of these I actually have &lt;em&gt;two&lt;&#x2F;em&gt; probes for &lt;code&gt;clone&lt;&#x2F;code&gt;,
one that fires upon entry, and one that fires on exit.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;tracepoint:syscalls:sys_enter_clone
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  $task = (struct task_struct *)curtask;
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; Ensures that we don&amp;#39;t process forks of threads
&lt;&#x2F;span&gt;&lt;span&gt;  if ((args.clone_flags &amp;amp; 0x00010000) == 0) {
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Store the elapsed time:
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; - So we have a nonzero sentinel value
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; - So we can properly record the start of the fork,
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F;   otherwise sometimes the exec shows up first.
&lt;&#x2F;span&gt;&lt;span&gt;    $ts = elapsed;
&lt;&#x2F;span&gt;&lt;span&gt;    @clones[tid] = $ts;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tracepoint:syscalls:sys_exit_clone
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  $task = (struct task_struct *)curtask;
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; Ensures that we don&amp;#39;t record threads exiting
&lt;&#x2F;span&gt;&lt;span&gt;  if ($task-&amp;gt;pid == $task-&amp;gt;tgid) {
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; Don&amp;#39;t process this clone unless we&amp;#39;ve recorded the `enter` side of it
&lt;&#x2F;span&gt;&lt;span&gt;    if (@clones[tid] != 0) {
&lt;&#x2F;span&gt;&lt;span&gt;      $ts = @clones[tid];
&lt;&#x2F;span&gt;&lt;span&gt;      @clones[tid] = 0;
&lt;&#x2F;span&gt;&lt;span&gt;      $child_pid = args.ret;
&lt;&#x2F;span&gt;&lt;span&gt;      printf(&amp;quot;FORK: ts=%u,parent_pid=%d,child_pid=%d,parent_pgid=%d\n&amp;quot;, $ts, $task-&amp;gt;tgid, $child_pid, $task-&amp;gt;real_parent-&amp;gt;tgid);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On every &lt;code&gt;sys_enter_clone&lt;&#x2F;code&gt; we check whether we&#x27;re about to create a thread,
skip it if we are,
then record both the thread ID and the timestamp.
We record the thread ID since multiple threads within a process could be calling
&lt;code&gt;fork&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then, on &lt;code&gt;sys_exit_clone&lt;&#x2F;code&gt; I check whether the task returning from the system
call has been recorded.
If it has, that means it&#x27;s the thread that called &lt;code&gt;fork&lt;&#x2F;code&gt; in the parent process.
If it hasn&#x27;t, that means it&#x27;s a thread in the child process.
I record the result from the parent process because the return value tells us
the PID of the newly created child process.&lt;&#x2F;p&gt;
&lt;p&gt;I record the timestamp because I noticed that the &lt;code&gt;fork&lt;&#x2F;code&gt; and &lt;code&gt;exec&lt;&#x2F;code&gt; were appearing
out of order.
I don&#x27;t actually know why this was happening,
but recording the &lt;code&gt;enter&lt;&#x2F;code&gt; timestamp allows us to put things back in the correct order
during post-processing.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;buffering&quot;&gt;Buffering&lt;a class=&quot;zola-anchor&quot; href=&quot;#buffering&quot; aria-label=&quot;Anchor link for: buffering&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;When &lt;code&gt;proctrace&lt;&#x2F;code&gt; is ingesting events from &lt;code&gt;bpftrace&lt;&#x2F;code&gt; it stores events in two
different event stores:
one for &quot;tracked&quot; events and one for &quot;buffered&quot; events.
The stores are identical in terms of their functionality,
they&#x27;re each just a &lt;code&gt;BTreeMap&amp;lt;i32, VecDeque&amp;lt;Event&amp;gt;&amp;gt;&lt;&#x2F;code&gt; in Rust parlance.&lt;&#x2F;p&gt;
&lt;p&gt;While ingesting events if we see a &lt;code&gt;fork&lt;&#x2F;code&gt; whose parent PID is one we&#x27;re already
tracking then we add the child PID to the &quot;tracked&quot; store.
From that point forward any events from that PID will be added to the tracked
store.&lt;&#x2F;p&gt;
&lt;p&gt;The buffered store is a response to this &quot;fork and exec can appear out of order&quot;
problem.
Say PID 1 forks into PID 2.
If an &lt;code&gt;exec&lt;&#x2F;code&gt; from PID 2 appears before we&#x27;ve seen the &lt;code&gt;fork&lt;&#x2F;code&gt;,
we will not yet have added PID 2 to the tracked event store,
and we&#x27;ll discard this &lt;code&gt;exec&lt;&#x2F;code&gt; event.
Instead, we buffer this &lt;code&gt;exec&lt;&#x2F;code&gt; and when we see the &lt;code&gt;fork&lt;&#x2F;code&gt; we unbuffer all events
from the process.
We also iterate over the buffered store to ensure that any other events from
descendants of PID 2 would be unbuffered as well.
In practice I don&#x27;t think the &lt;code&gt;fork&lt;&#x2F;code&gt; ever appears quite that late,
but it seemed like a good idea to be safe anyway.&lt;&#x2F;p&gt;
&lt;p&gt;Right now that buffer never gets emptied, so it just grows over time,
but there&#x27;s an open issue to do garbage collection.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exec-arguments&quot;&gt;&lt;code&gt;exec&lt;&#x2F;code&gt; arguments&lt;a class=&quot;zola-anchor&quot; href=&quot;#exec-arguments&quot; aria-label=&quot;Anchor link for: exec-arguments&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There are multiple issues here.
First is that there appears to be a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bpftrace&#x2F;bpftrace&#x2F;issues&#x2F;3384&quot;&gt;bug&lt;&#x2F;a&gt; that causes &lt;code&gt;bpftrace&lt;&#x2F;code&gt;
to just fail to print the arguments.
I&#x27;m not sure what the actual limitation is,
but &lt;code&gt;bpftrace&lt;&#x2F;code&gt; doesn&#x27;t seem to be able to join an array of strings and return
that as a new string to be used in a format string.
The &lt;code&gt;join()&lt;&#x2F;code&gt; function simply takes an array of strings and prints it with a
newline at the end,
so I actually have to print a single &lt;code&gt;exec&lt;&#x2F;code&gt; event as two different lines:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;tracepoint:syscalls:sys_enter_execve
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  $task = (struct task_struct *)curtask;
&lt;&#x2F;span&gt;&lt;span&gt;  $ts = elapsed;
&lt;&#x2F;span&gt;&lt;span&gt;  printf(&amp;quot;EXEC: ts=%u,pid=%d,ppid=%d,pgid=%d\n&amp;quot;, $ts, $task-&amp;gt;tgid, $task-&amp;gt;real_parent-&amp;gt;tgid, $task-&amp;gt;group_leader-&amp;gt;tgid);
&lt;&#x2F;span&gt;&lt;span&gt;  printf(&amp;quot;EXEC_ARGS: ts=%u,pid=%d,&amp;quot;, $ts, $task-&amp;gt;tgid);
&lt;&#x2F;span&gt;&lt;span&gt;  join(args.argv);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Even then that second event (&lt;code&gt;EXEC_ARGS&lt;&#x2F;code&gt;) just might not have any arguments
for me.
To mitigate this I also query &lt;code&gt;&#x2F;proc&lt;&#x2F;code&gt; at runtime for each &lt;code&gt;exec&lt;&#x2F;code&gt; tracked in
a recording.&lt;&#x2F;p&gt;
&lt;p&gt;Again, there&#x27;s multiple issues here.
The process may have done another &lt;code&gt;exec&lt;&#x2F;code&gt; before I query &lt;code&gt;&#x2F;proc&lt;&#x2F;code&gt; and I may get
the wrong set of arguments.
The process may have exited before I query &lt;code&gt;&#x2F;proc&lt;&#x2F;code&gt; and it may not have anything
for me.
I may get different arguments compared to what &lt;code&gt;bpftrace&lt;&#x2F;code&gt; reports,
and now I have to choose which arguments to show.&lt;&#x2F;p&gt;
&lt;p&gt;I haven&#x27;t had time to look into why the arguments would be different,
so at the moment I&#x27;m just using the longer (by joined string length) of the two
sets of arguments under the assumption that the longer set has more information.
I went that direction because I noticed that in most cases the arguments were
the same or otherwise a subset of one another (or something like that).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duplicate-execs&quot;&gt;Duplicate &lt;code&gt;exec&lt;&#x2F;code&gt;s&lt;a class=&quot;zola-anchor&quot; href=&quot;#duplicate-execs&quot; aria-label=&quot;Anchor link for: duplicate-execs&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Finally,
the bug I mentioned at the very beginning of the article.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;demo-process-trace.webp&quot; alt=&quot;A Gantt chart showing the execution of a Bash script&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Sometimes I just get duplicate &lt;code&gt;exec&lt;&#x2F;code&gt;s and I have no idea why.
I suspect there&#x27;s an issue with the &lt;code&gt;bpftrace&lt;&#x2F;code&gt; script such that it&#x27;s not filtering out
threads again e.g. &lt;code&gt;sys_enter_execve&lt;&#x2F;code&gt; is actually shorthand for
&lt;code&gt;sys_enter_execve_just_kidding_this_also_fires_on_threads_too&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you look closely, there are two &lt;code&gt;&amp;lt;fork&amp;gt;&lt;&#x2F;code&gt; events,
one before the &lt;code&gt;sleep&lt;&#x2F;code&gt; and one after the &lt;code&gt;curl&lt;&#x2F;code&gt;.
I think those are actually &lt;code&gt;printf&lt;&#x2F;code&gt; calls,
which I suppose means that we&#x27;re entirely missing the &lt;code&gt;exec&lt;&#x2F;code&gt; calls for those
two events.
I&#x27;ve noticed this kind of behavior around things that are shell builtins,
but in that hastily thrown together demo script I specifically call
&lt;code&gt;command -v printf&lt;&#x2F;code&gt; to avoid running the builtin.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mermaid-limitations&quot;&gt;Mermaid limitations&lt;a class=&quot;zola-anchor&quot; href=&quot;#mermaid-limitations&quot; aria-label=&quot;Anchor link for: mermaid-limitations&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If you have a command that contains a colon character,
Mermaid just won&#x27;t render the diagram.
I&#x27;ve run into this with scripts that use &lt;code&gt;getopt&lt;&#x2F;code&gt;.
All it takes to get it working again is to manually go delete those colons
and Mermaid will be happy again.&lt;&#x2F;p&gt;
&lt;p&gt;Mermaid also doesn&#x27;t seem to let you use arbitrary timescales,
so we&#x27;re stuck using milliseconds at the moment.
For that reason I round up the execution time of each span
(e.g. time between a &lt;code&gt;fork&lt;&#x2F;code&gt; and &lt;code&gt;exit&lt;&#x2F;code&gt;, between two successive &lt;code&gt;exec&lt;&#x2F;code&gt;s, etc)
to 1ms if it would otherwise be less than that.
Mermaid also seems to really enjoy stretching diagrams out horizontally
more than is necessary.
Oh well, it clearly wasn&#x27;t designed for what I&#x27;m using it for.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;going-forward&quot;&gt;Going forward&lt;a class=&quot;zola-anchor&quot; href=&quot;#going-forward&quot; aria-label=&quot;Anchor link for: going-forward&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s early days for &lt;code&gt;proctrace&lt;&#x2F;code&gt; and there&#x27;s a lot of low-hanging fruit if you&#x27;d
like to pitch in.
Check out the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;proctrace&#x2F;issues&quot;&gt;Github Issues page&lt;&#x2F;a&gt; and see what interests you.&lt;&#x2F;p&gt;
&lt;p&gt;Ultimately I&#x27;d like to generate HTML reports similar to how Cargo generates
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;timings.html&quot;&gt;build timings reports&lt;&#x2F;a&gt;.
That would allow us to more accurately and more flexibly display the information
that we already have,
but would also allow us to display other information as well.
For example, we already have information about process groups,
so you could color each span according to the process group that it belongs to.&lt;&#x2F;p&gt;
&lt;p&gt;If you have thoughts about how to make &lt;code&gt;proctrace&lt;&#x2F;code&gt; more correct or more
ergonomic,
I&#x27;d love to hear them.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Evaluating a process manager</title>
          <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/evaluating-process-manager/</link>
          <guid>https://tinkering.xyz/evaluating-process-manager/</guid>
          <description xml:base="https://tinkering.xyz/evaluating-process-manager/">&lt;p&gt;At &lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&quot;&gt;Flox&lt;&#x2F;a&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; we recently released a feature that we call &quot;service management&quot;,
which is essentially an analog to Docker Compose that runs processes instead of containers.
In short, you define some services in your manifest and they get started as part of activating
your environment with &lt;code&gt;flox activate --start-services&lt;&#x2F;code&gt;.
When there are no more activations of this environment (i.e. you&#x27;ve closed all your shells that
had activated the environment) the services are &lt;strong&gt;automatically cleaned up&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A simplified environment that starts a Postgres server looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[install]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postgres&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pkg-path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[services.postgres]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;postgres -D my_data_dir&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[options]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;systems &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aarch64-darwin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64-darwin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;aarch64-linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x86_64-linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pretty straightforward, right?
What&#x27;s not straightforward is wrangling a process manager to bend it to your will
without losing your mind a little bit.
What&#x27;s the issue?
Race conditions. Race conditions everywhere.
Some of them in how you call the process manager, others inside the process manager itself.&lt;&#x2F;p&gt;
&lt;p&gt;Different process managers will be better or worse at certain tasks,
and some will be missing features that you&#x27;ve decided that you really need.
They may also just do different things because there&#x27;s not a single correct answer.&lt;&#x2F;p&gt;
&lt;p&gt;As always, choosing one will come down to your particular needs and priorities.
However, the unknown unknowns can make choosing pretty difficult.
Having spent the last couple of months immersed in this,
I&#x27;ve put together a list of topics to consider to help you get your due diligence done.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;shutdown&quot;&gt;Shutdown&lt;a class=&quot;zola-anchor&quot; href=&quot;#shutdown&quot; aria-label=&quot;Anchor link for: shutdown&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Does it cleanly shut down when requested (e.g. with a built-in command)?&lt;&#x2F;li&gt;
&lt;li&gt;Does it cleanly shut down when sent a SIGTERM, etc?&lt;&#x2F;li&gt;
&lt;li&gt;If there is data in-flight (process has shut down, but there are logs yet to be written) during shutdown, is shutdown postponed until that data is persisted, or is it gone forever?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;starting-services&quot;&gt;Starting services&lt;a class=&quot;zola-anchor&quot; href=&quot;#starting-services&quot; aria-label=&quot;Anchor link for: starting-services&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Can you start a single process?&lt;&#x2F;li&gt;
&lt;li&gt;Can you start all processes without naming them?&lt;&#x2F;li&gt;
&lt;li&gt;Can you specify a startup order?&lt;&#x2F;li&gt;
&lt;li&gt;Can it block until processes have started?&lt;&#x2F;li&gt;
&lt;li&gt;Is it clear what it means for processes to have started (e.g. the process has been forked vs a readiness check is green)?&lt;&#x2F;li&gt;
&lt;li&gt;What happens if you try to start a process that&#x27;s already running (warning? error? success?)&lt;&#x2F;li&gt;
&lt;li&gt;What happens if you try to start multiple processes and some of them are already running? Do you get individual warnings but still succeed? Do you get an error?&lt;&#x2F;li&gt;
&lt;li&gt;What happens if you try to start multiple processes and some of them don&#x27;t exist? Is that a warning, a failure, or success? Do you get individual warnings&#x2F;errors? Does it check the names beforehand? Does it succeed until it finds a name that doesn&#x27;t exist?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;stopping-processes&quot;&gt;Stopping processes&lt;a class=&quot;zola-anchor&quot; href=&quot;#stopping-processes&quot; aria-label=&quot;Anchor link for: stopping-processes&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Can you stop a single process?&lt;&#x2F;li&gt;
&lt;li&gt;Can you stop all processes without naming them?&lt;&#x2F;li&gt;
&lt;li&gt;Can you specify a shut down order?&lt;&#x2F;li&gt;
&lt;li&gt;Can it block until all processes have stopped?&lt;&#x2F;li&gt;
&lt;li&gt;Is it clear what it means for processes to have stopped (e.g. the process has been sent a SIGTERM vs the process has terminated and is now a zombie vs the process has terminated and been cleaned up)?&lt;&#x2F;li&gt;
&lt;li&gt;What happens if you try to stop a process that&#x27;s not running (warning? error? success?)&lt;&#x2F;li&gt;
&lt;li&gt;What happens if you try to stop multiple processes and some of them aren&#x27;t already running? Do you get individual warnings and succeed? Do you get an error?&lt;&#x2F;li&gt;
&lt;li&gt;Does it distinguish between processes that aren&#x27;t running and processes that don&#x27;t exist?&lt;&#x2F;li&gt;
&lt;li&gt;What happens if you try to stop multiple processes and some of them don&#x27;t exist? Is that a warning, a failure, or success? Do you get individual warnings&#x2F;errors? Does it check the names beforehand? Does it succeed until it finds a name that doesn&#x27;t exist?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;restarting-processes&quot;&gt;Restarting processes&lt;a class=&quot;zola-anchor&quot; href=&quot;#restarting-processes&quot; aria-label=&quot;Anchor link for: restarting-processes&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Can you restart a single process?&lt;&#x2F;li&gt;
&lt;li&gt;What about dependent processes in the startup order? Shutdown order?&lt;&#x2F;li&gt;
&lt;li&gt;Can you restart all processes without naming them?&lt;&#x2F;li&gt;
&lt;li&gt;Can it block until processes have restarted?&lt;&#x2F;li&gt;
&lt;li&gt;What happens if you try to restart a process that&#x27;s isn&#x27;t running (warning? error? starts it?)&lt;&#x2F;li&gt;
&lt;li&gt;What happens if you try to restart multiple processes and some of them aren&#x27;t already running? Do you get individual warnings and succeed? Do you get an error?&lt;&#x2F;li&gt;
&lt;li&gt;What happens if you try to restart multiple processes and some of them don&#x27;t exist? Is that a warning, a failure, or success? Do you get individual warnings&#x2F;errors? Does it check the names beforehand? Does it succeed until it finds a name that doesn&#x27;t exist?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;backgrounding&quot;&gt;Backgrounding&lt;a class=&quot;zola-anchor&quot; href=&quot;#backgrounding&quot; aria-label=&quot;Anchor link for: backgrounding&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Does it run in the foreground or background by default?&lt;&#x2F;li&gt;
&lt;li&gt;If it runs in the foreground by default, does it have a way to background it, or do you have to do it manually?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;client-server-assumes-backgrounding&quot;&gt;Client&#x2F;server (assumes backgrounding)&lt;a class=&quot;zola-anchor&quot; href=&quot;#client-server-assumes-backgrounding&quot; aria-label=&quot;Anchor link for: client-server-assumes-backgrounding&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Does the server daemonize (re-parent) itself?&lt;&#x2F;li&gt;
&lt;li&gt;Does it use a Unix socket or TCP?&lt;&#x2F;li&gt;
&lt;li&gt;If you&#x27;ll have more than one running, how do you prevent conflicts (ports, socket location, etc).&lt;&#x2F;li&gt;
&lt;li&gt;If it uses a Unix socket, can you configure or predict its location?&lt;&#x2F;li&gt;
&lt;li&gt;If a dead socket file is found on startup, is that an error or does it clean it up and create a new one?&lt;&#x2F;li&gt;
&lt;li&gt;Can multiple clients connect to the same server at the same time? Does that affect data integrity i.e. does each client get a complete set of streaming logs?&lt;&#x2F;li&gt;
&lt;li&gt;If it shuts down does it wait until all outstanding responses are sent before terminating the server?&lt;&#x2F;li&gt;
&lt;li&gt;Can you tell whether the server is running without sending it a command?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;logs&quot;&gt;Logs&lt;a class=&quot;zola-anchor&quot; href=&quot;#logs&quot; aria-label=&quot;Anchor link for: logs&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Are the process manager logs separate from the process logs?&lt;&#x2F;li&gt;
&lt;li&gt;Are the process logs separate from each other, or in one log stream?&lt;&#x2F;li&gt;
&lt;li&gt;Can the log format be configured (e.g. human readable, json, etc)&lt;&#x2F;li&gt;
&lt;li&gt;Can the process manager logs be persisted or only printed to the terminal?&lt;&#x2F;li&gt;
&lt;li&gt;Can the process logs be persisted or only printed to the terminal?&lt;&#x2F;li&gt;
&lt;li&gt;Can you stream the logs? Can you stream all processes? Can you stream a single process? Can you stream some but not all processes?&lt;&#x2F;li&gt;
&lt;li&gt;Can you sample the last few log lines? For all processes? For one? For some but not all?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;updates&quot;&gt;Updates&lt;a class=&quot;zola-anchor&quot; href=&quot;#updates&quot; aria-label=&quot;Anchor link for: updates&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;Can you add or remove processes without restarting the process manager?&lt;&#x2F;li&gt;
&lt;li&gt;If there&#x27;s a startup order, does it restart any services when the startup graph changes?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;statuses&quot;&gt;Statuses&lt;a class=&quot;zola-anchor&quot; href=&quot;#statuses&quot; aria-label=&quot;Anchor link for: statuses&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;What information are you given about the processes? Can you see the runtime? PID? Number of restarts? Name?&lt;&#x2F;li&gt;
&lt;li&gt;Is the list of statuses granular enough? Too granular? Is it clear what the differences are between the statuses?&lt;&#x2F;li&gt;
&lt;li&gt;What is the status of a process that has never been started? That crashed? That completed? That was terminated via signal? Can you tell what signal? Can you see the exit code?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;At Flox we&#x27;re kind of shaking the Etch-A-Sketch on developer environments. Cross-platform, reproducible developer environments without containers so you get the best of both worlds: your tools and dependencies are the same from engineer to engineer, machine to machine, &lt;em&gt;and&lt;&#x2F;em&gt; you get to keep all the tools you love, configured the way you want. But, that&#x27;s not the point of this post.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</description>
      </item>
      <item>
          <title>April Cools 2024: Physics Edition</title>
          <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/april-cools-2024/</link>
          <guid>https://tinkering.xyz/april-cools-2024/</guid>
          <description xml:base="https://tinkering.xyz/april-cools-2024/">&lt;h1 id=&quot;ghost-triggers&quot;&gt;Ghost triggers&lt;a class=&quot;zola-anchor&quot; href=&quot;#ghost-triggers&quot; aria-label=&quot;Anchor link for: ghost-triggers&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;This particular experiment was driven by a laser that periodically spit out
pulses that were 5ns long.
A photodiode would pick up when a pulse was emitted,
and we&#x27;d use that as the trigger for the oscilloscope.
The oscilloscope would then record signals from our two other detectors.
One of these is called &quot;probe&quot; and the other is called &quot;reference&quot;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a block diagram of the system:
&lt;img src=&quot;&#x2F;images&#x2F;april-cools-2024&#x2F;ns-system.png&quot; alt=&quot;block diagram of the laser system&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Only the beam hitting the probe detector actually passes through the sample.
The beam hitting the reference detector does not pass through the sample,
so any variations in intensity must come from noise in the laser,
vibrations in the table,
etc.
All of these variations should be seen in both the probe and reference beams
since they were produced by splitting a &quot;parent&quot; beam.&lt;&#x2F;p&gt;
&lt;p&gt;We do this so that if you divide the probe signal by the reference signal you
cancel out any part of the signal that doesn&#x27;t come from the physics happening
inside the sample.
This isn&#x27;t perfect, but it works well enough.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine you need to run this experiment for about 8 hours in order to get
enough measurements.
Now imagine the oscilloscope is running Windows XP with the tiniest hard drive
known to man.
If you&#x27;re not a programmer and you don&#x27;t know that you can drive the experiment
from Python,
and don&#x27;t know that you can save every measurement individually,
it makes sense that you&#x27;d resort to averaging the data in place on the
oscilloscope.&lt;&#x2F;p&gt;
&lt;p&gt;Again, this isn&#x27;t perfect, but it works well enough.
That is, until one day when you start mysteriously averaging in a garbage
measurement once in a while,
destroying all the data you&#x27;ve just collected.
It looked as if the running average was trying to incorporate a measurement that
was either 0&#x2F;&lt;code&gt;&amp;lt;very small number&amp;gt;&lt;&#x2F;code&gt; or &lt;code&gt;&amp;lt;anything&amp;gt;&lt;&#x2F;code&gt;&#x2F;0.
This wasted hours of time when it happend, but at least the squiggly line on the
screen looked cool.&lt;&#x2F;p&gt;
&lt;p&gt;We try all the obvious things,
then we all give up and the new guys in the lab (me and someone else) decide to
just sit and watch the experiment run in hopes of witnessing the failure.
We wait, and we wait.
No failure.&lt;&#x2F;p&gt;
&lt;p&gt;Until someone unplugs their phone charger from the wall.
The fuck?
We plug the charger back in and unplug it,
just to make sure that the insane thing we&#x27;re seeing is reproducibly insane.
Yup, it&#x27;s reproducibly insane.&lt;&#x2F;p&gt;
&lt;p&gt;It turned out that a large amount of electrical interference was emitted every
time a phone charger was unplugged from the wall (although not from Apple iPhone
chargers, take from that what you will).
Electrical interference is always floating through the air,
like it or not,
but electrical engineers and physicists (mostly) know about this.
To protect our equipment from interference we &quot;shield&quot; it,
which really just means we wrap it in metal.&lt;&#x2F;p&gt;
&lt;p&gt;Guess what,
the photodiode we were using to pick up the laser pulse wasn&#x27;t shielded very
well.
One might even say that the shielding was absolute dogshit.
Couple that with a very old, very crappy cable connecting it to the oscillscope
and you have yourself what is basically an antenna.&lt;&#x2F;p&gt;
&lt;p&gt;Whenever this photodiode or cable would pick up interference,
it would like to the oscilloscope as if a laser pulse had just arrived.
It would then trigger a measurement,
even though there was no laser beam present.
This is where the 0&#x2F;&lt;code&gt;&amp;lt;very small number&amp;gt;&lt;&#x2F;code&gt; or &lt;code&gt;&amp;lt;anything&amp;gt;&lt;&#x2F;code&gt;&#x2F;0 came from.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ok-i-guess-i-have-to-worry-about-that-now&quot;&gt;Ok, I guess I have to worry about that now&lt;a class=&quot;zola-anchor&quot; href=&quot;#ok-i-guess-i-have-to-worry-about-that-now&quot; aria-label=&quot;Anchor link for: ok-i-guess-i-have-to-worry-about-that-now&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I was working on an experiment that used a never-before-seen measurement
technique.
The laser system itself was incredibly sensitive and used 20fs pulses
(a femtosecond is 10^-15 seconds).
I&#x27;m pretty sure it was the most sensitive device of its kind in the world by
1 or 2 orders of magnitude.
I was pretty proud of it.&lt;&#x2F;p&gt;
&lt;p&gt;However, when you have a device that&#x27;s incredibly sensitive,
you start to pick up effects that are well below the noise floor of other
measurement techniques.
This will become relevant.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a diagram of the system from my thesis:
&lt;img src=&quot;&#x2F;images&#x2F;april-cools-2024&#x2F;mhz_layout.png&quot; alt=&quot;diagram of the laser system&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A few things to point out here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Yes, I did make this diagram in LaTeX.&lt;&#x2F;li&gt;
&lt;li&gt;Yes, of course there are LaTeX packages for drawing optical layouts.&lt;&#x2F;li&gt;
&lt;li&gt;Yes, I am insane.&lt;&#x2F;li&gt;
&lt;li&gt;Yes, I&#x27;m one of the only people to ask about &lt;a href=&quot;https:&#x2F;&#x2F;tex.stackexchange.com&#x2F;questions&#x2F;204266&#x2F;drawing-an-off-axis-parabolic-mirror-in-pst-optexp-and-pst-optic&quot;&gt;how to draw an off-axis parabolic mirror&lt;&#x2F;a&gt; in LaTeX.&lt;&#x2F;li&gt;
&lt;li&gt;This diagram is meant for physicists, the only thing you need to see is that
there&#x27;s a 950kHz &quot;AOM&quot; and a 50kHZ &quot;PEM&quot;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The way this experiment works is that you have two laser beams that intersect
in the sample.
One of them is called the &quot;probe&quot;,
and one of them is called the &quot;pump&quot;.
In short, the pump excites the sample,
and the probe comes by some time later to see how things have evolved after some
period of time.&lt;&#x2F;p&gt;
&lt;p&gt;In this case we&#x27;re modulating each beam at some frequency,
50kHz for the probe (modulating the polarization),
950kHz for the pump (modulating the intensity).
Why?
Well, when these beams interact in the sample,
the physics we&#x27;re trying to observe happens at the sum of these two frequencies,
which in this case is 1MHz.&lt;&#x2F;p&gt;
&lt;p&gt;We use a special instrument called a &quot;lock-in amplifier&quot; to only detect a signal
at 1MHz,
which eleminates all the noise present at other frequencies.
It&#x27;s incredibly effective...when you don&#x27;t have other sources noise at 1MHz.&lt;&#x2F;p&gt;
&lt;p&gt;I had to put together a rats nest of electronics to make sure that my two signals,
50kHZ and 950kHz,
never got mixed together except for the exact place that I wanted them mixed.
You can see that box here:
&lt;img src=&quot;&#x2F;images&#x2F;april-cools-2024&#x2F;mhz-modulator.jpeg&quot; alt=&quot;a bunch of ugly electronics&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note the &quot;LOL&quot; spelled out in gaffer tape.
I put that there for whoever the next student was because I intended to never
open this box again,
and good luck to whoever had to open this box and play with it.
The joke was on me, clearly.&lt;&#x2F;p&gt;
&lt;p&gt;Again, this device is incredibly sensitive,
and one day I&#x27;m completely stuck trying to figure out where a source of 1MHz
noise was coming from.
My electronics are isolated extremely well.
My lasers are modulated extremely well.
There&#x27;s no 1MHz electrical interference in the lab.
What the hell is going on?&lt;&#x2F;p&gt;
&lt;p&gt;I mentioned above that we used two devices,
an &quot;AOM&quot; and a &quot;PEM&quot;,
to modulate each beam.
An &quot;AOM&quot; is an &quot;acousto-optic modulator&quot;,
and it modulates the intensity of a laser passing through it.
It takes an incoming electric signal (my 950kHz signal, in this case)
and uses it to essentially vibrate a piece of glass in a special way.
A &quot;PEM&quot; is a &quot;photo-elastic modulator&quot;,
and it modulates the polarizating of a laser passing through it.
It also takes an incoming electrical signal (my 50kHz signal, in this case)
and uses it to essentially vibrate a piece of glass in different but also
special way.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll notice that these devices both work by vibrating glass.
Long story short,
it turned out that ultrasonic vibrations from the PEM were floating through the
air in the system and vibrating the glass in the AOM.
The 50kHz ultrasonic vibrations picked up in the AOM were mixed together with
the 950kHz vibrations that the AOM was correctly producing,
producing a 1MHz signal.&lt;&#x2F;p&gt;
&lt;p&gt;I was absolutely floored.
Normally when you work with lasers you don&#x27;t have to worry about sound.
Like, ever.
Lasers are light, they don&#x27;t typically care about sound.
Everyone who has done a PhD has thing kind of moment where you think to yourself,
&quot;sure, I&#x27;ll just add this to the pile of bullshit that I didn&#x27;t know I needed to
worry about.&quot;&lt;&#x2F;p&gt;
&lt;p&gt;The solution was to simply put a glass plate on either side of the PEM in order
to contain the ultrasonic vibrations it was producing.
You can see that in this photo, also held together with gaffer tape:
&lt;img src=&quot;&#x2F;images&#x2F;april-cools-2024&#x2F;mhz-system.jpeg&quot; alt=&quot;arts and crafts with physics&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;my-shirt-is-the-bug&quot;&gt;My shirt is the bug&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-shirt-is-the-bug&quot; aria-label=&quot;Anchor link for: my-shirt-is-the-bug&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I was working on another experiment that used yet another very sensitive
measurement technique.
The photodiode I was using in this case was tuned to have very good time resolution
and frequency response under low-light conditions.
This photodiode and this measurement technique were both very sensitive to stray
light,
so we built a little box out of plexiglass and covered it in matte-black
aluminum foil (yes, that exists) to block out all of the stray light.&lt;&#x2F;p&gt;
&lt;p&gt;The back of the box wasn&#x27;t made out of plexiglass.
This was necessary for practical reasons, namely that I frequently needed to
get inside the box and tweak the optics around the photodiode.
To cover the back of the box during an experiment we simply draped a black
blanket over it.
This worked shockingly well.&lt;&#x2F;p&gt;
&lt;p&gt;At some point I&#x27;m debugging an issue with the system.
I notice that there&#x27;s a huge spike in the data right around when a laser
pulse arrives,
but this is a separate laser than what the photodiode is supposed to detect,
and it&#x27;s not pointed at the photodiode.
This tells me that somehow all the mechanisms I&#x27;m using to protect the
photodiode against stray light aren&#x27;t quite working.&lt;&#x2F;p&gt;
&lt;p&gt;I spend &lt;em&gt;a lot&lt;&#x2F;em&gt; of time working on this.
At one point I&#x27;m running the system in real time,
and I&#x27;m watching the signals on the oscilloscope so I can see how the system
responds when I block light in various places.
Then I notice that this &quot;bad&quot; signal changes depending on where I&#x27;m standing.&lt;&#x2F;p&gt;
&lt;p&gt;What. the. fuck.&lt;&#x2F;p&gt;
&lt;p&gt;I start to have PTSD flashbacks to the &quot;lasers vs. sound&quot; incident.
I question my life choices.
How can this be possible?
Is there some kind of radio frequency interference that&#x27;s blocked when I stand
next to the experiment?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s talk about where stray light comes from.
Well, one source is the overhead lights.
Another source is the air.
Yup.
The lasers we&#x27;re using in this experiment are very, very intense,
and as the light travels through the air some amount of it will literally
bounce off of the molecules that make up the air,
sending that light in a completely random direction.
That light continues to bounce off whatever else is in the room.&lt;&#x2F;p&gt;
&lt;p&gt;Like me.&lt;&#x2F;p&gt;
&lt;p&gt;It turned out that there was two issues.
I had already solved the real issue.
The other issue,
the one that seemed to depend on where I stood,
was only present when I was debugging the first issue.&lt;&#x2F;p&gt;
&lt;p&gt;It so happens that this blanket that was draped over the back of the box during
experiments was pulled up slightly while I was diagnosing the real issue.
And since it was pulled up,
stray light could get in the back of the box.
Stray light like the random photons bouncing off of molecules in the air,
which then bounce around like pinballs until they eventually bounce off my shirt
and into the back of the box,
even though this beam is originally pointed in the opposite direction.&lt;&#x2F;p&gt;
&lt;p&gt;Sigh.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>How I finally installed NixOS</title>
          <pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/installing-nixos/</link>
          <guid>https://tinkering.xyz/installing-nixos/</guid>
          <description xml:base="https://tinkering.xyz/installing-nixos/">&lt;p&gt;I&#x27;ve been in the &lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&quot;&gt;Nix&lt;&#x2F;a&gt; world for about a year now,
I work &lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&quot;&gt;at a company&lt;&#x2F;a&gt; that uses Nix daily,
and it was only last week that I finally installed NixOS on the PC that I&#x27;ve
been meaning to install it on for close to a year.
Why?
What kept me from installing it for so long?
What was the breakthrough?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-motivation&quot;&gt;The motivation&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-motivation&quot; aria-label=&quot;Anchor link for: the-motivation&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Every time I get a new machine there&#x27;s a feeling of dread that now I have to
(try) to set it up from scratch.
I have ADHD and this is the kind of tedious task that makes my brain melt.
The process typically goes like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;brew list&lt;&#x2F;code&gt; or something like that in order to get a list of packages I
have installed.&lt;&#x2F;li&gt;
&lt;li&gt;Prune that list to remove things that I installed because I needed them for
one time use and later forgot about.&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;brew install&lt;&#x2F;code&gt;, &lt;code&gt;apt install&lt;&#x2F;code&gt;, etc to install that list of packages.&lt;&#x2F;li&gt;
&lt;li&gt;Discover that package names are different across OS, distribution, etc.&lt;&#x2F;li&gt;
&lt;li&gt;Discover that some packages just don&#x27;t exist on the new OS, distribution, etc.&lt;&#x2F;li&gt;
&lt;li&gt;A month later, discover that some application I need wasn&#x27;t in that original
list because I installed it through some other mechanism.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Barf.&lt;&#x2F;p&gt;
&lt;p&gt;Fast forward and Nix pops up on my radar.
I can configure the entire operating system declaratively?
Yes please.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;requirements&quot;&gt;Requirements&lt;a class=&quot;zola-anchor&quot; href=&quot;#requirements&quot; aria-label=&quot;Anchor link for: requirements&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;My main machine is an M1 Macbook Pro,
and it&#x27;s a personal machine,
so I&#x27;ve installed all kinds of stuff on it.
I don&#x27;t see myself switching to Linux as my work machine any time soon,
though I&#x27;ve been a Linux user in one form or another for over a decade.&lt;&#x2F;p&gt;
&lt;p&gt;I have a desktop that&#x27;s a fire-breathing monster of a machine with 32GB of RAM,
a 16-core&#x2F;32-thread CPU,
an RTX 4090 GPU,
and a full custom water cooling loop.
It&#x27;s pretty nice.
Right now it&#x27;s just my gaming PC,
but there&#x27;s a second SSD in there that&#x27;s been empty since I built it because
I intended to put NixOS on it.&lt;&#x2F;p&gt;
&lt;p&gt;My one, major requirement was that I should be able to take my NixOS config
and run one or two commands to set up the entire machine.
I don&#x27;t want to be involved in the process, just do it automatically.&lt;&#x2F;p&gt;
&lt;p&gt;In the spirit of &quot;we can have nice things&quot;,
I also decided that I wanted this machine to use ZFS as the filesystem.
But again, I didn&#x27;t want to manually type out the partitioning commands.
This is NixOS, everything is supposed to be declarative, right?&lt;&#x2F;p&gt;
&lt;p&gt;I learned about a Nix project called
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-community&#x2F;disko&quot;&gt;disko&lt;&#x2F;a&gt;
that allows you to declaratively configure your filesystem.
The docs were terse and not terribly beginner-to-Nix friendly,
but there were example configurations that you could copy and modify,
including one for ZFS.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;attempt-1&quot;&gt;Attempt #1&lt;a class=&quot;zola-anchor&quot; href=&quot;#attempt-1&quot; aria-label=&quot;Anchor link for: attempt-1&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Ok, I lied a little bit,
I wasn&#x27;t set on ZFS from the outset,
so my first attempt was just running the &quot;minimal&quot; installer available from the
NixOS website.
I ran into a couple of problems.&lt;&#x2F;p&gt;
&lt;p&gt;First, the installer at the time didn&#x27;t include drivers for my WiFi chip.
I think those drivers have since been added to the Linux kernel,
so they don&#x27;t need to be added separately.&lt;&#x2F;p&gt;
&lt;p&gt;I followed the installation instructions meticulously because I already had the
Windows side of the machine set up and didn&#x27;t want to accidentally nuke it.
Fast forward, I&#x27;ve done the partitioning,
I&#x27;ve done some minimal configuration so I have a few familiar programs after
the install,
and it&#x27;s finally time to run &lt;code&gt;nixos-install&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The text scrolls by as the installer runs,
and...&quot;something something bad sector&quot;.
The fucking flash drive is corrupted.&lt;&#x2F;p&gt;
&lt;p&gt;I was a little burnt out at the time
(working on the Nix Docs Team, speaking at NixCon, speaking at RustConf),
so finding the time and summoning the energy to spend on this was hard enough.
This killed that energy, especially since I had a startup cost of running
an ethernet cable across my house to even attempt it again.&lt;&#x2F;p&gt;
&lt;p&gt;At that point I resolved to try things in a VM first.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;attempt-2&quot;&gt;Attempt #2&lt;a class=&quot;zola-anchor&quot; href=&quot;#attempt-2&quot; aria-label=&quot;Anchor link for: attempt-2&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;After talking with a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bryanhonof&quot;&gt;coworker&lt;&#x2F;a&gt;,
I learned that you can make yourself a custom installer that includes all the
software specified in your config.
If I can include the options for my WiFi chip,
I should be able to run the install without an ethernet cable.
I used the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-community&#x2F;nixos-generators&quot;&gt;nixos-generators&lt;&#x2F;a&gt;
tool to build an ISO image out of my config so that I could use that instead of
the official &quot;minimal&quot; installer.&lt;&#x2F;p&gt;
&lt;p&gt;Time found and energy summoned,
I took my ISO image and ran the installation in a VM.
I go to run the &lt;code&gt;disko&lt;&#x2F;code&gt; scripts to apply my filesystem config.
The scripts aren&#x27;t there.
wat?&lt;&#x2F;p&gt;
&lt;p&gt;Digging through the &lt;code&gt;disko&lt;&#x2F;code&gt; source was a little bit above my pay grade at that
point because I didn&#x27;t have any experience with the NixOS module system.
I ask another &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tomberek&quot;&gt;coworker&lt;&#x2F;a&gt;,
he makes some suggestions and points out a couple of bugs in my config.
Sure, I don&#x27;t know what I&#x27;m doing yet.&lt;&#x2F;p&gt;
&lt;p&gt;I go to run the install again and I&#x27;m still getting these errors.
At this point I give up on &lt;code&gt;disko&lt;&#x2F;code&gt; for the time being and just install NixOS
on ext4 using the manual installation instructions.
This reduces the surface area of what I possibly could have messed up.
I&#x27;d rather get the rest of the config in a known working state,
and then add on the &lt;code&gt;disko&lt;&#x2F;code&gt; stuff.&lt;&#x2F;p&gt;
&lt;p&gt;I played around with this VM and got a basic config working.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;attempt-3&quot;&gt;Attempt #3&lt;a class=&quot;zola-anchor&quot; href=&quot;#attempt-3&quot; aria-label=&quot;Anchor link for: attempt-3&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I had been wanting to get back into playing Elden Ring for a while,
but when I&#x27;m constantly getting my ass kicked I&#x27;d like to slouch a little bit.
This is my roundabout way of saying that I wanted to set up game streaming from
my desktop to a small machine in my living room.&lt;&#x2F;p&gt;
&lt;p&gt;I bought an Intel NUC and installed my NixOS config on it,
again using the manual partitioning instructions for ext4.
Life&#x27;s too short to let ZFS get in the way of Elden Ring.&lt;&#x2F;p&gt;
&lt;p&gt;This went off without a hitch,
so technically this is the first time I successfully install NixOS on hardware.
However, I&#x27;m still running partitioning commands manually and I&#x27;m still not
using ZFS.&lt;&#x2F;p&gt;
&lt;p&gt;I did buy a new flash drive just for this.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;scale-21x-and-nixcon-north-america-2024&quot;&gt;SCaLE 21x and NixCon North America 2024&lt;a class=&quot;zola-anchor&quot; href=&quot;#scale-21x-and-nixcon-north-america-2024&quot; aria-label=&quot;Anchor link for: scale-21x-and-nixcon-north-america-2024&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I was one of the organizers for
&lt;a href=&quot;https:&#x2F;&#x2F;2024-na.nixcon.org&#x2F;&quot;&gt;NixCon North America 2024&lt;&#x2F;a&gt;,
mainly in charge of creating the program.
One of my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;djacu&quot;&gt;co-organizers&lt;&#x2F;a&gt; submitted a workshop on
essentially exactly what I was trying to do: NixOS on ZFS using &lt;code&gt;disko&lt;&#x2F;code&gt; for the
filesystem config.
We decided it would be better for the wider audience if he did a workshop on the
NixOS module system instead.&lt;&#x2F;p&gt;
&lt;p&gt;Fast forward to NixCon NA and we get to talking about the holy grail again:
NixOS on ZFS without manual partitioning.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;attempt-4&quot;&gt;Attempt #4&lt;a class=&quot;zola-anchor&quot; href=&quot;#attempt-4&quot; aria-label=&quot;Anchor link for: attempt-4&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I took a couple of days off work after NixCon NA and SCaLE.
Motived by conversations at those conferences,
I start looking at the &lt;code&gt;disko&lt;&#x2F;code&gt; docs again and notice that there&#x27;s a new command:
&lt;code&gt;disko-install&lt;&#x2F;code&gt;.
This was &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nix-community&#x2F;disko&#x2F;pull&#x2F;548&quot;&gt;added on March 1st&lt;&#x2F;a&gt;,
and it claims to be a combination of &lt;code&gt;disko&lt;&#x2F;code&gt; and &lt;code&gt;nixos-install&lt;&#x2F;code&gt;.
Could it be?
The one that was promised?
The chosen one?&lt;&#x2F;p&gt;
&lt;p&gt;I ignore responsibilities to find some time, I dig deep to summon my courage,
I dash across the house with the ethernet cable,
and I fumble to get the flash drive plugged into my desktop.
I run &lt;code&gt;disko-install&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It works on the first try!
We did it!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;meet-chungus&quot;&gt;Meet &lt;code&gt;chungus&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#meet-chungus&quot; aria-label=&quot;Anchor link for: meet-chungus&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;My laptop is a 16&quot; Macbook Pro M1 Max.
It&#x27;s not a small laptop.
For this reason I named it &lt;code&gt;chonker&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;At &lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&quot;&gt;Flox&lt;&#x2F;a&gt; we do demo days on Thursday mornings.
This is a fun way to show your coworkers what you&#x27;ve completed in the last
sprint,
or simply show something you&#x27;ve been working on at work or otherwise.&lt;&#x2F;p&gt;
&lt;p&gt;My demos have become somewhat notorious for two reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Given a captive audience I will talk indefinitely.&lt;&#x2F;li&gt;
&lt;li&gt;Every demo starts with &lt;code&gt;chonker $&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We have an internal chat bot called Goldiflox that,
among other things,
keeps &quot;karma&quot; scores and &quot;facts&quot;.
&lt;code&gt;chonker&lt;&#x2F;code&gt; and my demos have left their mark even in the company chat bot.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;installing-nixos&#x2F;chonker-demo-order.png&quot; alt=&quot;Demo day order showing chonker instead of my name&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;installing-nixos&#x2F;chonker-karma.png&quot; alt=&quot;Slack chat showing someone increasing chonker&amp;#39;s karma, and the chat bot telling someone else that a &amp;quot;Zach demo&amp;quot; is 20 minutes long&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, when it came time to name my desktop,
I needed a name that evoked something even bigger than a chonk.&lt;&#x2F;p&gt;
&lt;p&gt;Meet &lt;code&gt;chungus&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;installing-nixos&#x2F;chungus-neofetch.png&quot; alt=&quot;neofetch run on chungus&quot; &#x2F;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;installing-nixos&#x2F;chungus.jpeg&quot; alt=&quot;A photo of chungus&amp;#39;s hardware&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-s-next&quot;&gt;What&#x27;s next?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-next&quot; aria-label=&quot;Anchor link for: what-s-next&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;You&#x27;ll notice I didn&#x27;t post any screenshots of &lt;code&gt;chungus&lt;&#x2F;code&gt;&#x27;s desktop.
That&#x27;s because I&#x27;ve decided I&#x27;m going to roll my own desktop environment using
Hyprland and a variety of other Wayland applications.
I did get a basic Gnome desktop set up just to make sure everything was working
properly,
but now that I have a NixOS machine I can tinker on,
I&#x27;m going to &lt;em&gt;tinker&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Today we launched Flox 1.0</title>
          <pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/releasing-flox/</link>
          <guid>https://tinkering.xyz/releasing-flox/</guid>
          <description xml:base="https://tinkering.xyz/releasing-flox/">&lt;h1 id=&quot;intro&quot;&gt;Intro&lt;a class=&quot;zola-anchor&quot; href=&quot;#intro&quot; aria-label=&quot;Anchor link for: intro&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;A little over a year ago I was working full time as a software engineer while finishing my PhD in physics (you&#x27;re probably already questioning my judgement, please keep reading).
After I defended my thesis I had some free time to be a real human being again and decided to pick up Nix.
I’ve always had a thing for documentation, and I noticed that the Nix documentation was notoriously hard to use.
I wrote a &lt;a href=&quot;&#x2F;nix-docs-unified-theory&quot;&gt;blog post&lt;&#x2F;a&gt; about what my ideal formulation of the Nix documentation would look like.
Ron Efroni, &lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&#x2F;&quot;&gt;Flox&lt;&#x2F;a&gt; CEO and NixOS Foundation Board member,
reached out to talk about the docs and eventually asked if I would be interested in working at Flox.
About a year later we&#x27;ve released our 1.0 and I&#x27;m excited to tell you about it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-flox&quot;&gt;What is Flox?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-flox&quot; aria-label=&quot;Anchor link for: what-is-flox&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&quot;&gt;Flox&lt;&#x2F;a&gt; is a virtual environment and package manager all in one.
What does that mean?&lt;&#x2F;p&gt;
&lt;p&gt;When you activate a Flox environment you&#x27;re put into a sub-shell
(though you can also &lt;code&gt;eval&lt;&#x2F;code&gt; and stay in the current shell).
Inside this shell you have access to whatever packages you&#x27;ve requested and any environment variables you&#x27;ve specified.
If the environment provides a package that you already have installed on your system,
the package from the Flox environment takes precedence while you&#x27;re in the environment (we modify &lt;code&gt;PATH&lt;&#x2F;code&gt;, etc).
In this way, Flox environments layer on top of your existing system.&lt;&#x2F;p&gt;
&lt;p&gt;You can also define shell scripts that run when you enter the shell to perform initialization,
provide instructions, etc.
Once you leave the shell you no longer have access to the software the environment provided, as if it never existed.
Even better, that software isn&#x27;t scattered across arbitrary locations on your system.
To top things off, you can push these environments to FloxHub and share them with others.&lt;&#x2F;p&gt;
&lt;p&gt;My favorite feature, however, is that you can activate more than one Flox environment at a time.
This lets you compose different sets of tools together in a way that you can&#x27;t with containers.
Working on the backend? Activate the backend environment.
Working on the frontend? Activate the frontend environment.
Working across the entire stack? Activate the frontend and backend environments.
Throw in a network tools environment to see how responses compare from the development server vs. the production server.
Wrap things up by activating a profiling environment to diagnose some pesky latency spikes.&lt;&#x2F;p&gt;
&lt;p&gt;And since all of this is built using Nix, these environments are bulletproof and portable across different operating systems and architectures.&lt;&#x2F;p&gt;
&lt;p&gt;Flox environments are declarative as well.
With VMs and containers you start with some base system (&lt;code&gt;FROM&lt;&#x2F;code&gt; or a fresh install of an OS) and then either run or specify a sequence of imperative commands that prepare the system in the desired state.
With Flox you have a single TOML file (&lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&#x2F;docs&#x2F;reference&#x2F;command-reference&#x2F;manifest.toml&#x2F;&quot;&gt;&lt;code&gt;manifest.toml&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;) that declares the software you want in your environment along with environment variables and activation scripts.&lt;&#x2F;p&gt;
&lt;p&gt;Flox environments are also composed at the package level,
meaning that when you add a new package to the environment you download it,
update some symlinks and some text files,
and then you&#x27;re done.
You don&#x27;t have to reinstall all the other packages in your monster &lt;code&gt;RUN&lt;&#x2F;code&gt; command or rebuild any layers that came after it.
Adding this package to another environment is even faster now that the package is cached locally.
All of this makes build times very attractive compared to containers.&lt;&#x2F;p&gt;
&lt;p&gt;Interested?&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s talk about why we built Flox.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;containers-are-fine-right&quot;&gt;Containers are fine, right?&lt;a class=&quot;zola-anchor&quot; href=&quot;#containers-are-fine-right&quot; aria-label=&quot;Anchor link for: containers-are-fine-right&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Containers are a great format for deployment and distribution,
but they leave something to be desired when it comes to development.
How much time have you spent setting up your machine to feel like &lt;code&gt;$HOME&lt;&#x2F;code&gt;?
How much time have you spent tweaking your artisanally handcrafted dotfiles,
or installing nifty little utilities?&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t actually think about that, it&#x27;s probably more than you want to admit.
But we all do it.
Why?
Easy, when you set up your system to work how you want it to work,
you&#x27;ll obviously feel more comfortable and be more productive.&lt;&#x2F;p&gt;
&lt;p&gt;When you enter a container it&#x27;s like someone walked in and cleared off your desk.
It&#x27;s isolated! Great! Isolated from all the stuff I set up for myself!
When you use a container for a development environment you also spend some time poking holes in it to share a directory with the host machine, connect it to other services, etc.&lt;&#x2F;p&gt;
&lt;p&gt;You do all of this because the promise of working cross-platform in a reproducible environment is seductive.
Unfortunately, there&#x27;s a big asterisk on that promise.
First, if you&#x27;re bundling up a snapshot of a Linux system (e.g. a container), are you really working cross-platform?&lt;&#x2F;p&gt;
&lt;p&gt;With containers your Dockerfile contains a &lt;code&gt;FROM&lt;&#x2F;code&gt; line that tells you the base system you’re building on top of.
Depending on how you write this line, you’ll get a different system each time.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ubuntu:latest&lt;&#x2F;code&gt; could give you two different releases of the OS.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ubuntu:23.10&lt;&#x2F;code&gt; could still give you two different systems as security patches are applied, packages are upgraded, etc.&lt;&#x2F;li&gt;
&lt;li&gt;Every time you build the image, two different calls to &lt;code&gt;apt update &amp;amp;&amp;amp; apt install foo&lt;&#x2F;code&gt; aren’t guaranteed to give you the same versions of the package.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, every time you enter a container with a given digest you&#x27;re getting the same system,
but every build isn&#x27;t guaranteed to give you the same container.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a better way.
We can have nice things.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-nix&quot;&gt;What is Nix?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-nix&quot; aria-label=&quot;Anchor link for: what-is-nix&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Flox uses Nix to achieve reproducibility and portability.
So, what is Nix?
At its core, Nix is a platform for building and configuring software.
That&#x27;s a vague answer, and there&#x27;s two reasons for that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I&#x27;m a former academic and it&#x27;s therefore physically impossible for me to give you a straight answer.&lt;&#x2F;li&gt;
&lt;li&gt;Nix can do a lot of things. You can use Nix to do everything from creating a text file to configuring an operating system.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s focus on the &quot;building software&quot; and &quot;setting up development environments&quot; parts of Nix.
I&#x27;m going to use a couple of Rust analogies because you can draw &lt;em&gt;some&lt;&#x2F;em&gt; parallels between them.&lt;&#x2F;p&gt;
&lt;p&gt;One of the reasons that people use Rust is that it enforces correctness and memory safety while &lt;em&gt;writing&lt;&#x2F;em&gt; software.
It does this via immutability, a strong type system, etc.
Nix enforces correctness while &lt;em&gt;building&lt;&#x2F;em&gt; software.
It tries really hard to make sure that you aren&#x27;t building your software by happy accident.
Nix also does this through immutability and some other mechanisms.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;details&gt;
    &lt;summary&gt;Nix vs. nixpkgs vs. NixOS?&lt;&#x2F;summary&gt;
    &lt;ul&gt;
&lt;li&gt;&quot;Nix&quot; is two things:
&lt;ul&gt;
&lt;li&gt;The name of the ecosystem.&lt;&#x2F;li&gt;
&lt;li&gt;The name of the programming language you use to build software and set up development environments.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&quot;nixpkgs&quot; is also two things:
&lt;ul&gt;
&lt;li&gt;A software repository containing recipes for building a staggering amount of software (something like 80,000 packages).&lt;&#x2F;li&gt;
&lt;li&gt;A standard library for building software using the Nix language.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&quot;NixOS&quot; is a Linux distribution built and configured using the Nix language.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;

&lt;&#x2F;details&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Here&#x27;s one example of something that Nix tries to prevent:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Say you install package &lt;code&gt;A&lt;&#x2F;code&gt; and it puts &lt;code&gt;libfoo&lt;&#x2F;code&gt; on your system.&lt;&#x2F;li&gt;
&lt;li&gt;Now you install package &lt;code&gt;B&lt;&#x2F;code&gt; and it also provides &lt;code&gt;libfoo&lt;&#x2F;code&gt;, but it’s slightly different in some way, and that overwrites the existing &lt;code&gt;libfoo&lt;&#x2F;code&gt; on your system
&lt;ul&gt;
&lt;li&gt;Say that maybe package &lt;code&gt;B&lt;&#x2F;code&gt;’s &lt;code&gt;libfoo&lt;&#x2F;code&gt; has a patch applied, or say that it’s the same exact semantic version but made from a different git revision.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;All the software that relied on &lt;code&gt;libfoo&lt;&#x2F;code&gt; is now different because &lt;code&gt;libfoo&lt;&#x2F;code&gt; is now different&lt;&#x2F;li&gt;
&lt;li&gt;You haven’t changed anything about your software, but now it’s operating slightly differently because the software it depends on is slightly different.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I mentioned mutability earlier.
Rust tries really hard to avoid shared, mutable state.
Your filesystem is a great example of a big ball of shared, mutable state.&lt;&#x2F;p&gt;
&lt;p&gt;Nix stores all of the software that it downloads, builds, installs, etc into one big immutable build cache, meaning that once something is in there, it doesn’t get modified.
The Nix store is just the directory &lt;code&gt;&#x2F;nix&#x2F;store&lt;&#x2F;code&gt;, nothing fancy.
Everything in the store has a hash in its filename, and that hash is computed from all the software that was used to build that particular artifact.
The software used to build an artifact also contain hashes in their filenames in the Nix store, and so on.
This means that the hash of your piece of software is essentially a hash computed from the entire dependency tree, all the way down to &lt;code&gt;libc&lt;&#x2F;code&gt;.
Since the path contains this hash, the path is essentially unique.
Since this path is unique, you can use the absolute path to it and you’ll never depend on the wrong piece of software.&lt;&#x2F;p&gt;
&lt;p&gt;When Nix builds software,
it hard-codes these absolute paths into the artifact so that it’s effectively impossible to link the wrong dynamic library,
depend on the wrong Python interpreter, etc.
This is what makes software built with Nix so bulletproof.
When you go to set up a development environment you get the same benefits.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-does-flox-add&quot;&gt;What does Flox add?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-does-flox-add&quot; aria-label=&quot;Anchor link for: what-does-flox-add&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Nix provides a lot of power and flexibility,
and it&#x27;s awesome seeing all the fun and interesting ways people solve problems with Nix.
That power and flexibility has a cost, however, and that cost is one of the steepest learning curves I&#x27;ve ever encountered.&lt;&#x2F;p&gt;
&lt;p&gt;If you’ve used one package manager, you’ve pretty much used them all.
You run &lt;code&gt;install&lt;&#x2F;code&gt;, &lt;code&gt;uninstall&lt;&#x2F;code&gt;, &lt;code&gt;search&lt;&#x2F;code&gt;, etc.
You likely know the build tools for your language of choice pretty well too.
With Nix none of those things are all that helpful.
With Nix you have to write a program in a lazily evaluated functional programming language that no one has ever heard of.
You also have to know the library of functions provided by nixpkgs, and even understanding their arguments can be difficult.
For example, what’s the difference between &lt;code&gt;buildInputs&lt;&#x2F;code&gt;, &lt;code&gt;nativeBuildInputs&lt;&#x2F;code&gt;, and &lt;code&gt;propagatedBuildInputs&lt;&#x2F;code&gt;?
It’s all very intimidating and confusing to new users since they can’t fall back on familiarity with other systems.&lt;&#x2F;p&gt;
&lt;p&gt;With Flox we&#x27;re providing a substantially better user experience.
We provide the suite of package manager functionality with &lt;code&gt;install&lt;&#x2F;code&gt;, &lt;code&gt;uninstall&lt;&#x2F;code&gt;, etc,
but we also provide an entire new suite of functionality with the ability to share environments via &lt;code&gt;flox push&lt;&#x2F;code&gt;, &lt;code&gt;flox pull&lt;&#x2F;code&gt;,
and &lt;code&gt;flox activate --remote&lt;&#x2F;code&gt;.
We still provide a declarative model for the environment that underpins all of this.
All of the imperative commands edit a TOML file (&lt;a href=&quot;https:&#x2F;&#x2F;flox.dev&#x2F;docs&#x2F;reference&#x2F;command-reference&#x2F;manifest.toml&#x2F;&quot;&gt;&lt;code&gt;manifest.toml&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;With Flox you can benefit from Nix without needing to &lt;em&gt;know&lt;&#x2F;em&gt; Nix.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m not going to talk much about our roadmap,
but it does include a suite of features for teams and organizations in the enterprise.
We&#x27;re open to feedback,
so if there&#x27;s something you&#x27;d like,
we&#x27;d be happy to hear about it.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;a class=&quot;zola-anchor&quot; href=&quot;#wrapping-up&quot; aria-label=&quot;Anchor link for: wrapping-up&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Building up to a release feels like racing towards a finish line,
but releasing a 1.0 is really more of a beginning.
I&#x27;m excited about what we&#x27;ve built so far,
but I&#x27;m even more excited about what we&#x27;re &lt;em&gt;going&lt;&#x2F;em&gt; to build.
If you have questions or feedback,
you can reach me directly or in one of our community spaces:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;discourse.flox.dev&quot;&gt;Flox Discourse&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;floxcommunitygroup.slack.com&quot;&gt;Flox Community Slack&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>Talks</title>
          <pubDate>Sun, 19 Nov 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/talks/</link>
          <guid>https://tinkering.xyz/talks/</guid>
          <description xml:base="https://tinkering.xyz/talks/">&lt;h2 id=&quot;rustconf-2023-async-building-blocks-a-streaming-data-drama-in-three-acts&quot;&gt;RustConf 2023 - Async Building Blocks: A Streaming Data Drama in Three Acts&lt;a class=&quot;zola-anchor&quot; href=&quot;#rustconf-2023-async-building-blocks-a-streaming-data-drama-in-three-acts&quot; aria-label=&quot;Anchor link for: rustconf-2023-async-building-blocks-a-streaming-data-drama-in-three-acts&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This talk is an intermediate level tour of some features of the async Rust ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;Abstract:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn how to put together a streaming data system from building blocks in Rust&#x27;s async ecosystem by following Mary Message on her daring journey to deliver her data. Along the way you&#x27;ll meet a cast of characters including Pablo PubSub and Beatrix Buffer as you learn about streams, tasks, synchronization, buffering, and the trade offs involved in each.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;talks&#x2F;tree&#x2F;master&#x2F;2023-09-14%20-%20rustconf&quot;&gt;Slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;youtube &quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;hU-lKbAdOUg&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;nixcon-2023-rust-nix-more-than-the-sum-of-their-parts&quot;&gt;NixCon 2023 - Rust + Nix: More than the sum of their parts?&lt;a class=&quot;zola-anchor&quot; href=&quot;#nixcon-2023-rust-nix-more-than-the-sum-of-their-parts&quot; aria-label=&quot;Anchor link for: nixcon-2023-rust-nix-more-than-the-sum-of-their-parts&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Abstract:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rust is a programming language with a knack for ergonomics in a space where robustness, correctness, and speed often come at the cost of many papercuts. Nix is a project focused on building software in a robust, correct, and deterministic way. These two projects should be best friends, right? In this talk Zach Mitchell from flox and the Documentation Team will give an experience report writing Rust bindings for Nix. What makes bindings difficult? Which bindings can be autogenerated? Which can (or should) be written by hand? Tune in to find out what went well, what was painful, and what didn&#x27;t work at all.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;talks&#x2F;tree&#x2F;master&#x2F;2023-09-09%20-%20nixcon&quot;&gt;Slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;youtube &quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;C5H9wfl6VT0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;indy-rs-2022-03-02-an-optimization-story&quot;&gt;Indy.rs 2022-03-02 - An optimization story&lt;a class=&quot;zola-anchor&quot; href=&quot;#indy-rs-2022-03-02-an-optimization-story&quot; aria-label=&quot;Anchor link for: indy-rs-2022-03-02-an-optimization-story&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This was a presentation based on the &lt;a href=&quot;https:&#x2F;&#x2F;tinkering.xyz&#x2F;fmo-optimization-story&#x2F;&quot;&gt;blog post with the same name&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;talks&#x2F;tree&#x2F;master&#x2F;2022-03-02%20-%20indyrs%20-%20optimization%20story&quot;&gt;Slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-belt-rust-2019-monarch-lightning-talk&quot;&gt;Rust Belt Rust 2019 - monarch (lightning talk)&lt;a class=&quot;zola-anchor&quot; href=&quot;#rust-belt-rust-2019-monarch-lightning-talk&quot; aria-label=&quot;Anchor link for: rust-belt-rust-2019-monarch-lightning-talk&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This talk was about a testing technique called &quot;metamorphic testing&quot; (note: not the same thing as &lt;em&gt;mutation&lt;&#x2F;em&gt; testing). I wrote a proof of concept testing library called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;monarch&quot;&gt;monarch&lt;&#x2F;a&gt; (metamorphic testing -&amp;gt; metamorphosis -&amp;gt; butterflies -&amp;gt; Monarch) based around this technique.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;talks&#x2F;tree&#x2F;master&#x2F;2019-10-18%20-%20rust%20belt%20rust%20-%20monarch&quot;&gt;Slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;youtube &quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;RdpHONoFsSs&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;indy-rs-2019-06-05-polsim&quot;&gt;Indy.rs 2019-06-05 - polsim&lt;a class=&quot;zola-anchor&quot; href=&quot;#indy-rs-2019-06-05-polsim&quot; aria-label=&quot;Anchor link for: indy-rs-2019-06-05-polsim&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This talk was a presentation based on the &lt;a href=&quot;https:&#x2F;&#x2F;tinkering.xyz&#x2F;polsim&#x2F;&quot;&gt;Polsim - a case study for small-scale scientific computing in Rust&lt;&#x2F;a&gt; post.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;talks&#x2F;tree&#x2F;master&#x2F;2019-06-05%20-%20indyrs%20-%20polsim&quot;&gt;Slides&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pyohio-2018-abusing-type-annotations-lightning-talk&quot;&gt;PyOhio 2018 - Abusing type annotations (lightning talk)&lt;a class=&quot;zola-anchor&quot; href=&quot;#pyohio-2018-abusing-type-annotations-lightning-talk&quot; aria-label=&quot;Anchor link for: pyohio-2018-abusing-type-annotations-lightning-talk&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This talk was a demonstration of how you could do something like Rust&#x27;s procedural macros in Python using decorators to play around with the AST and do code generation. There&#x27;s even an ASCII-art Clippy! After the talk I wrote a &lt;a href=&quot;https:&#x2F;&#x2F;tinkering.xyz&#x2F;abusing-type-annotations&#x2F;&quot;&gt;blog post on the topic&lt;&#x2F;a&gt;. This is only the second software talk I&#x27;d ever given, so that presentation isn&#x27;t my best work, but it was a fun topic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;talks&#x2F;tree&#x2F;master&#x2F;2018-07-28%20-%20pyohio%20-%20annotation%20abuse&quot;&gt;Slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;youtube &quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;sCChedxFCuo?start=142&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;indy-rs-2018-04-04-cache-friendly-rust&quot;&gt;Indy.rs 2018-04-04 - Cache-friendly Rust&lt;a class=&quot;zola-anchor&quot; href=&quot;#indy-rs-2018-04-04-cache-friendly-rust&quot; aria-label=&quot;Anchor link for: indy-rs-2018-04-04-cache-friendly-rust&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This was my first ever software talk, and probably only my seond time attending Indy.rs. Needless to say I was nervous.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;talks&#x2F;tree&#x2F;master&#x2F;2018-04-04%20-%20indyrs%20-%20cache%20friendly%20rust&quot;&gt;Slides&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Nix journey part 1: My grand unified theory of Nix documentation</title>
          <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/nix-docs-unified-theory/</link>
          <guid>https://tinkering.xyz/nix-docs-unified-theory/</guid>
          <description xml:base="https://tinkering.xyz/nix-docs-unified-theory/">&lt;p&gt;&lt;strong&gt;Update 2023-11-19:&lt;&#x2F;strong&gt; This series is effectively dead. Since publishing this post I&#x27;ve joined the Nix Documentation Team, started, lead, and left a working group (which is now dissolved) based on teaching Nix to new users, and joined a company making a product that uses Nix as an implementation detail, and &lt;a href=&quot;https:&#x2F;&#x2F;tinkering.xyz&#x2F;talks&#x2F;#nixcon-2023-rust-nix-more-than-the-sum-of-their-parts&quot;&gt;spoken at NixCon 2023&lt;&#x2F;a&gt;. That&#x27;s left me pretty busy! Needless to say, with this much Nix involvement in my day job, there will be more Nix content to come on my site.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Since the last post I&#x27;ve been in contact with some members of the Nix community with regards to joining the documentation team. From that discussion and my experience with other ecosystems I&#x27;ve had some ideas rolling around about what the ideal Nix documentation strategy&#x2F;ecosystem would look like to me, so I&#x27;m putting those ideas in writing to start a discussion and generate ideas. These ideas aren&#x27;t super concrete and I don&#x27;t speak for anyone else, but they&#x27;re my vision for how Nix documentation could better serve experienced users and onboard new ones.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;planning-the-work&quot;&gt;Planning the work&lt;a class=&quot;zola-anchor&quot; href=&quot;#planning-the-work&quot; aria-label=&quot;Anchor link for: planning-the-work&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I see this being a multi-stage process:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Take stock of the existing documentation&lt;&#x2F;li&gt;
&lt;li&gt;Decide on the new structure&lt;&#x2F;li&gt;
&lt;li&gt;Migrate existing documentation&lt;&#x2F;li&gt;
&lt;li&gt;Edit and improve&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I think if you can plan the work and break it into manageable chunks you make it more likely that the community can pitch in with small, low-effort contributions. The heavy lifting is taking stock of the existing documentation to determine the closure of ideas that it covers. Once you know &lt;em&gt;what&lt;&#x2F;em&gt; needs to be migrated, deciding &lt;em&gt;where&lt;&#x2F;em&gt; to migrate it will still require effort, but it can require less effort and doesn&#x27;t require as much expertise.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a large body of existing documentation that is underutilized because (1) people don&#x27;t know that it exists and (2) some of it is impenetrable to someone who doesn&#x27;t already know what it means. For that reason I believe the first priority should be reorganzing the existing documentation in a cohesive, discoverable way rather than generating new content (though there is a place for new content that I&#x27;ll touch on later). During the migration each chunk of documentation can be evaluated in the context of improving the onboarding experience.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;information-architecture&quot;&gt;Information architecture&lt;a class=&quot;zola-anchor&quot; href=&quot;#information-architecture&quot; aria-label=&quot;Anchor link for: information-architecture&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;d like to see the new documentation follow the &lt;a href=&quot;https:&#x2F;&#x2F;diataxis.fr&quot;&gt;Diataxis&lt;&#x2F;a&gt; documentation framework. This framework breaks down documentation into four categories that serve different purposes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tutorials
&lt;ul&gt;
&lt;li&gt;Learning oriented, takes the user by the hand&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;How-to guides
&lt;ul&gt;
&lt;li&gt;Task oriented, &quot;follow these steps to achieve XYZ&quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Explanation
&lt;ul&gt;
&lt;li&gt;Understanding oriented, explain how things work and why they were designed a particular way&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Reference
&lt;ul&gt;
&lt;li&gt;Information oriented, factual information, specifications, CLI usage, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m not the one who came up with this idea, it&#x27;s mentioned on the Documentation Team&#x27;s site as well. I&#x27;m simply adding my support for moving in this direction.&lt;&#x2F;p&gt;
&lt;p&gt;In my ideal documentation world each of these sections would link to each other i.e. pages would cite their sources. Maybe this is the former academic in me, but I think it&#x27;s a good thing if a tutorial mentioning a particular topic can say &quot;learn more about how this works at this other page&quot; or when it asks a reader to run a particular command it then says &quot;you can see all of the command line options for this tool at this other page.&quot; I think this serves a few purposes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It deduplicates knowledge across the documentation, no need to repeat yourself when you can link to an explanation or reference page&lt;&#x2F;li&gt;
&lt;li&gt;It provides a more cohesive learning experience i.e. &quot;you don&#x27;t need to visit another site to learn about XYZ, we&#x27;ve got a page on that over here&quot;&lt;&#x2F;li&gt;
&lt;li&gt;It backs up claims made in the documentation so there&#x27;s less dogma and folk knowledge (e.g. &quot;do XYZ because this reference pages states that it&#x27;s required in ABC context&quot; rather than &quot;do this because more experienced people in the community say this is how you should do it&quot;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;site-structure&quot;&gt;Site structure&lt;a class=&quot;zola-anchor&quot; href=&quot;#site-structure&quot; aria-label=&quot;Anchor link for: site-structure&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I think all of the documentation should be under one site. This deduplicates the work to make site-wide changes to page templates, styles, names, etc. I think a single static-site generator can meet the needs of the entire documentation site with maybe one exception which I&#x27;ll mention later. Another benefit of having all of the documentation under a single site is that you can give the reader a visual indicator of which section they&#x27;re in, providing context to what they&#x27;re reading and where they are in the Nix documentation landscape. I&#x27;m imagining a sidebar with accordians&#x2F;expandable links for the different major sections (tutorials, how-to guides, explanation, and reference) with the current section being expanded.&lt;&#x2F;p&gt;
&lt;p&gt;Some of the documentation is built with &lt;code&gt;mdBook&lt;&#x2F;code&gt;, which is generally a good fit for reference materials (like the Nix Reference Manual), but I think it&#x27;s less of a good fit when trying to integrate it into a larger site. The main benefit of &lt;code&gt;mdBook&lt;&#x2F;code&gt; is that it&#x27;s very little effort to go from a directory of markdown files to some HTML with a navigable sidebar and everything. If you&#x27;re already using a static-site generator for other things, you already have that ability.&lt;&#x2F;p&gt;
&lt;p&gt;There are other practicalities that certain static-site generators provide. I use Zola and it&#x27;s super fast and has a built-in link checker that checks both internal and external links (&lt;code&gt;zola check&lt;&#x2F;code&gt;). I just ran the link checker for the first time and (1) holy shit I have 108 external links and (2) 4 of them are broken so I guess I have homework. With something like &lt;code&gt;zola check&lt;&#x2F;code&gt; congrats you now have tests for your website.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;seo-and-analytics&quot;&gt;SEO and analytics&lt;a class=&quot;zola-anchor&quot; href=&quot;#seo-and-analytics&quot; aria-label=&quot;Anchor link for: seo-and-analytics&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I know someone is already shitting their pants in anger at the word &quot;analytics&quot;, but I really, truly just want some data on which pages people find useful and which pages need work. People working on the documentation need to know where to focus their very limited (and mostly volunteered) time and effort. There are privacy-preserving options out there that collect so little information they don&#x27;t even need a GDPR or cookie banner. We can have nice things, nuance being one of them.&lt;&#x2F;p&gt;
&lt;p&gt;One of the problems I see with the current documentation is SEO. Information that people can&#x27;t find might as well not exist. For example, let&#x27;s say I vaguely remember that the documentation for &lt;code&gt;mkShell&lt;&#x2F;code&gt; was in a section about &quot;builders&quot; (&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixpkgs&#x2F;stable&#x2F;#chap-special&quot;&gt;Special Builders&lt;&#x2F;a&gt;) and I do a search for &quot;nix builders&quot;. My default search engine is DuckDuckGo, and the first page of search results (in order) are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A construction company&lt;&#x2F;li&gt;
&lt;li&gt;A different construction company&lt;&#x2F;li&gt;
&lt;li&gt;Nix builds as a service&lt;&#x2F;li&gt;
&lt;li&gt;A rehosted version of a related page (&lt;a href=&quot;https:&#x2F;&#x2F;ryantm.github.io&#x2F;nixpkgs&#x2F;builders&#x2F;trivial-builders&#x2F;&quot;&gt;Trivial Builders&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;The Facebook page of one of the above construction companies&lt;&#x2F;li&gt;
&lt;li&gt;A custom home builder&lt;&#x2F;li&gt;
&lt;li&gt;A different page from the site of one of the above construction companies&lt;&#x2F;li&gt;
&lt;li&gt;Generic Builders - Nix Pills&lt;&#x2F;li&gt;
&lt;li&gt;Distributed Builds - NixOS Wiki&lt;&#x2F;li&gt;
&lt;li&gt;A review of one of the above construction companies&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If I do the same search on Google the results are better, but still not good:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A construction company&lt;&#x2F;li&gt;
&lt;li&gt;Remote Builds - Nix Reference Manual&lt;&#x2F;li&gt;
&lt;li&gt;Nix builds as a service&lt;&#x2F;li&gt;
&lt;li&gt;Construction company&lt;&#x2F;li&gt;
&lt;li&gt;Distributed Builds - NixOS Wiki&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nixpkgs&#x2F;trivial-builders.nix&lt;&#x2F;code&gt; on GitHub (so close Google, so close!)&lt;&#x2F;li&gt;
&lt;li&gt;Review of a construction company&lt;&#x2F;li&gt;
&lt;li&gt;How to Learn Nix, Part 32: Builders - Ian Henry&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The page I&#x27;m looking for is not in the first page of results on either search engine. Ok, maybe my search was too obscure, but I don&#x27;t think I&#x27;m being unreasonable here. Even with more precise search terms it&#x27;s very common for other resources to come up before the official Nix pages. I&#x27;ve mentioned page templates a few times now, and I want to emphasize here that I don&#x27;t mean just the appearance of the pages, but also information in &lt;code&gt;&amp;lt;head&amp;gt;&lt;&#x2F;code&gt; that can be used for SEO. Another benefit of all the documentation being under one site is that there&#x27;s only one site to monitor for SEO.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;open-progress&quot;&gt;Open progress&lt;a class=&quot;zola-anchor&quot; href=&quot;#open-progress&quot; aria-label=&quot;Anchor link for: open-progress&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I think another important aspect is to make progress visible, so the unified documentation site would start out with sections full of &lt;code&gt;WIP&lt;&#x2F;code&gt; pages. This serves a few purposes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The community can follow the progress&lt;&#x2F;li&gt;
&lt;li&gt;The community can see that documentation is being actively worked on&lt;&#x2F;li&gt;
&lt;li&gt;The community can see what the vision is for the structure of the documentation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If someone sees a page with a &lt;code&gt;WIP&lt;&#x2F;code&gt; section and they happen to know something about it, they can decide to chip in and fill in some of the details.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;section-breakdowns&quot;&gt;Section breakdowns&lt;a class=&quot;zola-anchor&quot; href=&quot;#section-breakdowns&quot; aria-label=&quot;Anchor link for: section-breakdowns&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This is a rough outline of some of the content that I think should belong in each section. You&#x27;ll notice that I&#x27;ve left out two things: NixOS and flakes. I&#x27;ve left out NixOS because I know even less about NixOS than I do about using Nix in general. I&#x27;ve left out flakes because I think the structure of the documentation is orthogonal to whether flakes are experimental or here to stay. For those of you like me who are new to the Nix community, apparently there&#x27;s disagreement about whether flakes are good. They seem fine to me but I don&#x27;t know much about the tradeoffs.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tutorials&quot;&gt;Tutorials&lt;a class=&quot;zola-anchor&quot; href=&quot;#tutorials&quot; aria-label=&quot;Anchor link for: tutorials&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned above, this section is meant to take a reader by the hand and lead them through a learning experience. I also mentioned above that there&#x27;s a certain place for new content. I think this is the place. Some of the material I think belongs here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Installation&lt;&#x2F;li&gt;
&lt;li&gt;Walking a reader through their first build&lt;&#x2F;li&gt;
&lt;li&gt;Taking a project that isn&#x27;t packaged for Nix and walking through exactly how to package it&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;how-to&quot;&gt;How-to&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-to&quot; aria-label=&quot;Anchor link for: how-to&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This section is supposed to be a pragmatic, step-by-step resource for accomplishing specific tasks in practice. I think this section can draw inspiration from the NixOS Wiki. Some of the material I think belongs here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How to package for Nix
&lt;ul&gt;
&lt;li&gt;Guides for specific languages
&lt;ul&gt;
&lt;li&gt;Languages that have their own build systems
&lt;ul&gt;
&lt;li&gt;Those that generate lock files and how to leverage them&lt;&#x2F;li&gt;
&lt;li&gt;Those that don&#x27;t generate lock files&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Languages without a build system (C&#x2F;C++)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Guides for integrating with language-agnostic build systems
&lt;ul&gt;
&lt;li&gt;Meson, Bazel, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Packaging idioms
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;callPackage&lt;&#x2F;code&gt; vs alternatives&lt;&#x2F;li&gt;
&lt;li&gt;&quot;import from derivation&quot;, &quot;fixed output derivation&quot;, and other terms I don&#x27;t understand&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Day-to-day development and workflows using Nix
&lt;ul&gt;
&lt;li&gt;Setting up a development shell&lt;&#x2F;li&gt;
&lt;li&gt;Hooking up an editor&#x2F;IDE to a Nix environment&lt;&#x2F;li&gt;
&lt;li&gt;Using Nix in CI&lt;&#x2F;li&gt;
&lt;li&gt;Deployments using Nix&lt;&#x2F;li&gt;
&lt;li&gt;Building containers with Nix&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Contributing
&lt;ul&gt;
&lt;li&gt;Docs, Nixpkgs, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;reference&quot;&gt;Reference&lt;a class=&quot;zola-anchor&quot; href=&quot;#reference&quot; aria-label=&quot;Anchor link for: reference&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This section is supposed to be very light on prose and heavy on detailed description of rules, specifications, requirements, and options. Basically this section is filled with facts that can be backed up by pointing at the implementation e.g. &quot;this command has these options&quot;. I think much of what&#x27;s in the Nix Reference Manual should go here. Some of the materials I think should go here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Nix language reference&lt;&#x2F;li&gt;
&lt;li&gt;How derivations work
&lt;ul&gt;
&lt;li&gt;Required inputs&lt;&#x2F;li&gt;
&lt;li&gt;Build phases&lt;&#x2F;li&gt;
&lt;li&gt;How attributes are turned into environment variables and paths in the store&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Common modifications made to ensure purity
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$PATH&lt;&#x2F;code&gt;, etc&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Environment variables set in development shells&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I think this section would also contain browsable, searchable API docs. A few readers of my previous post pointed out that &lt;a href=&quot;https:&#x2F;&#x2F;noogle.dev&quot;&gt;noogle.dev&lt;&#x2F;a&gt; exists, which is a site where you can &lt;em&gt;search&lt;&#x2F;em&gt; the functions that are in &lt;code&gt;builtins&lt;&#x2F;code&gt;, &lt;code&gt;lib&lt;&#x2F;code&gt;, and &lt;code&gt;stdenv&lt;&#x2F;code&gt;. I think that&#x27;s a step in the right direction, but the ability to browse is &lt;em&gt;crucial&lt;&#x2F;em&gt;. I&#x27;ll often be looking up a particular method on Rust&#x27;s &lt;code&gt;Iterator&lt;&#x2F;code&gt; trait only to find a new method I&#x27;ve never seen before. Discoverability is very, very valuable for the onboarding experience. I also think it&#x27;s important for these docs to be generated from comments that live alongside the code so that they don&#x27;t go stale. Some of the material I&#x27;d like to be browsable and searchable:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;API docs
&lt;ul&gt;
&lt;li&gt;Builtins&lt;&#x2F;li&gt;
&lt;li&gt;Builders&lt;&#x2F;li&gt;
&lt;li&gt;Fetchers&lt;&#x2F;li&gt;
&lt;li&gt;Stdenv&lt;&#x2F;li&gt;
&lt;li&gt;lib&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Nixpkgs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You might be saying &quot;you can already search Nixpkgs&quot;. Yes, you can, but I think we can take this further in how we present the results. When search results are presented to you there can be a short description and some metadata, but I think each result should get its own page. Right now you can&#x27;t link to a particular package. The dedicates package page could show more detailed information like the history of changes to this particular package. It should be quick and easy to determine which Nixpkgs revision I want to get a particular version e.g. the current version of package X is v1.5, what is the latest Nixpkgs that has v1.2.3. Maybe this is a weird way to go about this or it&#x27;s showing my lack of Nix knowledge since I&#x27;m still pretty new, but this is just one example of the kind of information we could surface in individual package pages. This is also the one area where I think server-side computation would need to happen.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;explanation&quot;&gt;Explanation&lt;a class=&quot;zola-anchor&quot; href=&quot;#explanation&quot; aria-label=&quot;Anchor link for: explanation&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This section explains the how and why of Nix. Since this is most likely to be low-level details of how Nix works I envison calling this section &quot;Nitty Gritty Nix&quot;. I think much of what&#x27;s in Nix Pills would go here. I have less of an idea what should go here simply because I don&#x27;t know many of the details of how Nix works, but here are some of the materials I think should go here:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When and how are things added to the Nix store?&lt;&#x2F;li&gt;
&lt;li&gt;We know everything is based on hashes, but how are the hashes computed? What are the inputs?&lt;&#x2F;li&gt;
&lt;li&gt;Cross-compilation as a first class citizen and its impact on the language&#x2F;ecosystem
&lt;ul&gt;
&lt;li&gt;buildInputs vs. nativeBuildInputs and propagation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;So, obviously this looks very different from today&#x27;s Nix documentation and it would require an enormous amount of work. However, I think having a vision for how things &lt;em&gt;should&lt;&#x2F;em&gt; look is important before starting any major endeavors. Do you agree with this vision? Do you think things should look wildly different? I&#x27;d love to hear your thoughts.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Nix journey part 0: Learning and reference materials</title>
          <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/nix-docs/</link>
          <guid>https://tinkering.xyz/nix-docs/</guid>
          <description xml:base="https://tinkering.xyz/nix-docs/">&lt;h2 id=&quot;the-story-before-the-recipe&quot;&gt;The story before the recipe&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-story-before-the-recipe&quot; aria-label=&quot;Anchor link for: the-story-before-the-recipe&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve been following the Nix project for a while but now that I&#x27;m done with my PhD I finally have some free time and energy to try using it in earnest. This series is going to be me learning Nix by showing you how things work and how to put the pieces together.&lt;&#x2F;p&gt;
&lt;p&gt;For those of you unaware, Nix takes reproducible builds to their logical conclusion by making package builds (mostly) pure functions of their dependencies. The binary artifacts of builds are stored in a content-addressed store (the Nix store) so you can be sure that you&#x27;re always getting the same package if you have its name and hash. Not only can you build programs this way, but you can also build development environments (&quot;I want these libraries available in my build environment and nothing else&quot;, for example), run commands in throw-away environments with specific packages installed without polluting your global environment. There&#x27;s even an operating system, NixOS, based on this packaging system that allows you to configure your whole system (installed packages, system settings, etc) from a single file.&lt;&#x2F;p&gt;
&lt;p&gt;Now, with all of that said, Nix can be intimidating simply because it&#x27;s so different from other packaging systems. First off Nix packages are written in a purely functional language also called Nix. The terminology used in the Nix ecosystem is also pretty unique, so reading about Nix can often feel like this classic:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.kym-cdn.com&#x2F;photos&#x2F;images&#x2F;newsfeed&#x2F;000&#x2F;572&#x2F;078&#x2F;d6d.jpg&quot; alt=&quot;How to draw an owl meme&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;At the end of each post there will be a &quot;questions for the audience&quot; section. I&#x27;ll put questions there when I&#x27;m unable to find satisfactory answers on my own with the hope that readers familiar with Nix can provide answers that I can then include both for my benefit and the benefit of anyone reading these posts at a later date. There will also be a &quot;Resources&quot; section at the end where I&#x27;ll link the posts and documentation that I used to answer my own questions.&lt;&#x2F;p&gt;
&lt;p&gt;My focus in this series will be on using flakes to the largest extent possible, but from the reading I&#x27;ve already done it seems like you still need to know how pre-flake derivations work in order to get the most value out of Nix.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;today-s-goal-gathering-the-resources&quot;&gt;Today&#x27;s goal: gathering the resources&lt;a class=&quot;zola-anchor&quot; href=&quot;#today-s-goal-gathering-the-resources&quot; aria-label=&quot;Anchor link for: today-s-goal-gathering-the-resources&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;This post will be a collection of Nix documentation, both official and unofficial. This deserves its own post simply because I&#x27;ve found that the official Nix documentation is scattered across multiple sources. I am not the first person to point this out, but (1) I am an obsessive note taker and already had all these links, and (2) I would like to have everything all in one place for anyone reading this series.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;official&quot;&gt;Official&lt;a class=&quot;zola-anchor&quot; href=&quot;#official&quot; aria-label=&quot;Anchor link for: official&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;These are the resources maintained by the Nix project itself. You should consider these the source of truth, but you should also be realistic about open source documentation and realize that it could be out of date. In my experience some of these resources are hard to understand unless you already know what they&#x27;re saying. I would mostly use these as reference materials and would recommend against trying to read them cover to cover unless you really have nothing better to do.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nix-reference-manual&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;&quot;&gt;Nix Reference Manual&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nix-reference-manual&quot; aria-label=&quot;Anchor link for: nix-reference-manual&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The Nix Reference Manual covers a lot of ground ranging from installing Nix to man-pages for &lt;code&gt;nix&lt;&#x2F;code&gt; commands. I would say that the most useful pieces here are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;installation&#x2F;&quot;&gt;Installation instructions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;language&#x2F;index.html&quot;&gt;Nix language reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nix&#x2F;stable&#x2F;command-ref&#x2F;&quot;&gt;Command reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Oddly enough, in the reference for the &lt;code&gt;nix flake&lt;&#x2F;code&gt; command you&#x27;ll find a very thorough description of the schema for a Nix flake including which attributes are required, how to refer to other flakes, etc. In my mind this should live somewhere else, but I&#x27;m glad it exists somewhere.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nixpkgs-manual&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixpkgs&#x2F;stable&#x2F;&quot;&gt;Nixpkgs Manual&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nixpkgs-manual&quot; aria-label=&quot;Anchor link for: nixpkgs-manual&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The Nixpkgs manual is an in-depth guide to using Nix to build packages and the foundational tooling Nix provides. Since flakes are still considered experimental this mostly covers how to make derivations &quot;the old way.&quot; In my brief time learning Nix I&#x27;ve found that you have to understand how the pre-flakes ecosystem works in order to get the most value out of Nix. The parts I&#x27;ve found most helpful are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixpkgs&#x2F;stable&#x2F;#chap-stdenv&quot;&gt;Chapter 6: The Standard Environment&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;manual&#x2F;nixpkgs&#x2F;stable&#x2F;#chap-language-support&quot;&gt;Chapter 17: Languages and Frameworks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The standard environment (&lt;code&gt;stdenv&lt;&#x2F;code&gt;) is the set of packages (&lt;code&gt;gcc&lt;&#x2F;code&gt;, &lt;code&gt;make&lt;&#x2F;code&gt;, etc) and Nix functions (&lt;code&gt;mkDerivation&lt;&#x2F;code&gt;, &lt;code&gt;mkShell&lt;&#x2F;code&gt;, etc) considered the bare minimum to build most software and development environments. The languages and frameworks chapter describes the built-in functionality for building software in your favorite language e.g. &lt;code&gt;buildRustPackage&lt;&#x2F;code&gt; for Rust, &lt;code&gt;buildGoModule&lt;&#x2F;code&gt; for Go, etc. You&#x27;ll definitely find that some languages are better supported than others, and even if your language is supported with a built-in builder, you may find yourself reaching for a third-party tool that has a better user experience e.g. &lt;code&gt;poetry2nix&lt;&#x2F;code&gt; for Python or &lt;code&gt;crane&lt;&#x2F;code&gt; for Rust.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nixos-package-search&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;search.nixos.org&#x2F;packages&quot;&gt;NixOS Package Search&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nixos-package-search&quot; aria-label=&quot;Anchor link for: nixos-package-search&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This is a site where you can search all of the packages available in the official Nixpkgs repository.&lt;&#x2F;p&gt;
&lt;p&gt;One thing I find weird about this is that you can&#x27;t link to a specific search result since search results don&#x27;t have their own pages. For example, if I search &lt;code&gt;rustc&lt;&#x2F;code&gt; I&#x27;m presented with a list of search results. The first search result is the &lt;code&gt;rustc&lt;&#x2F;code&gt; package, as expected, and the package name is styled as if it&#x27;s a link (e.g. it&#x27;s styled as if it&#x27;s &lt;code&gt;&amp;lt;a&amp;gt;rustc&amp;lt;&#x2F;a&amp;gt;&lt;&#x2F;code&gt;), but it&#x27;s not actually a link. Clicking on the package name expands a more detailed view of the package including the programs that it provides, the maintainers, etc. There are anchor tags in the tab bar (the part that says &quot;nix-env&quot;, &quot;NixOS Configuration&quot;, and &quot;nix-shell&quot;), but if you copy that link it contains the entire query that contained this search result. Not ideal. There should definitely be a way to link to a specific package. Maybe there is and I&#x27;ve just missed it, but that just means it isn&#x27;t obvious.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nix-pills&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.org&#x2F;guides&#x2F;nix-pills&#x2F;&quot;&gt;Nix Pills&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nix-pills&quot; aria-label=&quot;Anchor link for: nix-pills&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To me the name suggests that Nix Pills contains bite-sized pieces of pragmatic Nix knowledge e.g. how to set your shell prompt in a development shell. In actuality I&#x27;ve found it to be a deep dive on Nix internals. I haven&#x27;t actually read too much of this yet, but I&#x27;m sure I&#x27;ll read a section here and there as I learn more about how everything works under the hood.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;community&quot;&gt;Community&lt;a class=&quot;zola-anchor&quot; href=&quot;#community&quot; aria-label=&quot;Anchor link for: community&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Given that there&#x27;s an entire internet of content out there about any given topic it&#x27;s unrealistic for me to list every single resource about Nix. Instead I&#x27;m going to list the resources I&#x27;ve found to be helpful for me in particular or resources that I think more people should know about. I guarantee you I&#x27;ve left out resources that other people will say are great for one reason or another.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nixos-wiki&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nixos.wiki&quot;&gt;NixOS Wiki&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nixos-wiki&quot; aria-label=&quot;Anchor link for: nixos-wiki&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The NixOS wiki is a community maintained wiki for NixOS, not just Nix. Accordingly you&#x27;ll find pages here that cover not just creating and building Nix packages, but a variety of other topics like how to configure your dotfiles with Nix, how to deploy a NixOS server, etc. This is a pragmatic resource that shows you how to do all kinds of stuff rather than focusing on how everything works under the hood.&lt;&#x2F;p&gt;
&lt;p&gt;For example, the &lt;a href=&quot;https:&#x2F;&#x2F;nixos.wiki&#x2F;wiki&#x2F;Flakes&quot;&gt;Flakes&lt;&#x2F;a&gt; page gets right to the point of showing you what you need to create a &lt;code&gt;flake.nix&lt;&#x2F;code&gt;, but it doesn&#x27;t explain everything in great detail. It also shows you how to accomplish a variety of tasks with flakes, like integrate them with &lt;code&gt;direnv&lt;&#x2F;code&gt; to automatically enter a development shell when you enter a certain directory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nix-dev&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nix.dev&quot;&gt;Nix.dev&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#nix-dev&quot; aria-label=&quot;Anchor link for: nix-dev&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;It says right at the top that this is an opinionated guide. Since I&#x27;m a complete n00b I have no idea if these opinions are (1) any good, or (2) widely held. Here are some highlights:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nix.dev&#x2F;tutorials&#x2F;nix-language.html&quot;&gt;Nix language basics&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nix.dev&#x2F;anti-patterns&#x2F;language&quot;&gt;Anti-patterns&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zero-to-nix&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zero-to-nix.com&quot;&gt;Zero to Nix&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#zero-to-nix&quot; aria-label=&quot;Anchor link for: zero-to-nix&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This is a brand new resource at the time of writing. I think this will be a great resource in 2 years. Right now it&#x27;s relatively sparse, but I like the concept. The site divides its materials between a &quot;Quick Start&quot; guide and &quot;Concepts&quot;. The concepts are linked to each other in a kind of knowledge graph so that you can emulate that late-night-Wikipedia-rabbit-hole experience while staying in the Nix universe.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tony-finn-nix-from-first-principles-flake-edition&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;tonyfinn.com&#x2F;blog&#x2F;nix-from-first-principles-flake-edition&#x2F;&quot;&gt;Tony Finn - Nix from First Principles: Flake Edition&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#tony-finn-nix-from-first-principles-flake-edition&quot; aria-label=&quot;Anchor link for: tony-finn-nix-from-first-principles-flake-edition&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This is a series of blog posts showing you how to get started with Nix. You might assume from the title that it uses flakes from the very beginning, but you aren&#x27;t introduced to flakes until several articles in. I actually think that&#x27;s a good move. I think you need to understand the Nix ecosystem as it is today in order to get the most out of flakes. It&#x27;s still a good overview of what you can accomplish with Nix, and it&#x27;s a resource I found myself going back to.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ian-henry-how-to-learn-nix&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ianthehenry.com&#x2F;posts&#x2F;how-to-learn-nix&#x2F;&quot;&gt;Ian Henry - How to Learn Nix&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#ian-henry-how-to-learn-nix&quot; aria-label=&quot;Anchor link for: ian-henry-how-to-learn-nix&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This isn&#x27;t so much a tutorial as it is one person&#x27;s descent into madness while learning Nix. It&#x27;s not a tutorial teaching you how to use Nix, it&#x27;s one person&#x27;s stream-of-consciousness as they learn Nix, and it&#x27;s really refreshing. At some point you&#x27;ll be reading the Nix documentation and you&#x27;ll find your eyes skimming over a sentence only to realize you have no idea what you just read. This series is validating in the sense that someone else is reading that same documentation and verbalizing &quot;wait, wtf did I just read?&quot;. Is it the best use of your time to learn Nix by reading this series? Probably not, but it can be entertaining and comforting. I haven&#x27;t read the entire series because I have a short attention span, but it&#x27;s useful to read and realize that Nix is foreign, it&#x27;s not just you.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-missing&quot;&gt;What&#x27;s missing&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-missing&quot; aria-label=&quot;Anchor link for: what-s-missing&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I spend a lot of time in the Rust ecosystem, where there&#x27;s extensive automatically generated documentation for types, function signatures, module structures, etc for every package that&#x27;s published to &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&quot;&gt;crates.io&lt;&#x2F;a&gt;. This is something that I sorely miss when dealing with Nix. For example, there&#x27;s no browsable, hyperlinked list of the functions available in Nixpkgs with the attributes that they expect as inputs and the attributes they provide as outputs. Nix is a pure functional language, shouldn&#x27;t static analysis be possible to determine most of this? Shouldn&#x27;t you be able to sprinkle in comments with semantic meaning that get turned into HTML documentation? Specifically, what is the function signature of something like &lt;code&gt;mkShell&lt;&#x2F;code&gt;? The inputs are pretty similar to &lt;code&gt;mkDerivation&lt;&#x2F;code&gt;, but I have no idea what the outputs look like.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing that I miss in the Nix ecosystem is a cohesive documentation strategy. The motivation for this entire post is that the documentation is scattered.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;So, hopefully you&#x27;ve found this useful. In the first real installment of this series we&#x27;ll look at how to create a flake from scratch (no really, starting from an empty file). Later installments will cover topics such as specifying separate sets of build-time, dev-time, and run-time dependencies, building Docker images from Nix flakes, setting up useful development shells, and a variety of other topics. Until next time, may cosmic rays never flip your bits.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Bitmask tables</title>
          <pubDate>Tue, 27 Sep 2022 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/bit-mask-tables/</link>
          <guid>https://tinkering.xyz/bit-mask-tables/</guid>
          <description xml:base="https://tinkering.xyz/bit-mask-tables/">&lt;p&gt;At &lt;code&gt;$WORK&lt;&#x2F;code&gt; I have a need to create some bitmasks over a 64-bit field. I&#x27;ve never done this before. I figured that &lt;em&gt;surely&lt;&#x2F;em&gt; tables exist for grabbing a certain number of bits from a certain position, but I never found those tables. So, to scratch my own itch I wrote a very simple Python program to generate the tables and used a CSV to Markdown converter to create the tables. Here you go, now we both have a quick reference.&lt;&#x2F;p&gt;
&lt;p&gt;Update 2023-04-04: Someone on Mastodon mentioned &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mellowcandle&#x2F;bitwise&quot;&gt;bitwise&lt;&#x2F;a&gt;, an interactive terminal program for bit manipulations. It looks pretty cool!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;program&quot;&gt;Program&lt;a class=&quot;zola-anchor&quot; href=&quot;#program&quot; aria-label=&quot;Anchor link for: program&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;bit_sizes = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;total_bits = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;bit_size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;bit_sizes:
&lt;&#x2F;span&gt;&lt;span&gt;    positions = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;(total_bits &#x2F; bit_size)
&lt;&#x2F;span&gt;&lt;span&gt;    n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(bit_size):
&lt;&#x2F;span&gt;&lt;span&gt;        n = n &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        n += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;# &lt;&#x2F;span&gt;&lt;span&gt;{bit_size}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; bits&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;pos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(positions):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{pos}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;{n}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        n = n &amp;lt;&amp;lt; bit_size
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;table-format&quot;&gt;Table format&lt;a class=&quot;zola-anchor&quot; href=&quot;#table-format&quot; aria-label=&quot;Anchor link for: table-format&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Each table has a &quot;position&quot; column and a &quot;decimal value&quot; column. The &quot;position&quot; refers to which &lt;code&gt;n&lt;&#x2F;code&gt; bits you&#x27;re setting to 1. For a single bit the position is which individual bit is 1. For 8 bits the position is which 8 bits you&#x27;re setting to 1. The decimal value is the decimal value when the bits at the given position are set to 1. For example, 8 bits in position 1 (the second byte) corresponds to the binary number &lt;code&gt;0b000....01111111100000000&lt;&#x2F;code&gt; and the decimal value 65280.&lt;&#x2F;p&gt;
&lt;p&gt;To get the mask for an odd number of bits you can just add the decimal values in the table since the positions don&#x27;t overlap for a given number of bits.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-bit&quot;&gt;1 bit&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-bit&quot; aria-label=&quot;Anchor link for: 1-bit&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Position&lt;&#x2F;th&gt;&lt;th&gt;Decimal Value&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;64&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;128&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;256&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;512&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;1024&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;2048&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;4096&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;8192&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;16384&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;15&lt;&#x2F;td&gt;&lt;td&gt;32768&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;16&lt;&#x2F;td&gt;&lt;td&gt;65536&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;17&lt;&#x2F;td&gt;&lt;td&gt;131072&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;18&lt;&#x2F;td&gt;&lt;td&gt;262144&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;19&lt;&#x2F;td&gt;&lt;td&gt;524288&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;20&lt;&#x2F;td&gt;&lt;td&gt;1048576&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;21&lt;&#x2F;td&gt;&lt;td&gt;2097152&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;22&lt;&#x2F;td&gt;&lt;td&gt;4194304&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;23&lt;&#x2F;td&gt;&lt;td&gt;8388608&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;24&lt;&#x2F;td&gt;&lt;td&gt;16777216&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;25&lt;&#x2F;td&gt;&lt;td&gt;33554432&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;26&lt;&#x2F;td&gt;&lt;td&gt;67108864&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;27&lt;&#x2F;td&gt;&lt;td&gt;134217728&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;28&lt;&#x2F;td&gt;&lt;td&gt;268435456&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;29&lt;&#x2F;td&gt;&lt;td&gt;536870912&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;30&lt;&#x2F;td&gt;&lt;td&gt;1073741824&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;31&lt;&#x2F;td&gt;&lt;td&gt;2147483648&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;32&lt;&#x2F;td&gt;&lt;td&gt;4294967296&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;33&lt;&#x2F;td&gt;&lt;td&gt;8589934592&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;34&lt;&#x2F;td&gt;&lt;td&gt;17179869184&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;35&lt;&#x2F;td&gt;&lt;td&gt;34359738368&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;36&lt;&#x2F;td&gt;&lt;td&gt;68719476736&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;37&lt;&#x2F;td&gt;&lt;td&gt;137438953472&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;38&lt;&#x2F;td&gt;&lt;td&gt;274877906944&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;39&lt;&#x2F;td&gt;&lt;td&gt;549755813888&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;1099511627776&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;41&lt;&#x2F;td&gt;&lt;td&gt;2199023255552&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;42&lt;&#x2F;td&gt;&lt;td&gt;4398046511104&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;43&lt;&#x2F;td&gt;&lt;td&gt;8796093022208&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;44&lt;&#x2F;td&gt;&lt;td&gt;17592186044416&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;45&lt;&#x2F;td&gt;&lt;td&gt;35184372088832&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;46&lt;&#x2F;td&gt;&lt;td&gt;70368744177664&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;47&lt;&#x2F;td&gt;&lt;td&gt;140737488355328&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;48&lt;&#x2F;td&gt;&lt;td&gt;281474976710656&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;49&lt;&#x2F;td&gt;&lt;td&gt;562949953421312&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;50&lt;&#x2F;td&gt;&lt;td&gt;1125899906842624&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;51&lt;&#x2F;td&gt;&lt;td&gt;2251799813685248&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;52&lt;&#x2F;td&gt;&lt;td&gt;4503599627370496&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;53&lt;&#x2F;td&gt;&lt;td&gt;9007199254740992&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;54&lt;&#x2F;td&gt;&lt;td&gt;18014398509481984&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;55&lt;&#x2F;td&gt;&lt;td&gt;36028797018963968&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;56&lt;&#x2F;td&gt;&lt;td&gt;72057594037927936&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;57&lt;&#x2F;td&gt;&lt;td&gt;144115188075855872&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;58&lt;&#x2F;td&gt;&lt;td&gt;288230376151711744&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;59&lt;&#x2F;td&gt;&lt;td&gt;576460752303423488&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;60&lt;&#x2F;td&gt;&lt;td&gt;1152921504606846976&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;61&lt;&#x2F;td&gt;&lt;td&gt;2305843009213693952&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;62&lt;&#x2F;td&gt;&lt;td&gt;4611686018427387904&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;63&lt;&#x2F;td&gt;&lt;td&gt;9223372036854775808&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;8-bits&quot;&gt;8 Bits&lt;a class=&quot;zola-anchor&quot; href=&quot;#8-bits&quot; aria-label=&quot;Anchor link for: 8-bits&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Position&lt;&#x2F;th&gt;&lt;th&gt;Decimal Value&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;255&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;65280&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;16711680&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;4278190080&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;1095216660480&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;280375465082880&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;71776119061217280&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;18374686479671623680&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;16-bits&quot;&gt;16 bits&lt;a class=&quot;zola-anchor&quot; href=&quot;#16-bits&quot; aria-label=&quot;Anchor link for: 16-bits&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Position&lt;&#x2F;th&gt;&lt;th&gt;Decimal Value&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;65535&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;4294901760&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;281470681743360&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;18446462598732840960&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;32-bits&quot;&gt;32 bits&lt;a class=&quot;zola-anchor&quot; href=&quot;#32-bits&quot; aria-label=&quot;Anchor link for: 32-bits&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Position&lt;&#x2F;th&gt;&lt;th&gt;Decimal Value&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;4294967295&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;18446744069414584320&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</description>
      </item>
      <item>
          <title>Optimization story - quantum mechanics simulation speedup</title>
          <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/fmo-optimization-story/</link>
          <guid>https://tinkering.xyz/fmo-optimization-story/</guid>
          <description xml:base="https://tinkering.xyz/fmo-optimization-story/">&lt;hr &#x2F;&gt;
&lt;details&gt;
    &lt;summary&gt;Click here for tl;dr and spoilers&lt;&#x2F;summary&gt;
    &lt;p&gt;I wanted to make a physics simulation 100x faster. I got it 4x faster exercising my best NumPy skills, and 50x faster after rewriting in Rust with a couple of other optimizations. After getting a machine with more (and faster) cores this jumped to 250x.&lt;&#x2F;p&gt;

&lt;&#x2F;details&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;As part of my research I&#x27;ve been modeling absorption spectra from first principles i.e. computing how much light a protein absorbs at a given wavelength based on the locations and charges of all the atoms in the protein. Luckily, the vast majority of this work is done by collaborators running simulations on supercomputers. That process goes like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Grab the structure of the protein (the precise location of all of the atoms in the protein) from the &lt;a href=&quot;https:&#x2F;&#x2F;www.rcsb.org&quot;&gt;Protein Database&lt;&#x2F;a&gt;. People spend entire careers trying to obtain these structures. I&#x27;m studying the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fenna%E2%80%93Matthews%E2%80%93Olson_complex&quot;&gt;Fenna-Matthews-Olson (FMO) complex&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Put the protein in a box and fill the remaining space with water molecules.&lt;&#x2F;li&gt;
&lt;li&gt;Calculate the forces between the atoms to predict where they&#x27;ll move in the next time step. Apply some clever optimizations so that the simulation completes before the heat death of the universe.&lt;&#x2F;li&gt;
&lt;li&gt;The protein structure you grabbed from the database may not be the exact structure as you&#x27;d find in nature, so let the protein jiggle around like this for a while until the atoms in the protein find equilibrium positions to jiggle around.&lt;&#x2F;li&gt;
&lt;li&gt;Save snapshots of the protein structure during this equilibrium-jiggling for post-processing.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s a variety of information you can extract from these snapshots, but the parts that are important to me are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hamiltonian_(quantum_mechanics)&quot;&gt;Hamiltonian&lt;&#x2F;a&gt;, which is a matrix representing a quantum-mechanical description of the system and the interactions between parts of the system&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Transition_dipole_moment&quot;&gt;Transition dipole moments&lt;&#x2F;a&gt; of certain molecules&lt;&#x2F;li&gt;
&lt;li&gt;Positions of certain molecules&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From this information I can calculate the &lt;a href=&quot;https:&#x2F;&#x2F;simple.wikipedia.org&#x2F;wiki&#x2F;Absorption_spectroscopy&quot;&gt;absorption spectrum&lt;&#x2F;a&gt; (how much light is absorbed at each wavelength) and the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Circular_dichroism&quot;&gt;circular dichroism (CD) spectrum&lt;&#x2F;a&gt;. Once I have these spectra I compare them against experimentally measured spectra to see how accurate our modeling techniques are. Sometimes it works well:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;sim_spectra.png&quot; alt=&quot;Comparison of simulated and experimental spectra&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As is common in physics, part of this research entails figuring out how many details we can safely ignore. Reducing the FMO complex to an 8x8 matrix already throws away a huge number of details, namely the effect of molecular vibrations and vibrations of the entire protein, but they happen to be details that we can&#x27;t calculate in a reasonable amount of time. An exact calculation would require diagonalizing a 1,000,000x1,000,000 matrix. That&#x27;s an 8TB matrix (assuming 64-bit floats), and it&#x27;s not a sparse one either.&lt;&#x2F;p&gt;
&lt;p&gt;Woof.&lt;&#x2F;p&gt;
&lt;p&gt;This brings us to my current task. I know that some simulations and experimental spectra don&#x27;t match perfectly, so I wondered if I could fit small tweaks to the Hamiltonian (among other things) in order to get them to match. If those tweaks are within the modeling error of the simulations, that&#x27;s great and it means we&#x27;re on the right track. If not, it means we&#x27;re leaving out important details.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the problem: some fits take 8 hours to complete on my 2-core laptop. That&#x27;s a hell of a feedback cycle time! The goal is to run the simulations (locally) in about 5 minutes (~100x speedup) without doing anything too crazy. We&#x27;ve found our rabbit hole, let&#x27;s dive in!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;problem-description&quot;&gt;Problem description&lt;a class=&quot;zola-anchor&quot; href=&quot;#problem-description&quot; aria-label=&quot;Anchor link for: problem-description&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First let&#x27;s describe the shape of my data. A complete configuration consists of:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A Hamiltonian (8x8 array)&lt;&#x2F;li&gt;
&lt;li&gt;The transition dipole moments (8x3 array, one row per molecule, one column each for x-, y-, and z-coordinates)&lt;&#x2F;li&gt;
&lt;li&gt;The positions (same layout as the dipole moments).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The number of configurations used to compute the spectrum can vary. Empirically determined configurations have been published and consist of a single configuration each. The simulations our collaborators are doing produce a single configuration per snapshot, and in this case I&#x27;ve been supplied with 100 snapshots.&lt;&#x2F;p&gt;
&lt;p&gt;In order to calculate the absorption spectrum I first need to compute the &lt;a href=&quot;https:&#x2F;&#x2F;simple.wikipedia.org&#x2F;wiki&#x2F;Eigenvalues_and_eigenvectors&quot;&gt;eigenvalues and eigenvectors&lt;&#x2F;a&gt; of the Hamiltonian (this is also called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Diagonalizable_matrix#Diagonalization&quot;&gt;diagonalization&lt;&#x2F;a&gt; of the Hamiltonian).&lt;&#x2F;p&gt;
&lt;p&gt;Those eigenvectors are used to compute &lt;em&gt;new&lt;&#x2F;em&gt; transition dipole moments that are weighted sums of the original dipole moments (the eigenvectors are essentially 1D arrays containing the weights). These are called &quot;excitonic&quot; transition dipole moments.&lt;&#x2F;p&gt;
&lt;p&gt;From these excitonic transition dipole moments I calculate the &quot;stick spectrum&quot; for absorption and CD. We call this a stick spectrum because it just tells you the location and magnitude (and sign, in the case of CD) of each peak in the spectrum rather than the smooth continuous curve you would normally associate with a spectrum.&lt;&#x2F;p&gt;
&lt;p&gt;From this stick spectrum we compute a &quot;broadened&quot; spectrum by placing a Gaussian (smooth bell curve) on top of each stick in the stick spectrum. The number of points in a broadened spectrum (the resolution) is user configurable, but in practice each one ends up being about 1500 points. If I have a single configuration, I&#x27;m done. If I have multiple configurations, I do this for each one and average them. I want to minimize the error between the computed and experimental spectra.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s also worth going over my naming conventions. From looking at my code you&#x27;ll see &lt;code&gt;ham&lt;&#x2F;code&gt; and &lt;code&gt;pigs&lt;&#x2F;code&gt; everywhere, and you may conclude from that that I have an unhealthy obsession with pork. This isn&#x27;t true, in fact I&#x27;m a vegetarian. In reality &lt;code&gt;ham&lt;&#x2F;code&gt; is short for &quot;Hamiltonian&quot;, and &lt;code&gt;pigs&lt;&#x2F;code&gt; is short for &quot;pigments&quot;. A pigment is a light absorbing molecule (like a chlorophyll). Additionally, the mathematical symbol for a dipole moment is the Greek letter &quot;mu&quot;, so &lt;code&gt;mus&lt;&#x2F;code&gt; is the array of dipole moments. The letter &lt;code&gt;r&lt;&#x2F;code&gt; is used to denote position, so &lt;code&gt;rs&lt;&#x2F;code&gt; is an array of positions. The snapshot files containing the Hamiltonian, dipole moments, and positions are named &lt;code&gt;conf*.csv&lt;&#x2F;code&gt;, so I call this collection of information a &lt;code&gt;conf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The code I use to run these simulations can be found here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;savikhin-lab&#x2F;fmo_analysis&quot;&gt;savikhin-lab&#x2F;fmo_analysis&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finding-the-bottleneck&quot;&gt;Finding the bottleneck&lt;a class=&quot;zola-anchor&quot; href=&quot;#finding-the-bottleneck&quot; aria-label=&quot;Anchor link for: finding-the-bottleneck&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first step in optimization is measuring to find out which part is slow. Computing spectra for multiple confs just computes individual spectra in a loop, so I decided to profile a fit of a single conf.&lt;&#x2F;p&gt;
&lt;p&gt;When it comes to Python one of my go-to tools is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;benfred&#x2F;py-spy&quot;&gt;py-spy&lt;&#x2F;a&gt;, a sampling profiler for Python. I ran &lt;code&gt;py-spy&lt;&#x2F;code&gt; on my &lt;code&gt;fit_shifts.py&lt;&#x2F;code&gt; script and this what it looked like:
&lt;img src=&quot;&#x2F;images&#x2F;fmo_analysis_fitting_single_flamegraph.svg&quot; alt=&quot;flamegraph of the fitting program&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is the important part:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;87.5% &lt;code&gt;make_stick_spectrum&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;10% &lt;code&gt;make_broadened_spectrum&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The takeaway here is that &lt;code&gt;make_stick_spectrum&lt;&#x2F;code&gt; dominates the execution time. Note that this is &lt;em&gt;after&lt;&#x2F;em&gt; I made some optimizations several weeks ago, so imagine how much more skewed towards &lt;code&gt;make_stick_spectrum&lt;&#x2F;code&gt; it would be if I had done this back then!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;details&gt;
    &lt;summary&gt;Aside: NumPy isn&#x27;t always fast!&lt;&#x2F;summary&gt;
    &lt;p&gt;It turns out that NumPy&#x27;s cross product function &lt;code&gt;np.cross&lt;&#x2F;code&gt; is very slow for small arrays, 10x slower than computing it manually:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;m1 = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;m2 = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;([&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Built in, 39us
&lt;&#x2F;span&gt;&lt;span&gt;cross = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cross&lt;&#x2F;span&gt;&lt;span&gt;(m1, m2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Manually, 3.9us
&lt;&#x2F;span&gt;&lt;span&gt;mu_cross = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = m1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] * m2[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] - m1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] * m2[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = m1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] * m2[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] - m1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] * m2[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] = m1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] * m2[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] - m1[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] * m2[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This isn&#x27;t a knock against NumPy. NumPy tries to work well for a wide variety of cases, provide a consistent API, provide nice error messages, etc and it generally succeeds. However, the tradeoff for all of that nice functionality appears to be significant overhead in some cases. You may be able to squeeze out some extra performance by stripping out the pieces you don&#x27;t need. Another area I&#x27;ve done this is &lt;code&gt;np.savetxt&lt;&#x2F;code&gt; because I always know the data I&#x27;m going to save will be a certain shape.&lt;&#x2F;p&gt;

&lt;&#x2F;details&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This is what &lt;code&gt;make_stick_spectrum&lt;&#x2F;code&gt; looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;make_stick_spectrum&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;: Config, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ham&lt;&#x2F;span&gt;&lt;span&gt;: np.ndarray, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pigs&lt;&#x2F;span&gt;&lt;span&gt;: List[Pigment]) -&amp;gt; Dict:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Computes the stick spectra and eigenvalues&#x2F;eigenvectors for the system.&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ham, pigs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;delete_pigment&lt;&#x2F;span&gt;&lt;span&gt;(config, ham, pigs)
&lt;&#x2F;span&gt;&lt;span&gt;    n_pigs = ham.shape[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;config.delete_pig &amp;gt; n_pigs:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ValueError&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Tried to delete pigment &lt;&#x2F;span&gt;&lt;span&gt;{config.delete_pig}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; but system only has &lt;&#x2F;span&gt;&lt;span&gt;{n_pigs}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; pigments.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    e_vals, e_vecs = np.linalg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;eig&lt;&#x2F;span&gt;&lt;span&gt;(ham)
&lt;&#x2F;span&gt;&lt;span&gt;    pig_mus = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zeros&lt;&#x2F;span&gt;&lt;span&gt;((n_pigs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;config.normalize:
&lt;&#x2F;span&gt;&lt;span&gt;        total_dpm = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;([np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span&gt;(p.mu, p.mu) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;pigs])
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(pigs)):
&lt;&#x2F;span&gt;&lt;span&gt;            pigs[i].mu &#x2F;= total_dpm
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i, p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;(pigs):
&lt;&#x2F;span&gt;&lt;span&gt;        pig_mus[i, :] = pigs[i].mu
&lt;&#x2F;span&gt;&lt;span&gt;    exciton_mus = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zeros_like&lt;&#x2F;span&gt;&lt;span&gt;(pig_mus)
&lt;&#x2F;span&gt;&lt;span&gt;    stick_abs = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zeros&lt;&#x2F;span&gt;&lt;span&gt;(n_pigs)
&lt;&#x2F;span&gt;&lt;span&gt;    stick_cd = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zeros&lt;&#x2F;span&gt;&lt;span&gt;(n_pigs)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;        exciton_mus[i, :] = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span&gt;(e_vecs[:, i], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reshape&lt;&#x2F;span&gt;&lt;span&gt;((n_pigs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)) * pig_mus, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;axis&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        stick_abs[i] = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span&gt;(exciton_mus[i], exciton_mus[i])
&lt;&#x2F;span&gt;&lt;span&gt;        energy = e_vals[i]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;energy == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# If the energy is zero, the pigment has been deleted
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# so put it somewhere far away to avoid dividing by zero
&lt;&#x2F;span&gt;&lt;span&gt;            energy = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100_000
&lt;&#x2F;span&gt;&lt;span&gt;        wavelength = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1e8 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; energy  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# in angstroms
&lt;&#x2F;span&gt;&lt;span&gt;        stick_coeff = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* np.pi &#x2F; wavelength
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;                r = pigs[j].pos - pigs[k].pos
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# NumPy cross product function is super slow for small arrays
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# so we do it by hand for &amp;gt;10x speedup.
&lt;&#x2F;span&gt;&lt;span&gt;                mu_cross = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = pigs[j].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] * pigs[k].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] - pigs[j].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] * pigs[k].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = pigs[j].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] * pigs[k].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] - pigs[j].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] * pigs[k].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;                mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] = pigs[j].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] * pigs[k].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] - pigs[j].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] * pigs[k].mu[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] 
&lt;&#x2F;span&gt;&lt;span&gt;                stick_cd[i] += e_vecs[j, i] * e_vecs[k, i] * np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span&gt;(r, mu_cross)
&lt;&#x2F;span&gt;&lt;span&gt;        stick_cd[i] *= stick_coeff
&lt;&#x2F;span&gt;&lt;span&gt;    out = {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ham_deleted&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: ham,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pigs_deleted&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: pigs,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e_vals&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: e_vals,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;e_vecs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: e_vecs,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exciton_mus&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: exciton_mus,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stick_abs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: stick_abs,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stick_cd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: stick_cd
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Even to my eyes it&#x27;s not immediately obvious where the bottleneck would be in this function. In order to continue looking for the bottleneck we&#x27;ll use another tool: &lt;code&gt;line_profiler&lt;&#x2F;code&gt;. A flamegraph tells you which function is slow, but not necessarily &lt;em&gt;what about it&lt;&#x2F;em&gt; is slow. &lt;code&gt;line_profiler&lt;&#x2F;code&gt; annotates each line with information about its execution time so you can immediately see where the time is going. Running &lt;code&gt;line_profiler&lt;&#x2F;code&gt; on &lt;code&gt;make_stick_spectrum&lt;&#x2F;code&gt; generates this report:&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;details&gt;
    &lt;summary&gt;Click here to expand the report&lt;&#x2F;summary&gt;
    &lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Timer unit: 1e-06 s
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Total time: 0.010513 s
&lt;&#x2F;span&gt;&lt;span&gt;File: &#x2F;Users&#x2F;zmitchell&#x2F;code&#x2F;research&#x2F;fmo_analysis&#x2F;fmo_analysis&#x2F;exciton.py
&lt;&#x2F;span&gt;&lt;span&gt;Function: make_stick_spectrum at line 37
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Line #      Hits         Time  Per Hit   % Time  Line Contents
&lt;&#x2F;span&gt;&lt;span&gt;==============================================================
&lt;&#x2F;span&gt;&lt;span&gt;    37                                           def make_stick_spectrum(config: Config, ham: np.ndarray, pigs: List[Pigment]) -&amp;gt; Dict:
&lt;&#x2F;span&gt;&lt;span&gt;    38                                               &amp;quot;&amp;quot;&amp;quot;Computes the stick spectra and eigenvalues&#x2F;eigenvectors for the system.&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    39         1          8.0      8.0      0.1      ham, pigs = delete_pigment(config, ham, pigs)
&lt;&#x2F;span&gt;&lt;span&gt;    40         1          2.0      2.0      0.0      n_pigs = ham.shape[0]
&lt;&#x2F;span&gt;&lt;span&gt;    41         1          4.0      4.0      0.0      if config.delete_pig &amp;gt; n_pigs:
&lt;&#x2F;span&gt;&lt;span&gt;    42                                                   raise ValueError(f&amp;quot;Tried to delete pigment {config.delete_pig} but system only has {n_pigs} pigments.&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    43         1        768.0    768.0      7.3      e_vals, e_vecs = np.linalg.eig(ham)
&lt;&#x2F;span&gt;&lt;span&gt;    44         1         32.0     32.0      0.3      pig_mus = np.zeros((n_pigs, 3))
&lt;&#x2F;span&gt;&lt;span&gt;    45         1          5.0      5.0      0.0      if config.normalize:
&lt;&#x2F;span&gt;&lt;span&gt;    46                                                   total_dpm = np.sum([np.dot(p.mu, p.mu) for p in pigs])
&lt;&#x2F;span&gt;&lt;span&gt;    47                                                   for i in range(len(pigs)):
&lt;&#x2F;span&gt;&lt;span&gt;    48                                                       pigs[i].mu &#x2F;= total_dpm
&lt;&#x2F;span&gt;&lt;span&gt;    49         8         36.0      4.5      0.3      for i, p in enumerate(pigs):
&lt;&#x2F;span&gt;&lt;span&gt;    50         7         63.0      9.0      0.6          pig_mus[i, :] = pigs[i].mu
&lt;&#x2F;span&gt;&lt;span&gt;    51         1         46.0     46.0      0.4      exciton_mus = np.zeros_like(pig_mus)
&lt;&#x2F;span&gt;&lt;span&gt;    52         1          3.0      3.0      0.0      stick_abs = np.zeros(n_pigs)
&lt;&#x2F;span&gt;&lt;span&gt;    53         1          3.0      3.0      0.0      stick_cd = np.zeros(n_pigs)
&lt;&#x2F;span&gt;&lt;span&gt;    54         8         12.0      1.5      0.1      for i in range(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;    55         7        478.0     68.3      4.5          exciton_mus[i, :] = np.sum(np.repeat(e_vecs[:, i], 3).reshape((n_pigs, 3)) * pig_mus, axis=0)
&lt;&#x2F;span&gt;&lt;span&gt;    56         7         84.0     12.0      0.8          stick_abs[i] = np.dot(exciton_mus[i], exciton_mus[i])
&lt;&#x2F;span&gt;&lt;span&gt;    57         7         10.0      1.4      0.1          energy = e_vals[i]
&lt;&#x2F;span&gt;&lt;span&gt;    58         7         23.0      3.3      0.2          if energy == 0:
&lt;&#x2F;span&gt;&lt;span&gt;    59                                                       # If the energy is zero, the pigment has been deleted
&lt;&#x2F;span&gt;&lt;span&gt;    60                                                       energy = 100_000
&lt;&#x2F;span&gt;&lt;span&gt;    61         7         14.0      2.0      0.1          wavelength = 1e8 &#x2F; energy  # in angstroms
&lt;&#x2F;span&gt;&lt;span&gt;    62         7         15.0      2.1      0.1          stick_coeff = 2 * np.pi &#x2F; wavelength
&lt;&#x2F;span&gt;&lt;span&gt;    63        56        102.0      1.8      1.0          for j in range(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;    64       392        689.0      1.8      6.6              for k in range(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;    65       343       1167.0      3.4     11.1                  r = pigs[j].pos - pigs[k].pos
&lt;&#x2F;span&gt;&lt;span&gt;    66                                                           # NumPy cross product function is super slow for small arrays
&lt;&#x2F;span&gt;&lt;span&gt;    67                                                           # so we do it by hand for &amp;gt;10x speedup. It makes a difference!
&lt;&#x2F;span&gt;&lt;span&gt;    68       343       1112.0      3.2     10.6                  mu_cross = np.empty(3)
&lt;&#x2F;span&gt;&lt;span&gt;    69       343       1230.0      3.6     11.7                  mu_cross[0] = pigs[j].mu[1] * pigs[k].mu[2] - pigs[j].mu[2] * pigs[k].mu[1]
&lt;&#x2F;span&gt;&lt;span&gt;    70       343        953.0      2.8      9.1                  mu_cross[1] = pigs[j].mu[2] * pigs[k].mu[0] - pigs[j].mu[0] * pigs[k].mu[2]
&lt;&#x2F;span&gt;&lt;span&gt;    71       343       1020.0      3.0      9.7                  mu_cross[2] = pigs[j].mu[0] * pigs[k].mu[1] - pigs[j].mu[1] * pigs[k].mu[0] 
&lt;&#x2F;span&gt;&lt;span&gt;    72       343       2611.0      7.6     24.8                  stick_cd[i] += e_vecs[j, i] * e_vecs[k, i] * np.dot(r, mu_cross)
&lt;&#x2F;span&gt;&lt;span&gt;    73         7         11.0      1.6      0.1          stick_cd[i] *= stick_coeff
&lt;&#x2F;span&gt;&lt;span&gt;    74         1          3.0      3.0      0.0      out = {
&lt;&#x2F;span&gt;&lt;span&gt;    75         1          1.0      1.0      0.0          &amp;quot;ham_deleted&amp;quot;: ham,
&lt;&#x2F;span&gt;&lt;span&gt;    76         1          1.0      1.0      0.0          &amp;quot;pigs_deleted&amp;quot;: pigs,
&lt;&#x2F;span&gt;&lt;span&gt;    77         1          1.0      1.0      0.0          &amp;quot;e_vals&amp;quot;: e_vals,
&lt;&#x2F;span&gt;&lt;span&gt;    78         1          1.0      1.0      0.0          &amp;quot;e_vecs&amp;quot;: e_vecs,
&lt;&#x2F;span&gt;&lt;span&gt;    79         1          1.0      1.0      0.0          &amp;quot;exciton_mus&amp;quot;: exciton_mus,
&lt;&#x2F;span&gt;&lt;span&gt;    80         1          2.0      2.0      0.0          &amp;quot;stick_abs&amp;quot;: stick_abs,
&lt;&#x2F;span&gt;&lt;span&gt;    81         1          1.0      1.0      0.0          &amp;quot;stick_cd&amp;quot;: stick_cd
&lt;&#x2F;span&gt;&lt;span&gt;    82                                               }
&lt;&#x2F;span&gt;&lt;span&gt;    83         1          1.0      1.0      0.0      return out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;&#x2F;details&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;This is what we learn from the report:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;7.3% diagonalizing the Hamiltonian (line 43)&lt;&#x2F;li&gt;
&lt;li&gt;4.5% computing exciton dipole moments (line 55)&lt;&#x2F;li&gt;
&lt;li&gt;0.8% computing stick absorption (line 56)&lt;&#x2F;li&gt;
&lt;li&gt;77% computing stick CD (lines 65-72)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So, let&#x27;s focus on computing CD!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;optimizing-cd&quot;&gt;Optimizing CD&lt;a class=&quot;zola-anchor&quot; href=&quot;#optimizing-cd&quot; aria-label=&quot;Anchor link for: optimizing-cd&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At this point I decided to make myself some tools. I made a script for running &lt;code&gt;line_profiler&lt;&#x2F;code&gt; and a script for timing the execution of a single function, then checked both of these into git so that I can reuse them at a later date without needing to reinvent the wheel.&lt;&#x2F;p&gt;
&lt;p&gt;My execution timing script boils down to this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;time &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;perf_counter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;fmo_analysis &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;exciton
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    ham, pigs = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;    n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10_000
&lt;&#x2F;span&gt;&lt;span&gt;    times = []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n):
&lt;&#x2F;span&gt;&lt;span&gt;        t_start = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perf_counter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        stick = exciton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_stick_spectrum&lt;&#x2F;span&gt;&lt;span&gt;(config, ham, pigs)
&lt;&#x2F;span&gt;&lt;span&gt;        t_stop = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;perf_counter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        times.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(t_stop - t_start)
&lt;&#x2F;span&gt;&lt;span&gt;    per_call = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(times) &#x2F; n * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1e3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{per_call&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;:.4f&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ms per call&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The execution time varies from moment to moment depending on what else is running on my laptop, what&#x27;s in cache, etc so the exact times should be taken with a grain of salt. Our starting point is 3.48ms per call to &lt;code&gt;make_stick_spectrum&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;avoiding-superfluous-lookups&quot;&gt;Avoiding superfluous lookups&lt;a class=&quot;zola-anchor&quot; href=&quot;#avoiding-superfluous-lookups&quot; aria-label=&quot;Anchor link for: avoiding-superfluous-lookups&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The first thing that jumped out at me is that we&#x27;re repeatedly looking up the two pigments &lt;code&gt;pigs[j]&lt;&#x2F;code&gt; and &lt;code&gt;pigs[k]&lt;&#x2F;code&gt; in the inner loop. Looking these pigments up once at the beginning of the loop e.g. &lt;code&gt;pig_j = pigs[j]&lt;&#x2F;code&gt; takes us from 3.48ms to 2.78ms for a 25% speedup.&lt;&#x2F;p&gt;
&lt;p&gt;The CD calculation now looks like this for a single &quot;stick&quot;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;        pig_j = pigs[j]
&lt;&#x2F;span&gt;&lt;span&gt;        pig_k = pigs[k]
&lt;&#x2F;span&gt;&lt;span&gt;        r = pig_j.pos - pig_k.pos
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# NumPy cross product function is super slow for small arrays
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# so we do it by hand for &amp;gt;10x speedup.
&lt;&#x2F;span&gt;&lt;span&gt;        mu_cross = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        mu_j = pig_j.mu
&lt;&#x2F;span&gt;&lt;span&gt;        mu_k = pig_k.mu
&lt;&#x2F;span&gt;&lt;span&gt;        mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] * mu_k[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] - mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] * mu_k[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] * mu_k[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] - mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] * mu_k[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] = mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] * mu_k[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] - mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] * mu_k[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Calculate the dot product by hand, 2x faster than np.dot()
&lt;&#x2F;span&gt;&lt;span&gt;        r_mu_dot = r[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] * mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] + r[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] * mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] + r[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] * mu_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        stick_cd[i] += e_vecs[j, i] * e_vecs[k, i] * r_mu_dot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;skipping-half-of-the-calculations&quot;&gt;Skipping half of the calculations&lt;a class=&quot;zola-anchor&quot; href=&quot;#skipping-half-of-the-calculations&quot; aria-label=&quot;Anchor link for: skipping-half-of-the-calculations&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;It turns out that the computation for a pair of pigments &lt;code&gt;j&lt;&#x2F;code&gt; and &lt;code&gt;k&lt;&#x2F;code&gt; is identical to the computation for &lt;code&gt;k&lt;&#x2F;code&gt; and &lt;code&gt;j&lt;&#x2F;code&gt;. Put another way, if you swap &lt;code&gt;j&lt;&#x2F;code&gt; and &lt;code&gt;k&lt;&#x2F;code&gt; nothing changes. Swapping &lt;code&gt;r_j&lt;&#x2F;code&gt; and &lt;code&gt;r_k&lt;&#x2F;code&gt; gives you a minus sign. Swapping &lt;code&gt;mu_j&lt;&#x2F;code&gt; and &lt;code&gt;mu_k&lt;&#x2F;code&gt; also gives you a minus sign. These two minus signs cancel out when you calculate &lt;code&gt;(r_j - r_k) * (mu_j x mu_k)&lt;&#x2F;code&gt;. This means we only need to calculate the CD contribution for each pair of pigments once and then double it (i.e. &lt;code&gt;2 * cd(j,k)&lt;&#x2F;code&gt;) rather than calculating it separately for &lt;code&gt;j,k&lt;&#x2F;code&gt; and &lt;code&gt;k,j&lt;&#x2F;code&gt; (i.e. &lt;code&gt;cd(j,k) + cd(k,j)&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(j, n_pigs):  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Notice the &amp;quot;j&amp;quot; here now!
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Notice the &amp;quot;2&amp;quot; here now!
&lt;&#x2F;span&gt;&lt;span&gt;        stick_cd[i] += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* e_vecs[j, i] * e_vecs[k, i] * r_mu_dot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This takes us from 2.78ms to 1.71ms for a 63% speedup.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;skipping-the-diagonal&quot;&gt;Skipping the diagonal&lt;a class=&quot;zola-anchor&quot; href=&quot;#skipping-the-diagonal&quot; aria-label=&quot;Anchor link for: skipping-the-diagonal&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The key calculation is this &lt;code&gt;(r_j - r_k) * (mu_j x mu_k)&lt;&#x2F;code&gt; piece. Both &lt;code&gt;(r_j - r_k)&lt;&#x2F;code&gt; and &lt;code&gt;(mu_j x mu_k)&lt;&#x2F;code&gt; are zero if &lt;code&gt;j = k&lt;&#x2F;code&gt;, so we can skip those calculations entirely. This is all we need to change:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(j+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, n_pigs):  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Notice the &amp;quot;+1&amp;quot; here!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This takes us from 1.71ms to 1.41ms for an 21% speedup.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;caching-some-computations&quot;&gt;Caching some computations&lt;a class=&quot;zola-anchor&quot; href=&quot;#caching-some-computations&quot; aria-label=&quot;Anchor link for: caching-some-computations&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If you look at the &lt;code&gt;(r_j - r_k) * (mu_j x mu_k)&lt;&#x2F;code&gt; piece, you&#x27;ll notice a distinct lack of &lt;code&gt;i&lt;&#x2F;code&gt;. This means we&#x27;re calculating it over and over again for no reason on every iteration of the outer loop. We can calculate this part once and reuse it. The outer loop looks like this now:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;r_mu_cross_cache = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_r_dot_mu_cross_cache&lt;&#x2F;span&gt;&lt;span&gt;(pigs)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n_pigs):
&lt;&#x2F;span&gt;&lt;span&gt;    exciton_mus[i, :] = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span&gt;(e_vecs[:, i], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reshape&lt;&#x2F;span&gt;&lt;span&gt;((n_pigs, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)) * pig_mus, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;axis&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    stick_abs[i] = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span&gt;(exciton_mus[i], exciton_mus[i])
&lt;&#x2F;span&gt;&lt;span&gt;    energy = e_vals[i]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;energy == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# If the energy is zero, the pigment has been deleted
&lt;&#x2F;span&gt;&lt;span&gt;        energy = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100_000
&lt;&#x2F;span&gt;&lt;span&gt;    wavelength = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1e8 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; energy  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# in angstroms
&lt;&#x2F;span&gt;&lt;span&gt;    stick_coeff = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* np.pi &#x2F; wavelength
&lt;&#x2F;span&gt;&lt;span&gt;    e_vec_weights = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make_weight_matrix&lt;&#x2F;span&gt;&lt;span&gt;(e_vecs, i)
&lt;&#x2F;span&gt;&lt;span&gt;    stick_cd[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* stick_coeff * np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(e_vec_weights * r_mu_cross_cache)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;make_r_mu_cross_cache&lt;&#x2F;code&gt; and &lt;code&gt;make_weight_matrix&lt;&#x2F;code&gt; look like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;make_r_dot_mu_cross_cache&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pigs&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Computes a cache of (r_i - r_j) * (mu_i x mu_j)&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    n = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(pigs)
&lt;&#x2F;span&gt;&lt;span&gt;    cache = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zeros&lt;&#x2F;span&gt;&lt;span&gt;((n, n))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(i+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, n):
&lt;&#x2F;span&gt;&lt;span&gt;            r_i = pigs[i].pos
&lt;&#x2F;span&gt;&lt;span&gt;            r_j = pigs[j].pos
&lt;&#x2F;span&gt;&lt;span&gt;            r_ij = r_i - r_j
&lt;&#x2F;span&gt;&lt;span&gt;            mu_i = pigs[i].mu
&lt;&#x2F;span&gt;&lt;span&gt;            mu_j = pigs[j].mu
&lt;&#x2F;span&gt;&lt;span&gt;            mu_ij_cross = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            mu_ij_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] = mu_i[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] * mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] - mu_i[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] * mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;            mu_ij_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] = mu_i[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] * mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] - mu_i[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] * mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;            mu_ij_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] = mu_i[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] * mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] - mu_i[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] * mu_j[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;            cache[i, j] = r_ij[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] * mu_ij_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] + r_ij[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] * mu_ij_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] + r_ij[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] * mu_ij_cross[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;cache
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;make_weight_matrix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e_vecs&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;col&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Makes the matrix of weights for CD from the eigenvectors&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    n = e_vecs.shape[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    mat = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zeros&lt;&#x2F;span&gt;&lt;span&gt;((n, n))
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(n):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(i+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, n):
&lt;&#x2F;span&gt;&lt;span&gt;            mat[i, j] = e_vecs[i, col] * e_vecs[j, col]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;mat
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This takes us from 1.41ms to 0.94ms for a 50% speedup.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;letting-numpy-take-control&quot;&gt;Letting NumPy take control&lt;a class=&quot;zola-anchor&quot; href=&quot;#letting-numpy-take-control&quot; aria-label=&quot;Anchor link for: letting-numpy-take-control&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The more you can keep execution in C and out of Python, the faster your program is going to run. In practice this means letting NumPy do iteration for you and apply functions to entire arrays since it can iterate and apply functions in C, which is much faster. Consider this example: I want to multiply two matrices together elementwise and sum the result.&lt;&#x2F;p&gt;
&lt;p&gt;The naive version looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sum&lt;&#x2F;span&gt;&lt;span&gt;(e_vec_weights * r_mu_cross_cache)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The product here creates a new array containing the product, and &lt;code&gt;np.sum&lt;&#x2F;code&gt; adds the elements of that new matrix.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s another operation similar to this called the &quot;dot product&quot; or &quot;inner product&quot;, but in order to get a single number out of it you need two 1D arrays. Luckily there&#x27;s a built-in method, &lt;code&gt;flatten&lt;&#x2F;code&gt;, which converts a multi-dimensional array into a 1D array. Since these two matrices are the same shape I know they&#x27;ll be flattened such that corresponding elements line up properly for the dot product:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dot&lt;&#x2F;span&gt;&lt;span&gt;(e_vec_weights.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flatten&lt;&#x2F;span&gt;&lt;span&gt;(), r_mu_cross_cache.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flatten&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is roughly 3x faster than the naive method. It&#x27;s not a big speedup overall in this program (0.94ms to 0.91ms for a 3% speedup) but it&#x27;s instructive anyway.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;calling-lapack-routines-directly&quot;&gt;Calling LAPACK routines directly&lt;a class=&quot;zola-anchor&quot; href=&quot;#calling-lapack-routines-directly&quot; aria-label=&quot;Anchor link for: calling-lapack-routines-directly&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At this point the breakdown of execution time looks like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;50% computing eigenvalues and eigenvectors&lt;&#x2F;li&gt;
&lt;li&gt;16% making the cache&lt;&#x2F;li&gt;
&lt;li&gt;9% making the weights to go along with the cache&lt;&#x2F;li&gt;
&lt;li&gt;10% computing the exciton dipole moments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Calculating CD no longer dominates the execution time, so I moved my focus to diagonalization. I knew that my Hamiltonian matrix was &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Symmetric_matrix&quot;&gt;symmetric&lt;&#x2F;a&gt;, so I wondered if there were diagonalization algorithms that could take advantage of this. Fortunately NumPy has one built in: &lt;code&gt;eigh&lt;&#x2F;code&gt;. Unfortunately it didn&#x27;t seem to make much of a difference (within measurement error on my laptop). I suspect that there may be a bigger difference on a larger matrix.&lt;&#x2F;p&gt;
&lt;p&gt;I wondered again whether NumPy was adding some overhead. One of the things that makes NumPy so fast is that parts of it are wrappers around &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;LAPACK&quot;&gt;LAPACK&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Basic_Linear_Algebra_Subprograms&quot;&gt;BLAS&lt;&#x2F;a&gt;, which are industry standard libraries for efficient linear algebra algorithms and operations. In order to test out this hypothesis I decided to call the LAPACK diagonalization routine directly as made available by the &lt;code&gt;scipy.lapack&lt;&#x2F;code&gt; module. The LAPACK routine used by &lt;code&gt;eig&lt;&#x2F;code&gt; is called DGEEV. Yeah, it&#x27;s cryptic.&lt;&#x2F;p&gt;
&lt;p&gt;A tricky detail here is that LAPACK is written in FORTRAN, so it expects and returns arrays with FORTRAN-ordering (column-major) rather than C-ordering (row-major), so you need to handle conversion between the two. Fortunately my Hamiltonian is symmetric so the FORTRAN ordering is actually identical to the C-ordering. This isn&#x27;t the case for the return values, though.&lt;&#x2F;p&gt;
&lt;p&gt;This is what the new diagonalization code looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;e_vals_fortran_order, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, e_vecs_fortran_order, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;= lapack.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sgeev&lt;&#x2F;span&gt;&lt;span&gt;(ham)
&lt;&#x2F;span&gt;&lt;span&gt;e_vals = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ascontiguousarray&lt;&#x2F;span&gt;&lt;span&gt;(e_vals_fortran_order)
&lt;&#x2F;span&gt;&lt;span&gt;e_vecs = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ascontiguousarray&lt;&#x2F;span&gt;&lt;span&gt;(e_vecs_fortran_order)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This takes us from 0.91ms to 0.85ms for a 7% speedup.&lt;&#x2F;p&gt;
&lt;p&gt;At this point we&#x27;ve managed to reduce the execution time from 3.48ms to 0.85ms for a 4x speedup. The goal is 100x, so we&#x27;re missing our target by 25x. That&#x27;s a lot of x&#x27;s and I&#x27;m running out of NumPy tricks. It&#x27;s time to call in the big guns.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rust-rewrite&quot;&gt;Rust rewrite&lt;a class=&quot;zola-anchor&quot; href=&quot;#rust-rewrite&quot; aria-label=&quot;Anchor link for: rust-rewrite&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I know it&#x27;s a meme at this point, but I decided to rewrite the number-crunching parts of this program in Rust. There are four crates that make this possible:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PyO3&#x2F;pyo3&quot;&gt;PyO3&lt;&#x2F;a&gt;, for Rust&#x2F;Python interop&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PyO3&#x2F;maturin&quot;&gt;maturin&lt;&#x2F;a&gt;, for interacting with your extension during development and eventually publishing it to PyPI&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-ndarray&#x2F;ndarray&quot;&gt;ndarray&lt;&#x2F;a&gt;, Rust&#x27;s equivalent to NumPy&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PyO3&#x2F;rust-numpy&quot;&gt;rust-numpy&lt;&#x2F;a&gt;, for converting between NumPy and ndarray&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The Python interop was shockingly easy. I wouldn&#x27;t even know how to begin doing this with C. It&#x27;s not without friction, but that&#x27;s mostly a documentation issue. For instance, I had trouble putting my Rust source alongside my Python source in my Python package and having &lt;code&gt;poetry build&lt;&#x2F;code&gt; include the compiled Rust binary. The documentation makes it sound like this is the preferred method, but I couldn&#x27;t figure it out in the moment and I was short on time. It&#x27;s entirely possible I missed something simple, I&#x27;ve never done this before.&lt;&#x2F;p&gt;
&lt;p&gt;I ended up just making a separate package, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;savikhin-lab&#x2F;ham2spec&quot;&gt;ham2spec&lt;&#x2F;a&gt;, so I could upload it to PyPI and have it downloaded and installed like any other dependency. I shouldn&#x27;t have to build and upload my Rust extension to a server somewhere to get it picked up properly as a dependency of my local project, but here we are.&lt;&#x2F;p&gt;
&lt;p&gt;This is what the development process looks like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new project with &lt;code&gt;maturin new&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Write your Rust code&lt;&#x2F;li&gt;
&lt;li&gt;Package it up and expose it to Python locally with &lt;code&gt;maturin develop&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Fire up a Python interpreter and play around with your module to give things a cursory glance&lt;&#x2F;li&gt;
&lt;li&gt;Repeat&lt;&#x2F;li&gt;
&lt;li&gt;Publish your module with &lt;code&gt;maturin publish&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I also decided to interface with LAPACK directly via the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blas-lapack-rs&#x2F;blas-lapack-rs.github.io&#x2F;wiki&quot;&gt;lapack&lt;&#x2F;a&gt; crate. I have one use of &lt;code&gt;unsafe&lt;&#x2F;code&gt; in my crate and it&#x27;s the call to &lt;code&gt;dgeev&lt;&#x2F;code&gt;. I&#x27;m ok with that.&lt;&#x2F;p&gt;
&lt;p&gt;The Rust code is a pretty direct translation from the Python code. I had an inkling from the beginning that I would need to write the number crunching code in Rust, but it was easier to explore optimizations in Python first. The only real deviations are the use of all the nice iterators that Rust provides, especially the &lt;code&gt;Zip&lt;&#x2F;code&gt; iterator that ndarray provides for iterating over multiple arrays in lock-step. Here&#x27;s &lt;code&gt;Zip&lt;&#x2F;code&gt; in action:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;compute_stick_spectra&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hams&lt;&#x2F;span&gt;&lt;span&gt;: ArrayView3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mus&lt;&#x2F;span&gt;&lt;span&gt;: ArrayView3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rs&lt;&#x2F;span&gt;&lt;span&gt;: ArrayView3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Vec&amp;lt;StickSpectrum&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dummy_stick = StickSpectrum {
&lt;&#x2F;span&gt;&lt;span&gt;        e_vals: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;arr1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;[]),
&lt;&#x2F;span&gt;&lt;span&gt;        e_vecs: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;arr2&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;[[], []]),
&lt;&#x2F;span&gt;&lt;span&gt;        mus: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;arr2&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;[[], []]),
&lt;&#x2F;span&gt;&lt;span&gt;        stick_abs: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;arr1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;[]),
&lt;&#x2F;span&gt;&lt;span&gt;        stick_cd: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;arr1&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;[]),
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; sticks: Vec&amp;lt;StickSpectrum&amp;gt; = Vec::with_capacity(hams.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dim&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    sticks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;(hams.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dim&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, dummy_stick);
&lt;&#x2F;span&gt;&lt;span&gt;    Zip::from(hams.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;axis_iter&lt;&#x2F;span&gt;&lt;span&gt;(Axis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(mus.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;axis_iter&lt;&#x2F;span&gt;&lt;span&gt;(Axis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;axis_iter&lt;&#x2F;span&gt;&lt;span&gt;(Axis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; sticks)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;| *s = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;compute_stick_spectrum&lt;&#x2F;span&gt;&lt;span&gt;(h, m, r));
&lt;&#x2F;span&gt;&lt;span&gt;    sticks
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This direct translation executes in 35us for a total speedup of ~100x, but there&#x27;s a bit of a catch. The Rust code takes 3 arrays as arguments (8x8 Hamiltonian, 8x3 dipole moments, 8x3 positions), whereas the previous Python function is called with an 8x8 array for the Hamiltonian and a list of &lt;code&gt;Pigment&lt;&#x2F;code&gt; objects, which are each just containers for a position and a dipole moment. Doing the conversion to arrays brings the execution time to 45us. I&#x27;m still counting this as a win since I don&#x27;t &lt;em&gt;have&lt;&#x2F;em&gt; to do this conversion, I&#x27;m just doing it to preserve backwards compatibility with a bunch of simulations I&#x27;ve already written.&lt;&#x2F;p&gt;
&lt;p&gt;Just for kicks I decided to profile &lt;code&gt;ham2spec&lt;&#x2F;code&gt; to see if there was any low-hanging fruit for optimization. In order to do this I had to create a crate example since my crate is a library, not a binary, and examples get compiled into their own binaries. I made this example and profiled it with &lt;code&gt;cargo-flamegraph&lt;&#x2F;code&gt;. The profiling output showed that the runtime of &lt;code&gt;compute_stick_spectrum&lt;&#x2F;code&gt; (my Rust equivalent of the &lt;code&gt;make_stick_spectrum&lt;&#x2F;code&gt; function from my Python code) looked like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;45% diagonalization&lt;&#x2F;li&gt;
&lt;li&gt;23% computing exciton dipole moments&lt;&#x2F;li&gt;
&lt;li&gt;24% computing CD&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If I could somehow magically eliminate my own calculations entirely and let diagonalization dominate the execution time I would only make this function ~2x faster. I already know that we&#x27;ve eliminated the stick spectrum bottleneck, so this isn&#x27;t worth it.&lt;&#x2F;p&gt;
&lt;p&gt;The only thing left to do is make sure the output of the new code and old code match up...&lt;&#x2F;p&gt;
&lt;h2 id=&quot;matching-outputs&quot;&gt;Matching outputs&lt;a class=&quot;zola-anchor&quot; href=&quot;#matching-outputs&quot; aria-label=&quot;Anchor link for: matching-outputs&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;It&#x27;s at this point that I must make a confession. I haven&#x27;t been eating my vegetables. Well, I have, like I said I&#x27;m a vegetarian. What I really mean is that I didn&#x27;t have a test suite for either &lt;code&gt;fmo_analysis&lt;&#x2F;code&gt; or &lt;code&gt;ham2spec&lt;&#x2F;code&gt;. I know, blasphemy.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m the last person you need to convince about writing tests. I&#x27;ve &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=RdpHONoFsSs&amp;amp;list=PLgC1L0fKd7UkVwjVlOySfMnn80Qs5TOLb&amp;amp;index=9&quot;&gt;given talks&lt;&#x2F;a&gt; about esoteric testing techniques. I&#x27;ve also &lt;a href=&quot;https:&#x2F;&#x2F;tinkering.xyz&#x2F;polsim&#x2F;#testing&quot;&gt;written about&lt;&#x2F;a&gt; the need for better testing in scientific software and &lt;a href=&quot;https:&#x2F;&#x2F;tinkering.xyz&#x2F;property-based-testing-with-proptest&quot;&gt;property-based testing specifically&lt;&#x2F;a&gt;. So, how did we get here?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Burnout. Graduate school is hard. Doing anything that doesn&#x27;t directly move you towards graduation has a high activation energy.&lt;&#x2F;li&gt;
&lt;li&gt;I&#x27;m the only person on the planet using this software, so I&#x27;ll just run into all the bugs myself and fix them. Right?&lt;&#x2F;li&gt;
&lt;li&gt;This started as a small CLI that I threw together and it quickly grew beyond that scope.&lt;&#x2F;li&gt;
&lt;li&gt;My dog ate my test suite.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Suffice to say that I now have test suites for both &lt;code&gt;fmo_analysis&lt;&#x2F;code&gt; and &lt;code&gt;ham2spec&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The problem was multi-faceted:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I wasn&#x27;t converting between memory orderings correctly&lt;&#x2F;li&gt;
&lt;li&gt;Eigenvectors are only defined up to a sign, so small differences in precision can cause sign flips&lt;&#x2F;li&gt;
&lt;li&gt;I had switched from double-precision to single-precision, which caused sign flips as mentioned above&lt;&#x2F;li&gt;
&lt;li&gt;The allegedly &quot;known-good&quot; data I was comparing against was saved incorrectly (when in doubt, test the test!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Ultimately the sign flips don&#x27;t change the results, but I had to change my test suite to allow for sign flips.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;details&gt;
    &lt;summary&gt;Aside: Converting between orderings&lt;&#x2F;summary&gt;
    &lt;p&gt;An &lt;code&gt;n&lt;&#x2F;code&gt;-dimensional array in NumPy or ndarray consists of a few pieces of information:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The buffer containing the actual data&lt;&#x2F;li&gt;
&lt;li&gt;The dimensions of the array&lt;&#x2F;li&gt;
&lt;li&gt;The strides, or &quot;how many elements do I have to traverse in the buffer to get to the next item along a particular axis&quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;You can see that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-ndarray&#x2F;ndarray&#x2F;blob&#x2F;307234e71dac87d72d7c1d955ed9f68e5e902623&#x2F;src&#x2F;lib.rs#L1285&quot;&gt;here in ndarray&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;numpy.org&#x2F;devdocs&#x2F;reference&#x2F;c-api&#x2F;types-and-structures.html#c.PyArrayObject&quot;&gt;here in NumPy&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When you ask for the transpose of an array (swapping the rows and columns) it&#x27;s these dimensions and strides that are modified, not the underlying data. For instance, this is how &lt;code&gt;ndarray::ArrayBase::reversed_axes&lt;&#x2F;code&gt; is implemented:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Transpose the array by reversing axes.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Transposition reverses the order of the axes (dimensions and strides)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; while retaining the same data.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reversed_axes&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; ArrayBase&amp;lt;S, D&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.dim.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;slice_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.strides.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;slice_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a good idea because the data structures for dimensions and strides are small and quickly modified. Copying the contents of the array into a new array in a different order is much slower. In order to actually transpose the data in the buffer you have to do this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; transposed = my_arr
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;reversed_axes&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_standard_layout&lt;&#x2F;span&gt;&lt;span&gt;()  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Returns a CowArray (Cow = copy-on-write)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;();  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Necessary to get an owned array
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;

&lt;&#x2F;details&gt;
&lt;hr &#x2F;&gt;&lt;h2 id=&quot;broadened-spectra&quot;&gt;Broadened spectra&lt;a class=&quot;zola-anchor&quot; href=&quot;#broadened-spectra&quot; aria-label=&quot;Anchor link for: broadened-spectra&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Once everything was &lt;em&gt;correct&lt;&#x2F;em&gt;, I got back to work optimizing. My stick spectrum computations were 100x faster, so it was time to look at how that translated to computing a broadened spectrum. As a refresher, computing a broadened spectrum looks like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Compute the stick spectrum from a Hamiltonian&lt;&#x2F;li&gt;
&lt;li&gt;Compute a broadened spectrum from a stick spectrum&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I timed the execution of the original system computing a spectrum from 100 Hamiltonians and it took 381ms. It&#x27;s no wonder that a fit takes forever when each iteration of the minimization routine takes almost 400ms.&lt;&#x2F;p&gt;
&lt;p&gt;I timed the execution of the new system doing the same computation and it took 40ms. That&#x27;s only 10x faster! My stick spectrum computations were 100x faster than the old version, so why is this so much slower? As a reminder, this was the original breakdown of execution time:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;87.5% &lt;code&gt;make_stick_spectrum&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;10% &lt;code&gt;make_broadened_spectrum&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you magically eliminate the runtime of everything but &lt;code&gt;make_broadened_spectrum&lt;&#x2F;code&gt; you would only expect a 10x speedup (100% -&amp;gt; 10%).
We effectively &lt;em&gt;did&lt;&#x2F;em&gt; elminate the execution time of everything else, so we&#x27;re seeing exactly that 10x speedup we would expect. So, how do we make it faster?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;making-it-parallel&quot;&gt;Making it parallel&lt;a class=&quot;zola-anchor&quot; href=&quot;#making-it-parallel&quot; aria-label=&quot;Anchor link for: making-it-parallel&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The process of computing a broadened spectrum from each Hamiltonian falls into the category of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Embarrassingly_parallel&quot;&gt;embarrassingly parallel&lt;&#x2F;a&gt;, so we don&#x27;t even need to do much work to make this parallel. I literally changed a &lt;code&gt;for_each&lt;&#x2F;code&gt; to a &lt;code&gt;par_for_each&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;Zip::from(abs_arr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;columns_mut&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(cd_arr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;columns_mut&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(hams.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;axis_iter&lt;&#x2F;span&gt;&lt;span&gt;(Axis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(mus.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;axis_iter&lt;&#x2F;span&gt;&lt;span&gt;(Axis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(rs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;axis_iter&lt;&#x2F;span&gt;&lt;span&gt;(Axis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;par_for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abs_col&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cd_col&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;m&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;| { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; &amp;lt;-- parallel iteration here!
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; stick = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;compute_stick_spectrum&lt;&#x2F;span&gt;&lt;span&gt;(h, m, r);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; broadened = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;compute_broadened_spectrum_from_stick&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            stick.e_vals.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            stick.stick_abs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            stick.stick_cd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;view&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            config,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;        abs_col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;assign&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;broadened.abs);
&lt;&#x2F;span&gt;&lt;span&gt;        cd_col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;assign&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;broadened.cd);
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This brought the execution time from 40ms to 17.6ms for a 127% speedup. My puny laptop only has 2 cores (but it does have Hyper-threading), so this is in the ballpark of what I would expect. I do have a new 16&quot; Macbook Pro on the way with many more cores to throw at this, so we&#x27;ll see if I get linear scaling with the number of cores or not.&lt;&#x2F;p&gt;
&lt;p&gt;At this point we&#x27;re still only 22x faster than the original execution time of 381ms for computing a broadened spectrum from 100 Hamiltonians.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;doing-less-work&quot;&gt;Doing less work&lt;a class=&quot;zola-anchor&quot; href=&quot;#doing-less-work&quot; aria-label=&quot;Anchor link for: doing-less-work&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I ran &lt;code&gt;cargo-flamegraph&lt;&#x2F;code&gt; on an example calculation and it showed that calls to &lt;code&gt;exp&lt;&#x2F;code&gt; account for 55% of the execution time. On one hand, that&#x27;s not a function I can make faster by modifying its code, so that&#x27;s discouraging. On the other hand it means that most of the execution time is spent doing calculations and nothing too weird.&lt;&#x2F;p&gt;
&lt;p&gt;I remember reading a post or a comment somewhere from Andrew Gallant, the original brain behind &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt;, that said something along the lines of &quot;one of the easiest ways to make a program faster is to make it do less work.&quot; That&#x27;s always stuck with me. How does it apply here?&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re placing a Gaussian on top of each stick in the stick spectrum, but the contribution from each Gaussian diminishes as you get further away from the peak. If you get far enough away from the peak, the contributions become vanishingly small. If that&#x27;s the case, why do those calculations at all?&lt;&#x2F;p&gt;
&lt;p&gt;I decided that instead of computing each Gaussian for all x-values in the domain I would only compute each Gaussian within a user-configurable range of the peak.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Determine the indices for which you actually need to compute the contribution of a band
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;band_cutoff_indices&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bw&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cutoff&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xs&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;]) -&amp;gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lower = xs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;partition_point&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &amp;lt; (center - cutoff * bw));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; upper = xs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;partition_point&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &amp;lt; (center + cutoff * bw));
&lt;&#x2F;span&gt;&lt;span&gt;    (lower, upper)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Computes the band and adds it to the spectrum
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_cutoff_bands&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;: ArrayViewMut1&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;energies&lt;&#x2F;span&gt;&lt;span&gt;: ArrayView1&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stick_strengths&lt;&#x2F;span&gt;&lt;span&gt;: ArrayView1&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bws&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cutoff&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: ArrayView1&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    Zip::from(energies)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(stick_strengths)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(bws)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strength&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bw&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; denom = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;gauss_denom&lt;&#x2F;span&gt;&lt;span&gt;(bw);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(lower, upper) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;band_cutoff_indices&lt;&#x2F;span&gt;&lt;span&gt;(e, bw, cutoff, x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; band = x
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;slice&lt;&#x2F;span&gt;&lt;span&gt;(s![lower..upper])
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mapv&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x_i&lt;&#x2F;span&gt;&lt;span&gt;| strength * (-(x_i - e).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;powi&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; denom).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exp&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            spec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;slice_mut&lt;&#x2F;span&gt;&lt;span&gt;(s![lower..upper]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_assign&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;band);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This takes us from 17.6ms to 8.1ms with a cutoff of 3 for a 117% speedup. Now we&#x27;re sitting at 47x faster than the original.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;final-attempts&quot;&gt;Final attempts&lt;a class=&quot;zola-anchor&quot; href=&quot;#final-attempts&quot; aria-label=&quot;Anchor link for: final-attempts&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At this point I was running out of low-hanging fruit and turned to some heavier-duty tools and shots in the dark.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;looking-at-the-assembly&quot;&gt;Looking at the assembly&lt;a class=&quot;zola-anchor&quot; href=&quot;#looking-at-the-assembly&quot; aria-label=&quot;Anchor link for: looking-at-the-assembly&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I used &lt;code&gt;cargo-asm&lt;&#x2F;code&gt; to view the assembly (compiled with &lt;code&gt;--release&lt;&#x2F;code&gt;) of &lt;code&gt;add_cutoff_bands&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ham2spec::add_cutoff_bands (src&#x2F;lib.rs:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;337&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;push    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;push    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;push    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;sub     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsp&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movsd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;sete    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;setb    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;al
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;or      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;al
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;sete    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;or      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;al
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;je      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movaps  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rip&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LCPI44_0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movaps  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_4:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;72&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_6:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;qword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lea     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lea     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lea     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp&lt;&#x2F;span&gt;&lt;span&gt;, -, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;24&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;call    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ndarray::zip::Zip&amp;lt;P&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;D&amp;gt;::inner
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsp&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pop     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pop     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r14
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pop     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ret
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_7:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lea     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rip&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;l___unnamed_37&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lea     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rip&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;l___unnamed_38&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mov     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;esi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;43
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;call    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;core::panicking::panic
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Well, all of the interesting stuff (the call to &lt;code&gt;for_each&lt;&#x2F;code&gt;) happens inside the call to &lt;code&gt;ndarray::zip::Zip&amp;lt;P, D&amp;gt;::inner&lt;&#x2F;code&gt; and I don&#x27;t know how to get at that with &lt;code&gt;cargo asm&lt;&#x2F;code&gt;. I fired up a debugger and disassembled &lt;code&gt;add_cutoff_bands&lt;&#x2F;code&gt;, but this left me with the opposite problem (a sea of assembly). I wasn&#x27;t able to glean much from this just because I can barely read assembly. Sorry.&lt;&#x2F;p&gt;
&lt;p&gt;I was looking for signs one way or the other whether the computations were being vectorized. It&#x27;s still unclear to me whether that&#x27;s happening.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;instruction-level-parallelism&quot;&gt;Instruction level parallelism&lt;a class=&quot;zola-anchor&quot; href=&quot;#instruction-level-parallelism&quot; aria-label=&quot;Anchor link for: instruction-level-parallelism&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I recently read a series of posts showing how a Rust program was progressively optimized and made to run in parallel (&lt;a href=&quot;https:&#x2F;&#x2F;parallel-rust-cpp.github.io&quot;&gt;Comparing Parallel Rust and C++&lt;&#x2F;a&gt;) and one of the optimizations seemed relatively easy: loop unrolling.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to give it a try by operating on chunks of data at a time, like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; The block size for doing chunked computations
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BLOCK_SIZE&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Compute the band cutoff indices aligned to the block size
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;block_aligned_band_cutoff_indices&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bsize&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bw&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cutoff&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xs&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; lower = xs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;partition_point&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &amp;lt; (center - cutoff * bw));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; upper = xs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;partition_point&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &amp;lt; (center + cutoff * bw));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rem = (upper - lower) % bsize;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The higher energy side tends to have less going on, so we can err
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; on the side of computing fewer values there
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(lower, upper - rem);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Compute the cutoff bands using SIMD
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;add_cutoff_bands_chunked&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;spec&lt;&#x2F;span&gt;&lt;span&gt;: ArrayViewMut1&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;energies&lt;&#x2F;span&gt;&lt;span&gt;: ArrayView1&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stick_strengths&lt;&#x2F;span&gt;&lt;span&gt;: ArrayView1&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bws&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cutoff&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: ArrayView1&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; band_indices: Vec&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; = energies
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(bws.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_aligned_band_cutoff_indices&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BLOCK_SIZE&lt;&#x2F;span&gt;&lt;span&gt;, e, b, cutoff, x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; denoms: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = bws.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;gauss_denom&lt;&#x2F;span&gt;&lt;span&gt;(b)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x_slice = x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_slice&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; spec_slice = spec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_slice_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;e, (&amp;amp;s, (&amp;amp;d, bi))) in energies
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(stick_strengths.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(denoms.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(band_indices)))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        x_slice[bi.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..bi.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chunks_exact&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BLOCK_SIZE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(spec_slice.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chunks_exact_mut&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;BLOCK_SIZE&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x_chunk&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s_chunk&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;                s_chunk[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] += s * (-(x_chunk[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] - e).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;powi&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; d).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exp&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                s_chunk[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] += s * (-(x_chunk[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] - e).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;powi&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; d).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exp&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                s_chunk[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] += s * (-(x_chunk[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;] - e).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;powi&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; d).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exp&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                s_chunk[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] += s * (-(x_chunk[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;] - e).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;powi&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; d).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exp&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            });
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This was actually marginally &lt;em&gt;slower&lt;&#x2F;em&gt;, 8.4ms vs. 8.1ms. However, it&#x27;s very clear from the assembly that the operations are being vectorized. Here&#x27;s a snippet where it&#x27;s clear that actual math is being done:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_100:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r14&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mulpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;divpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbx&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r14&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mulpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;divpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbx&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_100
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;test    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dl&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;je      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_103
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LBB44_102:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r14&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mulpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;divpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rip&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;LCPI44_0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span&gt;, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rbx&lt;&#x2F;span&gt;&lt;span&gt;, +, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately, I don&#x27;t have much insight into why this is slower. If I had to guess, I would say that it&#x27;s a combination of the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;My laptop only has 128-bit floating point SIMD registers, so you&#x27;re only operating on two &lt;code&gt;f64&lt;&#x2F;code&gt;s at a time&lt;&#x2F;li&gt;
&lt;li&gt;SIMD instructions have significantly higher latency than scalar instructions&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Perhaps the SIMD overhead outweighs the (at best) 2x speedup from using SIMD instructions?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;explicit-simd&quot;&gt;Explicit SIMD&lt;a class=&quot;zola-anchor&quot; href=&quot;#explicit-simd&quot; aria-label=&quot;Anchor link for: explicit-simd&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Just for kicks I decided to try writing the SIMD code myself rather than relying on the compiler to do it for me. It&#x27;s worth noting that it&#x27;s not very clear to me what the current recommendation is when it comes to SIMD crates. These are the official options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;std&#x2F;simd&#x2F;index.html&quot;&gt;std::simd&lt;&#x2F;a&gt; module, only available with the Nightly compiler&lt;&#x2F;li&gt;
&lt;li&gt;Architecture specific implementations in the &lt;code&gt;std::arch&lt;&#x2F;code&gt; module, which comes from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;stdarch&quot;&gt;stdarch&lt;&#x2F;a&gt; crate&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;packed_simd&quot;&gt;packed_simd&lt;&#x2F;a&gt; crate&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the end I decided to go with &lt;code&gt;packed_simd&lt;&#x2F;code&gt; because it looked the most ergonomic. It only took a slight modification of the &lt;code&gt;chunked&lt;&#x2F;code&gt; code to get it working with SIMD.&lt;&#x2F;p&gt;
&lt;p&gt;This brought execution time from 8.1ms to 7.4ms for a 9% speedup (51x overall).&lt;&#x2F;p&gt;
&lt;p&gt;I decided not to keep this implementation because it requires a Nightly compiler and it would require supporting different architectures (I have an Apple Silicon laptop on the way).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cachegrind&quot;&gt;Cachegrind&lt;a class=&quot;zola-anchor&quot; href=&quot;#cachegrind&quot; aria-label=&quot;Anchor link for: cachegrind&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I wondered if there was anything egregiously cache-inefficient, so I decided to try running a program under &lt;a href=&quot;https:&#x2F;&#x2F;valgrind.org&#x2F;docs&#x2F;manual&#x2F;cg-manual.html&quot;&gt;Cachegrind&lt;&#x2F;a&gt;. Cachegrind essentially doesn&#x27;t support macOS so I put together a Docker container for doing this analysis:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; rust:latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install build-time dependencies, remove cruft afterwards
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;apt-get update &amp;amp;&amp;amp; apt-get install -y valgrind libopenblas-dev gfortran python3 python3-pip &amp;amp;&amp;amp; rm -rf &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;python3 -m pip install --user numpy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Cache the Rust dependencies so they don&amp;#39;t download on every recompile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;ham2spec
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; Cargo.toml .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;mkdir src &amp;amp;&amp;amp; touch src&#x2F;lib.rs &amp;amp;&amp;amp; cargo vendor
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Copy the code over
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; src&#x2F; .&#x2F;src&#x2F; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;COPY&lt;&#x2F;span&gt;&lt;span&gt; examples&#x2F; .&#x2F;examples&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Compile the example
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;RUSTFLAGS=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-C force-frame-pointers=y&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; cargo build --example multiple_broadened_spectra --release
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I build and run the container:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ docker build -t rust-cachegrind:latest .
&lt;&#x2F;span&gt;&lt;span&gt;$ docker run -it -v &amp;quot;$PWD&#x2F;cgout&amp;quot;:&#x2F;out rust-cachegrind:latest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;then run Cachegrind from inside the container:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ valgrind --tool=cachegrind target&#x2F;release&#x2F;examples&#x2F;multiple_broadened_spectra
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Unfortunately this didn&#x27;t reveal anything egregious, which is the only thing that would jump out at me since I&#x27;ve never used Cachegrind before.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;a class=&quot;zola-anchor&quot; href=&quot;#wrapping-up&quot; aria-label=&quot;Anchor link for: wrapping-up&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I didn&#x27;t get an overall speedup of 100x like I wanted, but I did get ~50x, and that&#x27;s not nothing.&lt;&#x2F;p&gt;
&lt;p&gt;One thing that became abundantly clear to me is that being able to intuitively read assembly would help me take my understanding of my code to the next level. Another thing that became clear is that although I&#x27;m aware of a variety of tools at my disposal (Cachegrind, perf, lldb, etc), I&#x27;m not always sure how to get the most out of them. This will come with experience, so I&#x27;ll keep looking for excuses to do this kind of thing.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s all for now. If you have hints, guidance, or feedback, feel free to chime in! You can find my email address in the About page.&lt;&#x2F;p&gt;
&lt;p&gt;Update: After my laptop arrived my speedup jumped to 250x with no changes in the code. Thanks Moore&#x27;s Law!&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Using notifiers to give yourself the day off</title>
          <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/lazy-grad-student/</link>
          <guid>https://tinkering.xyz/lazy-grad-student/</guid>
          <description xml:base="https://tinkering.xyz/lazy-grad-student/">&lt;p&gt;In keeping with the title, this will be a short post.&lt;&#x2F;p&gt;
&lt;p&gt;The experiments that I do take roughly 2 hours each. The program that runs the experiments is written in Python and uses the &lt;a href=&quot;https:&#x2F;&#x2F;click.palletsprojects.com&#x2F;en&#x2F;7.x&#x2F;&quot;&gt;click&lt;&#x2F;a&gt; module for the command line interface. &lt;code&gt;click&lt;&#x2F;code&gt; provides an easy to use &lt;a href=&quot;https:&#x2F;&#x2F;click.palletsprojects.com&#x2F;en&#x2F;7.x&#x2F;utils&#x2F;#showing-progress-bars&quot;&gt;progress bar&lt;&#x2F;a&gt;, so I have some visual indicator of how the experiment is progressing and some estimate of when it will complete.&lt;&#x2F;p&gt;
&lt;p&gt;If I know roughly how long the experiment is going to take, that means I can walk away while the experiment runs, right? Well, no. My samples degrade with increased laser exposure, so I&#x27;d like to minimize the time spent blasting my sample while not collecting data. However, I don&#x27;t really want to sit in front of the computer the whole time or get up to check on the experiment every 5 minutes. What is a lazy grad student to do?&lt;&#x2F;p&gt;
&lt;p&gt;Enter the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;liiight&#x2F;notifiers&quot;&gt;notifiers&lt;&#x2F;a&gt; module.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;notifiers&quot;&gt;Notifiers&lt;a class=&quot;zola-anchor&quot; href=&quot;#notifiers&quot; aria-label=&quot;Anchor link for: notifiers&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;notifiers&lt;&#x2F;code&gt; module is a front-end for providing alerts through a variety of channels e.g. email, chat services, sms, etc. I&#x27;m chronically attached to my phone, so a text message is likely to catch my attention. Fortunately, &lt;code&gt;notifiers&lt;&#x2F;code&gt; has a Twilio integration.&lt;&#x2F;p&gt;
&lt;p&gt;Getting started with Twilio is pretty easy. After creating an account I was given a bunch of trial credit (~$15). Sending a text message with Twilio costs $0.0075, so you can send ~133 messages for $1. If I run enough experiments to blow through my trial credit, something has gone terribly wrong with my PhD. I also needed to create a Twilio number, which is the number that the text messages will be coming from. This costs $1&#x2F;month, which is in my budget even as a grad student.&lt;&#x2F;p&gt;
&lt;p&gt;Sending a notification (text message in this case) is as easy as calling the &lt;code&gt;notify()&lt;&#x2F;code&gt; function for whatever notification provider you&#x27;re interested in. You can also set some of the arguments to the &lt;code&gt;notify()&lt;&#x2F;code&gt; call via environment variables so that you don&#x27;t have to store your account details and phone numbers in git for the world to see.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;NOTIFIERS_TWILIO_ACCOUNT_SID=&amp;quot;my_account_sid&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;NOTIFIERS_TWILIO_AUTH_TOKEN=&amp;quot;my_auth_token&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;NOTIFIERS_TWILIO_TO=&amp;quot;my_phone_number&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;NOTIFIERS_TWILIO_FROM=&amp;quot;my_twilio_number&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At this point sending a text message is trivial:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;twilio = notifiers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_notifier&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;twilio&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;twilio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Experiment complete&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now I can run experiments without having to monitor them and it took a whopping 3 lines of code (&lt;code&gt;import notifiers&lt;&#x2F;code&gt; is the third one). That&#x27;s pretty awesome if you ask me. I could see myself adding period status updates, but I&#x27;m not sure how much I want to spam my phone. In the end I&#x27;m pretty happy with both &lt;code&gt;notifiers&lt;&#x2F;code&gt; and Twilio, and I&#x27;ll probably find an excuse to use them in the future.&lt;&#x2F;p&gt;
&lt;p&gt;You may be wondering why I&#x27;m using the entire &lt;code&gt;notifiers&lt;&#x2F;code&gt; package if I&#x27;m only using the Twilio provider. The answer is that there&#x27;s not really a good reason, but the ability to scale from text messages with Twilio to entire email reports based on experiment results is an interesting possibility.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Interacting with Assembly in Rust</title>
          <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/interacting-with-assembly-in-rust/</link>
          <guid>https://tinkering.xyz/interacting-with-assembly-in-rust/</guid>
          <description xml:base="https://tinkering.xyz/interacting-with-assembly-in-rust/">&lt;p&gt;Note: I originally wrote this article for LogRocket. You can find the original &lt;a href=&quot;https:&#x2F;&#x2F;blog.logrocket.com&#x2F;interacting-with-assembly-in-rust&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For many Rust developers the process of producing a binary from their Rust code is a straightforward process which doesn’t require much thought. However, modern compilers are complicated programs in and of themselves, and may yield binaries that perform very differently in response to a minor change in the source code. In diagnosing performance issues like this, inspecting the output of the compiler can be helpful. The Rust compiler is able to emit various types of output, one of which is assembly. Rust also has facilities for embedding assembly. In this article you’ll learn about tools provided by the language and the community for extracting and embedding assembly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;viewing-assembly&quot;&gt;Viewing assembly&lt;a class=&quot;zola-anchor&quot; href=&quot;#viewing-assembly&quot; aria-label=&quot;Anchor link for: viewing-assembly&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To view the assembly output of various tools we’ll use the following example program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NAMES&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;] = [
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Kaladin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Teft&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Drehy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Skar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Rock&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sigzil&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Moash&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Leyten&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Lopen&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hobber&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;roll_call&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;roll_call&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SOUND OFF&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; name in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NAMES&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: HERE!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, name);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; num_present = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NAMES&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;All &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; accounted for!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, num_present);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;rustc&quot;&gt;rustc&lt;a class=&quot;zola-anchor&quot; href=&quot;#rustc&quot; aria-label=&quot;Anchor link for: rustc&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The quickest and easiest way to generate assembly is with the compiler itself. This method doesn’t require installing any additional tools, but the output can be difficult to navigate. &lt;code&gt;rustc&lt;&#x2F;code&gt; can emit assembly with the &lt;code&gt;--emit asm&lt;&#x2F;code&gt;  option (documentation). To format the output with Intel syntax (instead of the default AT&amp;amp;T syntax) you can also pass the &lt;code&gt;-C llvm-args=-x86-asm-syntax=intel&lt;&#x2F;code&gt; option to &lt;code&gt;rustc&lt;&#x2F;code&gt;. However, it’s more common to interact with &lt;code&gt;cargo&lt;&#x2F;code&gt; than with &lt;code&gt;rustc&lt;&#x2F;code&gt; directly. You can pass this option to &lt;code&gt;rustc&lt;&#x2F;code&gt; in one of two ways:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo rustc -- --emit asm -C llvm-args=-x86-asm-syntax=intel
&lt;&#x2F;span&gt;&lt;span&gt;$ RUSTFLAGS=&amp;quot;--emit asm -C llvm-args=-x86-asm-syntax=intel&amp;quot; cargo build
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The assembly will be placed in &lt;code&gt;target&#x2F;debug&#x2F;deps&#x2F;&amp;lt;crate name&amp;gt;-&amp;lt;hash&amp;gt;.s&lt;&#x2F;code&gt; (if compiled in release mode it will be under &lt;code&gt;target&#x2F;release&lt;&#x2F;code&gt;). The assembly file contains all the assembly for the crate and can be hard to navigate.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;godbolt-compiler-explorer&quot;&gt;Godbolt Compiler Explorer&lt;a class=&quot;zola-anchor&quot; href=&quot;#godbolt-compiler-explorer&quot; aria-label=&quot;Anchor link for: godbolt-compiler-explorer&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A simple way to examine short snippets of code is to run it through the Godbolt Compiler Explorer. This tool is a web application, and as such doesn’t require installation of any additional tools. Code entered in the left pane is compiled to assembly and displayed in the right pane. The code entered in the left pane acts like it’s inside of the &lt;code&gt;main&lt;&#x2F;code&gt; function, so you don’t need to enter your own &lt;code&gt;main&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;Sections of the code in the left pane are color coded so that the assembly in the right pane can be easily identified. For example, entering the &lt;code&gt;roll_call&lt;&#x2F;code&gt; function and &lt;code&gt;NAMES&lt;&#x2F;code&gt; array into the left pane displays the following view of the &lt;code&gt;roll_call&lt;&#x2F;code&gt; function.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;roll-call.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We can identify the assembly corresponding to the &lt;code&gt;println!(&quot;SOUND OFF&quot;)&lt;&#x2F;code&gt; macro by right-clicking that line and selecting “Reveal linked code” or by searching for the assembly that’s highlighted in the same color.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;roll-call-asm.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cargo-asm&quot;&gt;cargo-asm&lt;a class=&quot;zola-anchor&quot; href=&quot;#cargo-asm&quot; aria-label=&quot;Anchor link for: cargo-asm&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;cargo-asm&lt;&#x2F;code&gt; is a Cargo subcommand (found here) that displays the assembly for a single function at a time. The beauty of this tool is its ability to resolve symbol names and display the source code interleaved with the corresponding assembly. Note, however, that &lt;code&gt;cargo-asm&lt;&#x2F;code&gt; appears to only work with library crates. Put the &lt;code&gt;NAMES&lt;&#x2F;code&gt; array and &lt;code&gt;roll_call&lt;&#x2F;code&gt; function into a library crate called &lt;code&gt;asm_rust_lib&lt;&#x2F;code&gt; then call &lt;code&gt;cargo-asm&lt;&#x2F;code&gt; as follows (note: the &lt;code&gt;--rust&lt;&#x2F;code&gt; option interleaves the source code as this is not the default).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo asm --rust asm_rust_lib::roll_call
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first few lines of the output should look appear as follows.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;roll-call-rustc-asm.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Rust developers learning assembly may find the ability to compare unfamiliar assembly to the corresponding (familiar) Rust code particularly useful.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;including-assembly&quot;&gt;Including assembly&lt;a class=&quot;zola-anchor&quot; href=&quot;#including-assembly&quot; aria-label=&quot;Anchor link for: including-assembly&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We could always compile assembly into an object file and link that into our binary, but that adds more complexity than we’d like, especially if we only need to include a few lines of assembly. Luckily Rust provides some facilities to make this process easy, especially in simple cases.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;llvm-asm&quot;&gt;llvm_asm!&lt;a class=&quot;zola-anchor&quot; href=&quot;#llvm-asm&quot; aria-label=&quot;Anchor link for: llvm-asm&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Until recently the official method for including inline assembly into Rust code was the &lt;code&gt;asm!&lt;&#x2F;code&gt; macro, and required Rust nightly. This macro was essentially a wrapper around LLVM’s inline assembler directives. This macro has been renamed to &lt;code&gt;llvm_asm!&lt;&#x2F;code&gt; while a new &lt;code&gt;asm!&lt;&#x2F;code&gt; macro is worked on in Rust nightly, but a nightly compiler is still required to use &lt;code&gt;llvm_asm!&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The syntax for the macro is as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;llvm_asm!(assembly template
&lt;&#x2F;span&gt;&lt;span&gt;   : output operands
&lt;&#x2F;span&gt;&lt;span&gt;   : input operands
&lt;&#x2F;span&gt;&lt;span&gt;   : clobbers
&lt;&#x2F;span&gt;&lt;span&gt;   : options
&lt;&#x2F;span&gt;&lt;span&gt;   );
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The “assembly template” section is a template string that contains the assembly. The input and output operands handle how values should cross the Rust&#x2F;assembly boundary. The “clobbers” section lists which registers the assembly may modify to indicate that the compiler shouldn’t rely on values in those registers remaining constant. The “options” section, as you can imagine, contains options, notably the option to use Intel syntax. Each section of the macro requires a specific syntax, so it’s highly recommended to read the documentation for more information.&lt;&#x2F;p&gt;
&lt;p&gt;Note that using the &lt;code&gt;llvm_asm!&lt;&#x2F;code&gt; macro requires an &lt;code&gt;unsafe&lt;&#x2F;code&gt; block since assembly bypasses all of the safety checks normally provided by the compiler.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;asm&quot;&gt;asm!&lt;a class=&quot;zola-anchor&quot; href=&quot;#asm&quot; aria-label=&quot;Anchor link for: asm&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The new &lt;code&gt;asm!&lt;&#x2F;code&gt; macro provides a nicer syntax for using inline assembly than the &lt;code&gt;llvm_asm!&lt;&#x2F;code&gt; macro. An understanding of LLVM inline assembler directives is no longer necessary, and the documentation is extensive compared to that of &lt;code&gt;llvm_asm!&lt;&#x2F;code&gt;. The new syntax is closer to the normal format string syntax used with the &lt;code&gt;println!&lt;&#x2F;code&gt; and &lt;code&gt;format!&lt;&#x2F;code&gt; macros while still allowing the Rust&#x2F;assembly boundary to be crossed with precision. Consider the small program shown below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64 &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;unsafe &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    asm!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;add {0}, {number}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;inout&lt;&#x2F;span&gt;&lt;span&gt;(reg) x, number = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;inout(reg) x&lt;&#x2F;code&gt; statement indicates that the compiler should find a suitable general purpose register, prepare that register with the current value of &lt;code&gt;x&lt;&#x2F;code&gt;, store the output of the &lt;code&gt;add&lt;&#x2F;code&gt; instruction in the same general purpose register, then store the value of that general purpose register in &lt;code&gt;x&lt;&#x2F;code&gt;. The syntax is nice and compact given the complexity of crossing the Rust&#x2F;assembly boundary.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Assembly is a language that many developers don’t use on a daily basis, but it can still be fun and educational to see how code manipulates the CPU directly. A debugger wasn’t mentioned above, but modern debuggers (GDB, LLDB) also allow you to disassemble code and step through it instruction by instruction. Armed with the tools above and a debugger, you should be able to explore the assembly that your code is translated into in a multitude of ways.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Property-based testing in Rust with Proptest</title>
          <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/property-based-testing-with-proptest/</link>
          <guid>https://tinkering.xyz/property-based-testing-with-proptest/</guid>
          <description xml:base="https://tinkering.xyz/property-based-testing-with-proptest/">&lt;p&gt;Note: I originally wrote this article for LogRocket. You can find the original &lt;a href=&quot;https:&#x2F;&#x2F;blog.logrocket.com&#x2F;property-based-testing-in-rust-with-proptest&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Software testing is an industry standard practice, but testing methodologies and techniques vary dramatically in their practicality and effectiveness. Today you’ll learn about property-based testing (PBT) including how it works, when it makes sense, and how to do it in Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-property-based-testing&quot;&gt;What is property-based testing?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-property-based-testing&quot; aria-label=&quot;Anchor link for: what-is-property-based-testing&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;To illustrate how PBT works, let’s first look at a basic unit test. Let’s say that you’ve written a function &lt;code&gt;maybe_works&lt;&#x2F;code&gt; that you want to compare against a function that you know works properly, say &lt;code&gt;definitely_works&lt;&#x2F;code&gt;. A unit test comparing these two functions for some input &lt;code&gt;input&lt;&#x2F;code&gt; would look like the test below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_maybe_works&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input = ...;
&lt;&#x2F;span&gt;&lt;span&gt;    assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;maybe_works&lt;&#x2F;span&gt;&lt;span&gt;(input), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;definitely_works&lt;&#x2F;span&gt;&lt;span&gt;(input));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That test was very easy to write, but there are some issues to be aware of. One issue is that you need to know which exact inputs to use in your tests that will alert you to the presence of bugs. Another issue is that this becomes tedious when you want to test &lt;code&gt;maybe_works&lt;&#x2F;code&gt; against &lt;code&gt;definitely_works&lt;&#x2F;code&gt; for a variety of inputs.&lt;&#x2F;p&gt;
&lt;p&gt;A more efficient way to test &lt;code&gt;maybe_works&lt;&#x2F;code&gt; against &lt;code&gt;definitely_works&lt;&#x2F;code&gt; would be to run the test several times with a variety of randomly generated inputs. With these randomly generated inputs you don’t know the precise value being supplied to &lt;code&gt;maybe_works&lt;&#x2F;code&gt; or &lt;code&gt;definitely_works&lt;&#x2F;code&gt;, but you can often make a general statement such as “the outputs of &lt;code&gt;maybe_works&lt;&#x2F;code&gt; and &lt;code&gt;definitely_works&lt;&#x2F;code&gt; should be the same given the same input.” In practice the “randomly generated inputs” are rarely truly random. You typically constrain the inputs somehow so that you can target a certain piece of code and avoid false positives or negatives.&lt;&#x2F;p&gt;
&lt;p&gt;It’s common, however, not to have a reference implementation such as &lt;code&gt;definitely_works&lt;&#x2F;code&gt;. In this case you need to think harder and more abstractly about the properties of your code (hence property-based testing) and how you can verify them. Yet another way to use PBT is as a guide in the design of a piece of code. In this article we’re going to use PBT to help us write a parser.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;a class=&quot;zola-anchor&quot; href=&quot;#getting-started&quot; aria-label=&quot;Anchor link for: getting-started&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Create a new &lt;code&gt;cargo&lt;&#x2F;code&gt; project called &lt;code&gt;sentence-parser&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo new --lib sentence-parser
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You’ll use the &lt;code&gt;pest&lt;&#x2F;code&gt; crate to write the parser, so add &lt;code&gt;pest&lt;&#x2F;code&gt; to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pest &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;~2.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pest_derive &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;~2.1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;pest&lt;&#x2F;code&gt; crate generates a parser from a user-defined grammar file, so create a file called &lt;code&gt;sentence.pest&lt;&#x2F;code&gt; and put it in the &lt;code&gt;src&lt;&#x2F;code&gt; directory. Paste the following contents into the file.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;word = { ASCII_ALPHA+ }
&lt;&#x2F;span&gt;&lt;span&gt;WHITESPACE = _{&amp;quot; &amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;pest&lt;&#x2F;code&gt; crate is not the focus of this tutorial, but it’s helpful to have a cursory understanding of this grammar file. Each rule in the file tells &lt;code&gt;pest&lt;&#x2F;code&gt; how to parse a certain type of input. You can use rules within the definition of other rules to eventually build a parser that understands complex input. For a detailed overview of the syntax, see the &lt;code&gt;pest&lt;&#x2F;code&gt; syntax guide.&lt;&#x2F;p&gt;
&lt;p&gt;For simplicity’s sake we’re going to significantly relax the definitions of “word” and “sentence.” We’ll define a “word” as “any sequence of one or more ASCII alphabetical characters.” This means that &lt;code&gt;flkjasdfAQTCcs&lt;&#x2F;code&gt; is a valid word for our purposes.&lt;&#x2F;p&gt;
&lt;p&gt;To create a parser from this file add the following snippet to &lt;code&gt;lib.rs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; pest_derive;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;pest::Parser;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Parser)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grammar &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sentence.pest&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;SentenceParser;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;#[derive(Parser)]&lt;&#x2F;code&gt; and &lt;code&gt;#[grammar =&lt;&#x2F;code&gt; &lt;code&gt;&quot;``sentence.pest``&quot;``]&lt;&#x2F;code&gt; attributes will read the grammar file and generate a parser based on that grammar. This will also generate an enum called &lt;code&gt;Rule&lt;&#x2F;code&gt; which has a variant for each of the rules in the grammar file. When you want to parse the contents of a string, you pass one of the &lt;code&gt;Rule&lt;&#x2F;code&gt; variants to &lt;code&gt;SentenceParser::parse&lt;&#x2F;code&gt; along with the string. We will use this feature to test individual rules in the grammar rather than testing the whole thing at once.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, add &lt;code&gt;proptest&lt;&#x2F;code&gt; to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[dev-dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proptest &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;~0.9&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;using-proptest&quot;&gt;Using &lt;code&gt;proptest&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#using-proptest&quot; aria-label=&quot;Anchor link for: using-proptest&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Doing PBT with &lt;code&gt;proptest&lt;&#x2F;code&gt; can look mostly the same as writing normal tests. There are two major differences which I’ll illustrate with the snippet below.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;tests {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span&gt;::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;a_normal_test&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        ...
&lt;&#x2F;span&gt;&lt;span&gt;        assert!(...)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    proptest!{
&lt;&#x2F;span&gt;&lt;span&gt;        #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;a_property_based_test&lt;&#x2F;span&gt;&lt;span&gt;(foo in some_strategy()) {
&lt;&#x2F;span&gt;&lt;span&gt;            ...
&lt;&#x2F;span&gt;&lt;span&gt;            prop_assert!(...)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first thing to note is that you can mix PBT with normal unit tests; PBT isn’t all or nothing. Next, note that your property-based tests must be wrapped in the &lt;code&gt;proptest!&lt;&#x2F;code&gt; macro. Another point of note is that &lt;code&gt;prop_assert!&lt;&#x2F;code&gt; is used in place of &lt;code&gt;assert!&lt;&#x2F;code&gt;. The &lt;code&gt;proptest&lt;&#x2F;code&gt; test runner will attempt to find a minimal failing input by causing the test to fail with simpler and simpler inputs. Using the &lt;code&gt;prop_assert!&lt;&#x2F;code&gt; and &lt;code&gt;prop_assert_eq!&lt;&#x2F;code&gt; macros will cause the test failure message (panic message) to be printed only for the minimal failing input rather than multiple times for a single test. Finally, notice that the function arguments to the property-based test are of the form &lt;code&gt;argname in strategy&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Conceptually, a “strategy” is a way of generating instances of a type, possibly with some constraints. More concretely, a strategy is a type that implements the &lt;code&gt;Strategy&lt;&#x2F;code&gt; trait. In addition, implementing the &lt;code&gt;Arbitrary&lt;&#x2F;code&gt; trait defines the default or main strategy for a type. This &lt;code&gt;Arbitrary&lt;&#x2F;code&gt; implementation will typically be the strategy that generates the widest range of values for the type. The &lt;code&gt;any&amp;lt;T&amp;gt;()&lt;&#x2F;code&gt; function provided by &lt;code&gt;proptest&lt;&#x2F;code&gt; uses this &lt;code&gt;Arbitrary&lt;&#x2F;code&gt; implementation to generate truly arbitrary instances of the type &lt;code&gt;T&lt;&#x2F;code&gt;. If you would like to generate instances that are subject to some constraints, you need to define functions that return &lt;code&gt;impl Strategy&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;proptest&lt;&#x2F;code&gt; crate provides implementations of &lt;code&gt;Arbitrary&lt;&#x2F;code&gt; for a wide variety of Rust primitives and collections. Implementing &lt;code&gt;Arbitrary&lt;&#x2F;code&gt; for your own type is straightforward. The example below is mostly boilerplate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Arbitrary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;T {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Parameters = ();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Strategy = BoxedStrategy&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;arbitrary_with&lt;&#x2F;span&gt;&lt;span&gt;(_: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Parameters) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Strategy {
&lt;&#x2F;span&gt;&lt;span&gt;        ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only piece that really requires thought on your part is the &lt;code&gt;…&lt;&#x2F;code&gt;, which defines how to generate the values. You may parameterize how the strategy generates values using the &lt;code&gt;Parameters&lt;&#x2F;code&gt; type definition. In most cases this isn’t necessary, so define it as &lt;code&gt;()&lt;&#x2F;code&gt;. The concrete type of the strategy returned by &lt;code&gt;arbitrary_with&lt;&#x2F;code&gt; is defined by the &lt;code&gt;Strategy&lt;&#x2F;code&gt; type definition. You may declare a specific type, or you may choose the simplest route and return a trait object via the &lt;code&gt;BoxedStrategy&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;p&gt;The strategy defined by the &lt;code&gt;Arbitrary&lt;&#x2F;code&gt; trait may generate values that are too general for some scenario, or you may simply want to define more than one strategy for a given type. In either case you will want to write a function that returns a strategy.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_strategy&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Both methods above share some common patterns represented by &lt;code&gt;…&lt;&#x2F;code&gt;. The Transforming Strategies section of the &lt;code&gt;proptest&lt;&#x2F;code&gt; book illustrates how this is done in great detail, but we’ll discuss it briefly since it’s such a common practice when using &lt;code&gt;proptest&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;strategies&quot;&gt;Strategies&lt;a class=&quot;zola-anchor&quot; href=&quot;#strategies&quot; aria-label=&quot;Anchor link for: strategies&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;code&gt;proptest&lt;&#x2F;code&gt; crate comes with several built-in strategies, namely &lt;code&gt;any&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, the &lt;code&gt;proptest::collection&lt;&#x2F;code&gt; module, &lt;code&gt;proptest::string::string_regex&lt;&#x2F;code&gt;, and a variety of others. In addition, tuples and arrays of strategies are themselves strategies. This means that you can generate a tuple of values where each value is drawn from a different strategy, then apply methods from the &lt;code&gt;Strategy&lt;&#x2F;code&gt; trait and turn the tuple’s elements into another type.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;strategy-prop-map&quot;&gt;&lt;code&gt;Strategy::prop_map&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#strategy-prop-map&quot; aria-label=&quot;Anchor link for: strategy-prop-map&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;prop_map&lt;&#x2F;code&gt; method allows you to transform the values generated by a strategy and transform them into a new type. This is one of the primary methods you’ll use to build up a custom type from primitives or other types. The example below illustrates how you can generate a struct by transforming a tuple of primitive types.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Point {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;point_strat&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = Point&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    (any&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;::(), any&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;::()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;        Point {
&lt;&#x2F;span&gt;&lt;span&gt;            x: x,
&lt;&#x2F;span&gt;&lt;span&gt;            y: y
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In short, a strategy produces a random value and &lt;code&gt;prop_map&lt;&#x2F;code&gt; uses that random value to compute a different value.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;strategy-prop-filter&quot;&gt;&lt;code&gt;Strategy::prop_filter&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#strategy-prop-filter&quot; aria-label=&quot;Anchor link for: strategy-prop-filter&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;prop_filter&lt;&#x2F;code&gt; methods lets you constrain the values produced by one strategy by filtering with a predicate. The function below returns a strategy that generates &lt;code&gt;u8&lt;&#x2F;code&gt;s that are greater than 100.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;u8_greater_than_100&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    any::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_filter&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reason for filtering&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, |&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x &amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;strategy-prop-flat-map&quot;&gt;&lt;code&gt;Strategy::prop_flat_map&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#strategy-prop-flat-map&quot; aria-label=&quot;Anchor link for: strategy-prop-flat-map&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Sometimes you want to generate values that depend on each other somehow. This is a scenario in which you’ll want to reach for the &lt;code&gt;prop_flat_map&lt;&#x2F;code&gt; method. When called on a strategy, the &lt;code&gt;prop_flat_map&lt;&#x2F;code&gt; method takes a random value from that strategy and uses it to produce another strategy. Note the difference between &lt;code&gt;prop_map&lt;&#x2F;code&gt; and &lt;code&gt;prop_flat_map&lt;&#x2F;code&gt;. With &lt;code&gt;prop_map&lt;&#x2F;code&gt; a value from a strategy is used to produce a new value, whereas with &lt;code&gt;prop_flat_map&lt;&#x2F;code&gt; a value from a strategy is used to produce a new strategy. The canonical example use case from the &lt;code&gt;proptest&lt;&#x2F;code&gt; documentation is a strategy that produces a &lt;code&gt;Vec&lt;&#x2F;code&gt; and a random valid index into that &lt;code&gt;Vec&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;vec_and_index&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = (Vec&amp;lt;String&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    prop::collection::vec(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_flat_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vec&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; len = vec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            (Just(vec), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..len)
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;just&quot;&gt;&lt;code&gt;Just&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#just&quot; aria-label=&quot;Anchor link for: just&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This type creates a strategy that always returns the same value. One use case is shown in the &lt;code&gt;prop_flat_map&lt;&#x2F;code&gt; example above. Another use case is with the &lt;code&gt;prop_oneof!&lt;&#x2F;code&gt; macro.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;prop-oneof&quot;&gt;&lt;code&gt;prop_oneof!&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#prop-oneof&quot; aria-label=&quot;Anchor link for: prop-oneof&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;This macro creates a strategy that produces values from a list of strategies. The most common use case is generating enum variants.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;MyEnum {
&lt;&#x2F;span&gt;&lt;span&gt;    Foo,
&lt;&#x2F;span&gt;&lt;span&gt;    Bar,
&lt;&#x2F;span&gt;&lt;span&gt;    Baz,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;myenum_strategy&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = MyEnum&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    prop_oneof![
&lt;&#x2F;span&gt;&lt;span&gt;        Just(MyEnum::Foo),
&lt;&#x2F;span&gt;&lt;span&gt;        Just(MyEnum::Bar),
&lt;&#x2F;span&gt;&lt;span&gt;        Just(MyEnum::Baz),
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that you must supply a list of strategies, not a list of values. This is why you must wrap the enum variants in &lt;code&gt;Just&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writing-the-parser&quot;&gt;Writing the parser&lt;a class=&quot;zola-anchor&quot; href=&quot;#writing-the-parser&quot; aria-label=&quot;Anchor link for: writing-the-parser&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now that you know some common &lt;code&gt;proptest&lt;&#x2F;code&gt; patterns you can get down to the business of writing and testing a parser.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;word&quot;&gt;Word&lt;a class=&quot;zola-anchor&quot; href=&quot;#word&quot; aria-label=&quot;Anchor link for: word&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Create a &lt;code&gt;proptest!&lt;&#x2F;code&gt; block in the &lt;code&gt;test&lt;&#x2F;code&gt; module. First we’ll create a function called &lt;code&gt;valid_word&lt;&#x2F;code&gt; that returns a strategy that produces, you guessed it, a valid word.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;test {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span&gt;::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    proptest!{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;valid_word&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            proptest::string::string_regex(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[a-zA-Z]+&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parses_valid_word&lt;&#x2F;span&gt;&lt;span&gt;(w in valid_word()) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::word, w.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;proptest::string::string_regex&lt;&#x2F;code&gt; function returns a strategy that produces strings that match the provided regular expression. In this case that’s a sequence of one or more ASCII letters. You could have used the shorthand &lt;code&gt;w in&lt;&#x2F;code&gt; &lt;code&gt;&quot;``[a-zA-Z]+``&quot;&lt;&#x2F;code&gt; to accomplish the same thing, but I find that writing the strategy as a function allows you to give a descriptive name to the regular expression. Note that in &lt;code&gt;_ in valid_word()&lt;&#x2F;code&gt; the &lt;code&gt;_&lt;&#x2F;code&gt; defines the name of the value produced by the strategy so that you can use it in the body of your test.&lt;&#x2F;p&gt;
&lt;p&gt;The test attempts to parse the generated word using the rule &lt;code&gt;Rule::word&lt;&#x2F;code&gt;. If you run &lt;code&gt;cargo test&lt;&#x2F;code&gt; you should see that your test passes (along with other compilation statements).&lt;&#x2F;p&gt;
&lt;p&gt;Tests that pass when fed valid inputs are important, but tests that detect errors when your code is fed invalid inputs are equally important. This time you’ll create a test that feeds non-letter characters to the parser as well as strings of length zero. Create another test that looks like this.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invalid_word&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    proptest::string::string_regex(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[^a-zA-Z]*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rejects_invalid_word&lt;&#x2F;span&gt;&lt;span&gt;(w in invalid_word()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::word, w.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run the test suite again and see that the tests pass.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;words&quot;&gt;Words&lt;a class=&quot;zola-anchor&quot; href=&quot;#words&quot; aria-label=&quot;Anchor link for: words&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Now create a &lt;code&gt;words&lt;&#x2F;code&gt; rule that looks like this.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;words = { word+ }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This rule will match sequences of &lt;code&gt;word&lt;&#x2F;code&gt;s joined by spaces. We’ll follow the same pattern as before to test whether we’ve created a good rule. First create a test that attempts to parse valid input. Note that this time we’ll use &lt;code&gt;Rule::words&lt;&#x2F;code&gt; instead of &lt;code&gt;Rule::word&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    proptest::string::string_regex(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[a-z]+( [a-z]+)*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parses_valid_words&lt;&#x2F;span&gt;&lt;span&gt;(ws in words()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::words, ws.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run the test to make sure everything works.&lt;&#x2F;p&gt;
&lt;p&gt;Next we’ll create a test that attempts to parse invalid input, but first we need to decide what that invalid input should look like. We already know that we can parse a &lt;code&gt;word&lt;&#x2F;code&gt; properly, so let’s test whether the &lt;code&gt;words&lt;&#x2F;code&gt; rule can parse zero &lt;code&gt;word&lt;&#x2F;code&gt;s and whether it can parse &lt;code&gt;word&lt;&#x2F;code&gt;s separated by characters other than spaces. You don’t need a property-based test for the empty string, so go ahead and create the following test inside the &lt;code&gt;test&lt;&#x2F;code&gt; module, but outside the &lt;code&gt;proptest!&lt;&#x2F;code&gt; block.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;words_rejects_empty_string&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::words, &amp;quot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What’s left is to test what happens when we have characters other than just a space between &lt;code&gt;word&lt;&#x2F;code&gt;s such as &lt;code&gt;\t&lt;&#x2F;code&gt;, &lt;code&gt;\r&lt;&#x2F;code&gt;, and &lt;code&gt;\n&lt;&#x2F;code&gt;. Unfortunately, supplying an input string like this and expecting parsing to fail doesn’t work. Consider the string &lt;code&gt;&quot;``a\tb``&quot;&lt;&#x2F;code&gt;. The issue is that &lt;code&gt;\t&lt;&#x2F;code&gt; isn’t a valid character that can appear in a &lt;code&gt;word&lt;&#x2F;code&gt;, so the parser stops consuming characters at &lt;code&gt;\t&lt;&#x2F;code&gt;, having only consumed the &lt;code&gt;a&lt;&#x2F;code&gt;. However, &lt;code&gt;a&lt;&#x2F;code&gt; matches the &lt;code&gt;word&lt;&#x2F;code&gt;, which matches &lt;code&gt;words&lt;&#x2F;code&gt; (“at least one &lt;code&gt;word&lt;&#x2F;code&gt;&quot;). So, our string that contains invalid word separators still successfully matches the &lt;code&gt;words&lt;&#x2F;code&gt; rule because &lt;code&gt;words&lt;&#x2F;code&gt; is only matching part of the input. We can rectify this by changing our rule to parse until the end of the input rather than finishing on some minimal prefix of the input that parses successfully.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;words = { word+ ~ EOI }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;EOI&lt;&#x2F;code&gt; rule is provided by &lt;code&gt;pest&lt;&#x2F;code&gt; and represents “end of input.” This solves our problem for now, but it will break things later when we try to parse entire sentences. For now we’ll leave the &lt;code&gt;words&lt;&#x2F;code&gt; rule as is and forego feeding it this kind of invalid input.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enclosed&quot;&gt;Enclosed&lt;a class=&quot;zola-anchor&quot; href=&quot;#enclosed&quot; aria-label=&quot;Anchor link for: enclosed&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Now we’re going to build on the &lt;code&gt;words&lt;&#x2F;code&gt; rule by creating a rule, &lt;code&gt;enclosed&lt;&#x2F;code&gt;, that simply wraps a &lt;code&gt;words&lt;&#x2F;code&gt; in some kind of delimiter such as commas or parentheses.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;enclosed = ${
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;(&amp;quot; ~ words ~ &amp;quot;)&amp;quot; |
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;, &amp;quot; ~ words ~ &amp;quot;,&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that this rule begins with &lt;code&gt;$&lt;&#x2F;code&gt;, which indicates that we don’t want &lt;code&gt;~&lt;&#x2F;code&gt; to implicitly gobble up whitespace. We want this because &lt;code&gt;(foo bar)&lt;&#x2F;code&gt; is valid, but &lt;code&gt;( foo bar )&lt;&#x2F;code&gt; is not.&lt;&#x2F;p&gt;
&lt;p&gt;To test this rule we’re going generate more complex inputs from strategies that we’ll define. First, we’ll create a strategy that generates a string that can be parsed by the &lt;code&gt;enclosed&lt;&#x2F;code&gt; rule. To do this we need a way of generating matching delimiters. In your &lt;code&gt;tests&lt;&#x2F;code&gt; module, create the following type.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, PartialEq, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;EnclosedDelimiter {
&lt;&#x2F;span&gt;&lt;span&gt;    OpenParen,
&lt;&#x2F;span&gt;&lt;span&gt;    CloseParen,
&lt;&#x2F;span&gt;&lt;span&gt;    OpenComma,
&lt;&#x2F;span&gt;&lt;span&gt;    CloseComma,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we’ll create a method that converts the various enum variants into &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;EnclosedDelimiter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            EnclosedDelimiter::OpenParen =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            EnclosedDelimiter::CloseParen =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            EnclosedDelimiter::OpenComma =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            EnclosedDelimiter::CloseComma =&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now create a function called &lt;code&gt;opening_delimiter&lt;&#x2F;code&gt;. This function will only generate valid opening delimiters.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;opening_delimiter&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = EnclosedDelimiter&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    prop_oneof![
&lt;&#x2F;span&gt;&lt;span&gt;        Just(EnclosedDelimiter::OpenParen),
&lt;&#x2F;span&gt;&lt;span&gt;        Just(EnclosedDelimiter::OpenComma)
&lt;&#x2F;span&gt;&lt;span&gt;    ].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;boxed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now create a function called &lt;code&gt;valid_enclosed&lt;&#x2F;code&gt;. This function will return a strategy that only generates strings that the &lt;code&gt;enclosed&lt;&#x2F;code&gt; rule can successfully parse by matching the randomly chosen valid opening delimiter with its matching closing delimiter. This is an example of when the &lt;code&gt;prop_flat_map&lt;&#x2F;code&gt; method comes in handy.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;valid_enclosed&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; words_strat = proptest::string::string_regex(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[a-z]+( [a-z]+)*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;opening_delimiter&lt;&#x2F;span&gt;&lt;span&gt;(), words_strat).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_flat_map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; close = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; open {
&lt;&#x2F;span&gt;&lt;span&gt;            EnclosedDelimiter::OpenParen =&amp;gt; Just(EnclosedDelimiter::CloseParen),
&lt;&#x2F;span&gt;&lt;span&gt;            EnclosedDelimiter::OpenComma =&amp;gt; Just(EnclosedDelimiter::CloseComma),
&lt;&#x2F;span&gt;&lt;span&gt;            _ =&amp;gt; unreachable!()
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        (Just(open), close, Just(words))
&lt;&#x2F;span&gt;&lt;span&gt;    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; enclosed = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;        enclosed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(open.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        enclosed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(words.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        enclosed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(close.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        enclosed
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This strategy begins with an opening delimiter and a valid sequence of words, then uses &lt;code&gt;prop_flat_map&lt;&#x2F;code&gt; to select the valid closing delimiter. Once the delimiters and words have been generated they are combined into a &lt;code&gt;String&lt;&#x2F;code&gt;. The &lt;code&gt;_ =&amp;gt; unreachable!()&lt;&#x2F;code&gt; line is included because &lt;code&gt;match&lt;&#x2F;code&gt; must be exhaustive and we know that &lt;code&gt;opening_delimiter&lt;&#x2F;code&gt; can’t generate either of the closing delimiters.&lt;&#x2F;p&gt;
&lt;p&gt;Now write the &lt;code&gt;parses_valid_enclosed&lt;&#x2F;code&gt; test and make sure it works.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parses_valid_enclosed&lt;&#x2F;span&gt;&lt;span&gt;(enc in valid_enclosed()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::enclosed, enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uh oh, this test fails! The minimal failing input in this case is &lt;code&gt;(a a)&lt;&#x2F;code&gt;. The reason may not be obvious unless you’re familiar with &lt;code&gt;pest&lt;&#x2F;code&gt;, but it has to do with how whitespace is handled. Remember that the &lt;code&gt;enclosed&lt;&#x2F;code&gt; rule began with &lt;code&gt;$&lt;&#x2F;code&gt;. A rule that starts with &lt;code&gt;@&lt;&#x2F;code&gt; or &lt;code&gt;$&lt;&#x2F;code&gt; is called “atomic” and will not implicitly consume whitespace between tokens, and this property cascades to sub-rules within the current rule. In this case, &lt;code&gt;enclosed&lt;&#x2F;code&gt; references the &lt;code&gt;words&lt;&#x2F;code&gt; rule, which changes how &lt;code&gt;words&lt;&#x2F;code&gt; matches whitespace in the context of the &lt;code&gt;enclosed&lt;&#x2F;code&gt; rule. All we need to do is put a &lt;code&gt;!&lt;&#x2F;code&gt; in front of the &lt;code&gt;words&lt;&#x2F;code&gt; rule to prevent this cascade. The new rules should look like this.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;word = { ASCII_ALPHA+ }
&lt;&#x2F;span&gt;&lt;span&gt;words = !{ word+ }
&lt;&#x2F;span&gt;&lt;span&gt;enclosed = ${
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;(&amp;quot; ~ words ~ &amp;quot;)&amp;quot; |
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;, &amp;quot; ~ words ~ &amp;quot;,&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;WHITESPACE = _{&amp;quot; &amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The tests should all pass now.&lt;&#x2F;p&gt;
&lt;p&gt;The next task is to generate invalid strings for the &lt;code&gt;enclosed&lt;&#x2F;code&gt; rule. Now the opening delimiter may be any of the delimiters, and the closing delimiter will be explicitly chosen not to match the opening delimiter.&lt;&#x2F;p&gt;
&lt;p&gt;First we’ll implement the &lt;code&gt;Arbitrary&lt;&#x2F;code&gt; trait so that we can generate randomly selected instances of &lt;code&gt;EnclosedDelimiter&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Arbitrary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;EnclosedDelimiter {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Parameters = ();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Strategy = BoxedStrategy&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;arbitrary_with&lt;&#x2F;span&gt;&lt;span&gt;(_: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Parameters) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Strategy {
&lt;&#x2F;span&gt;&lt;span&gt;        prop_oneof![
&lt;&#x2F;span&gt;&lt;span&gt;            Just(EnclosedDelimiter::OpenParen),
&lt;&#x2F;span&gt;&lt;span&gt;            Just(EnclosedDelimiter::CloseParen),
&lt;&#x2F;span&gt;&lt;span&gt;            Just(EnclosedDelimiter::OpenComma),
&lt;&#x2F;span&gt;&lt;span&gt;            Just(EnclosedDelimiter::CloseComma),
&lt;&#x2F;span&gt;&lt;span&gt;        ].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;boxed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now create the function that intentionally mismatches the delimiters.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invalid_enclosed&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; words_strat = proptest::string::string_regex(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[a-z]+( [a-z]+)*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    (any::&amp;lt;EnclosedDelimiter&amp;gt;(), words_strat).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_flat_map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; close = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; open {
&lt;&#x2F;span&gt;&lt;span&gt;            EnclosedDelimiter::OpenParen =&amp;gt; prop_oneof![
&lt;&#x2F;span&gt;&lt;span&gt;                Just(EnclosedDelimiter::OpenParen),
&lt;&#x2F;span&gt;&lt;span&gt;                Just(EnclosedDelimiter::OpenComma),
&lt;&#x2F;span&gt;&lt;span&gt;                Just(EnclosedDelimiter::CloseComma)
&lt;&#x2F;span&gt;&lt;span&gt;            ].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;boxed&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            EnclosedDelimiter::CloseParen =&amp;gt; any::&amp;lt;EnclosedDelimiter&amp;gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            EnclosedDelimiter::OpenComma =&amp;gt; prop_oneof![
&lt;&#x2F;span&gt;&lt;span&gt;                Just(EnclosedDelimiter::OpenParen),
&lt;&#x2F;span&gt;&lt;span&gt;                Just(EnclosedDelimiter::CloseParen),
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Just(EnclosedDelimiter::OpenComma),
&lt;&#x2F;span&gt;&lt;span&gt;            ].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;boxed&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            EnclosedDelimiter::CloseComma =&amp;gt; any::&amp;lt;EnclosedDelimiter&amp;gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        (Just(open), close, Just(words))
&lt;&#x2F;span&gt;&lt;span&gt;    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; enc = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;        enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(open.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(words.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(close.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        enc
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You’ll notice that one of the lines is commented out. If you uncomment this line you’ll see that the test fails because it successfully parses what is supposed to be invalid input. The string representation of the &lt;code&gt;OpenComma&lt;&#x2F;code&gt; variant ends with a space, so the parser sees &lt;code&gt;foo,&lt;&#x2F;code&gt;  as &lt;code&gt;foo&lt;&#x2F;code&gt;, followed by &lt;code&gt;CloseComma&lt;&#x2F;code&gt;, followed by  ``. This means that an &lt;code&gt;OpenComma&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;OpenComma&lt;&#x2F;code&gt; pair can accidentally be parsed as &lt;code&gt;OpenComma&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;CloseComma&lt;&#x2F;code&gt; and no error will be generated. This error will be addressed by a later rule so we’ll skip testing it in this rule. This is what the test looks like.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rejects_mismatched_enclosed_delimiters&lt;&#x2F;span&gt;&lt;span&gt;(enc in invalid_enclosed()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::enclosed, enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can make another test that simply leaves off the closing delimiter.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;missing_closing_delimiter&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    (any::&amp;lt;EnclosedDelimiter&amp;gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;words&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ws&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; enc = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;        enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(open.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(ws.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        enc
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rejects_missing_closing_delimiter&lt;&#x2F;span&gt;&lt;span&gt;(enc in missing_closing_delimiter()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::enclosed, enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run the tests again and verify that they all still pass.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;chunk&quot;&gt;Chunk&lt;a class=&quot;zola-anchor&quot; href=&quot;#chunk&quot; aria-label=&quot;Anchor link for: chunk&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;words&lt;&#x2F;code&gt; and &lt;code&gt;enclosed&lt;&#x2F;code&gt; rules are similar in the sense that they both represent sequences of words. To encode this similarity we’ll make a &lt;code&gt;chunk&lt;&#x2F;code&gt; rule that matches either &lt;code&gt;words&lt;&#x2F;code&gt; or &lt;code&gt;enclosed&lt;&#x2F;code&gt; so that we can represent a sequence of words, some of which may be enclosed in delimiters, as a sequence of &lt;code&gt;chunk&lt;&#x2F;code&gt;s.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;chunk = ${ words | enclosed }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fortunately we’ve already written strategies for &lt;code&gt;words&lt;&#x2F;code&gt;  and &lt;code&gt;enclosed&lt;&#x2F;code&gt; so we can skip straight to writing tests for this rule.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parses_valid_words_chunk&lt;&#x2F;span&gt;&lt;span&gt;(ws in words()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::chunk, ws.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parses_valid_enclosed_chunk&lt;&#x2F;span&gt;&lt;span&gt;(enc in valid_enclosed()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::chunk, enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rejects_mismatched_delim_chunk&lt;&#x2F;span&gt;&lt;span&gt;(enc in invalid_enclosed()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::chunk, enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rejects_missing_delim_chunk&lt;&#x2F;span&gt;&lt;span&gt;(enc in missing_closing_delimiter()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::chunk, enc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run the tests to make sure they all pass.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;punctuation&quot;&gt;Punctuation&lt;a class=&quot;zola-anchor&quot; href=&quot;#punctuation&quot; aria-label=&quot;Anchor link for: punctuation&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Sentences end with punctuation, so next we’ll create a rule that matches punctuation.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;punctuation = { &amp;quot;.&amp;quot; | &amp;quot;!&amp;quot; | &amp;quot;?&amp;quot; }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a relatively simple rule, so the strategies are also simple. A valid punctuation character is either &lt;code&gt;.&lt;&#x2F;code&gt;, &lt;code&gt;!&lt;&#x2F;code&gt;, or &lt;code&gt;?&lt;&#x2F;code&gt;, and anything else is an invalid punctuation character.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;punctuation&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    prop_oneof![
&lt;&#x2F;span&gt;&lt;span&gt;        Just(String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;        Just(String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;        Just(String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;invalid_punctuation&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    proptest::string::string_regex(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;?!]&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parses_valid_punctuation&lt;&#x2F;span&gt;&lt;span&gt;(s in punctuation()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::punctuation, s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rejects_invalid_punctuation&lt;&#x2F;span&gt;&lt;span&gt;(s in invalid_punctuation()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::punctuation, s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These tests should pass without any trouble.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sentence&quot;&gt;Sentence&lt;a class=&quot;zola-anchor&quot; href=&quot;#sentence&quot; aria-label=&quot;Anchor link for: sentence&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;We’re almost done! It’s finally time to put it all together into a &lt;code&gt;sentence&lt;&#x2F;code&gt; rule.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sentence = ${ SOI ~ chunk+ ~ punctuation ~ EOI }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;SOI&lt;&#x2F;code&gt; and &lt;code&gt;EOI&lt;&#x2F;code&gt; in this rule make sure that the entire input is parsed so that inputs like &lt;code&gt;a b c.def&lt;&#x2F;code&gt; aren’t valid sentences.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll begin with the most basic type of valid sentence: one or more &lt;code&gt;chunk&lt;&#x2F;code&gt;s followed by a valid &lt;code&gt;punctuation&lt;&#x2F;code&gt;. First let’s write a strategy that produces a sequence of &lt;code&gt;chunk&lt;&#x2F;code&gt;s joined by spaces.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;chunks&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    proptest::collection::vec(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chunk&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cs&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        cs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot; &amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now use this &lt;code&gt;chunks&lt;&#x2F;code&gt; strategy to make a &lt;code&gt;valid_sentence&lt;&#x2F;code&gt; strategy.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;valid_sentence&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chunks&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;punctuation&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cs&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;)| {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; sentence = String::new();
&lt;&#x2F;span&gt;&lt;span&gt;        sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(cs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        sentence.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push_str&lt;&#x2F;span&gt;&lt;span&gt;(p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;        sentence
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now write a test that attempts to parse a valid sentence.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parses_valid_sentence&lt;&#x2F;span&gt;&lt;span&gt;(s in valid_sentence()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::sentence, s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run the test to make sure it…wait a minute, this test fails! Notice that the minimal failing input, &lt;code&gt;&quot;(a) a.&quot;&lt;&#x2F;code&gt;, is a valid sentence (by our definition). This means that we must have misinformed the parser how to parse a sentence. After a little bit of investigation you’ll remember that our &lt;code&gt;sentence&lt;&#x2F;code&gt; rule is atomic (it starts with &lt;code&gt;$&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sentence = ${ SOI ~ chunk+ ~ punctuation ~ EOI }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As a reminder, this means that whitespace between rules is not consumed. When our parser tries to parse &lt;code&gt;&quot;(a) a.&quot;&lt;&#x2F;code&gt; what it really sees is &lt;code&gt;&amp;lt;chunk&amp;gt;&amp;lt;whitespace&amp;gt;&amp;lt;chunk&amp;gt;&amp;lt;punctuation&amp;gt;&lt;&#x2F;code&gt;. That &lt;code&gt;&amp;lt;whitespace&amp;gt;&lt;&#x2F;code&gt; doesn’t match the &lt;code&gt;chunk+&lt;&#x2F;code&gt; piece of the &lt;code&gt;sentence&lt;&#x2F;code&gt; rule, so parsing fails. To fix this we’ll need to handle whitespace manually where there’s repetition.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;words = ${ word ~ (&amp;quot; &amp;quot; ~ word)* }
&lt;&#x2F;span&gt;&lt;span&gt;sentence = ${ SOI ~ chunk ~ (&amp;quot; &amp;quot; ~ chunk)* ~ punctuation ~ EOI }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the test should pass.&lt;&#x2F;p&gt;
&lt;p&gt;There’s a couple of other tests we can write, all of which should still pass with the current rules.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rejects_missing_punctuation&lt;&#x2F;span&gt;&lt;span&gt;(s in chunks()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::sentence, s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rejects_trailing_characters&lt;&#x2F;span&gt;&lt;span&gt;(s in valid_sentence(), t in &amp;quot;[\\sa-zA-Z]+&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input = [s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(), t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;()].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot; &amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::sentence, input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rejects_missing_space_between_chunks&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    w in words(),
&lt;&#x2F;span&gt;&lt;span&gt;    enc in valid_enclosed(),
&lt;&#x2F;span&gt;&lt;span&gt;    p in punctuation()
&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; input = [w, enc, p].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; parsed = SentenceParser::parse(Rule::sentence, input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    prop_assert!(parsed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At this point you should have a passing understanding of how to write property-based tests. PBT isn’t always the answer, but the simple act of thinking about the abstract properties of your code can help you better understand it. The code used in this tutorial can be found on GitHub.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>How to build a dice roller service in Rust</title>
          <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/dicer-roller-service/</link>
          <guid>https://tinkering.xyz/dicer-roller-service/</guid>
          <description xml:base="https://tinkering.xyz/dicer-roller-service/">&lt;p&gt;Note: I originally wrote this article for LogRocket. You can find the original &lt;a href=&quot;https:&#x2F;&#x2F;blog.logrocket.com&#x2F;how-to-build-a-dice-roller-in-rust&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s get this out of the way: I’m a huge Dungeons &amp;amp; Dragons nerd. There’s something special about getting a bunch of adults in a room together to play pretend.&lt;&#x2F;p&gt;
&lt;p&gt;Most of D&amp;amp;D involves using your imagination to make choices for your character, but the outcomes of some actions are determined by dice rolls. For instance, if you want to take a mighty swing at a goblin with your longsword, first you need to roll to see if you hit. You roll a twenty-sided dice (d20), add some numbers to your roll, and the Dungeon Master tells you whether you hit. If you hit, you roll more dice to determine how much damage you do. If, for example, you roll a 20 on your d20 when trying to hit, that means you’ve landed a critical hit, which inflicts a bunch of extra damage.&lt;&#x2F;p&gt;
&lt;p&gt;Where am I going with this? In this tutorial, I&#x27;ll demonstrate how to create a web service to roll these dice for you when you visit a certain URL. This will be a relatively basic project suitable for experienced programmers who are new to Rust.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;a class=&quot;zola-anchor&quot; href=&quot;#getting-started&quot; aria-label=&quot;Anchor link for: getting-started&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We’ll use Rocket for our web service. Although it uses nightly Rust rather than stable Rust, it’s easy to use and should work just fine.&lt;&#x2F;p&gt;
&lt;p&gt;To begin, make sure you have nightly Rust installed.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ rustup toolchain install nightly
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, create a &lt;code&gt;cargo&lt;&#x2F;code&gt; project called &lt;code&gt;roll-server&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo new roll-server
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make nightly Rust the default just for this project.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cd roll-server
&lt;&#x2F;span&gt;&lt;span&gt;$ rustup override set nightly
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add Rocket to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; and disable the default features. At the time of writing, there is a bug in one of its dependencies (&lt;code&gt;ring&lt;&#x2F;code&gt;) that prevents Rocket from building.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rocket &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.4.4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default-features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, modify your &lt;code&gt;main.rs&lt;&#x2F;code&gt; to look like the example from Rocket’s “Getting Started” guide, just to make sure everything is working as intended.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;(proc_macro_hygiene, decl_macro)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; rocket;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    rocket::ignite().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, routes![index]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;launch&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run the project with &lt;code&gt;cargo run&lt;&#x2F;code&gt;. If you visit &lt;code&gt;localhost:8000&lt;&#x2F;code&gt;, you should see &lt;code&gt;Hello, World!&lt;&#x2F;code&gt; in your browser. Now you’re ready to dig into the project.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;routes&quot;&gt;Routes&lt;a class=&quot;zola-anchor&quot; href=&quot;#routes&quot; aria-label=&quot;Anchor link for: routes&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;There are two main routes in our application: &lt;code&gt;&#x2F;roll&#x2F;&amp;lt;dice&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;roll&#x2F;crit&#x2F;&amp;lt;dice&amp;gt;&lt;&#x2F;code&gt;. The first rolls whatever dice you specify in the &lt;code&gt;&amp;lt;dice&amp;gt;&lt;&#x2F;code&gt; portion of the route. The second applies some special rules to the dice roll to calculate damage on a critical hit.&lt;&#x2F;p&gt;
&lt;p&gt;In Rocket you handle requests to certain paths by creating a function and placing an attribute on top that describes the path. For instance, to respond to the path &lt;code&gt;&#x2F;foo&#x2F;bar&lt;&#x2F;code&gt;, you would create the following function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;foo&#x2F;bar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_handler&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo bar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In our case, both the &lt;code&gt;&#x2F;roll&#x2F;&amp;lt;dice&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;roll&#x2F;crit&#x2F;&amp;lt;dice&amp;gt;&lt;&#x2F;code&gt; paths begin with &lt;code&gt;&#x2F;roll&lt;&#x2F;code&gt;. Rather than explicitly write out &lt;code&gt;&#x2F;roll&lt;&#x2F;code&gt; in each of our handlers, let’s mount the &lt;code&gt;&#x2F;&amp;lt;dice&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;crit&#x2F;&amp;lt;dice&amp;gt;&lt;&#x2F;code&gt; handlers under the &lt;code&gt;&#x2F;roll&lt;&#x2F;code&gt; path. The skeleton of the application is as follows.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    rocket::ignite()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;roll&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, routes![normal, critical])
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;launch&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&amp;lt;dice&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;normal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dice&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;    format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;normal: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, dice)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;crit&#x2F;&amp;lt;dice&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;critical&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dice&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;    format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;critical: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, dice)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you run the application and visit &lt;code&gt;localhost:8000&#x2F;roll&#x2F;foo&lt;&#x2F;code&gt;, you should see &lt;code&gt;normal: foo&lt;&#x2F;code&gt;. Likewise, if you visit &lt;code&gt;localhost:8000&#x2F;roll&#x2F;critical&#x2F;foo&lt;&#x2F;code&gt;, you should see &lt;code&gt;critical: foo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parsing&quot;&gt;Parsing&lt;a class=&quot;zola-anchor&quot; href=&quot;#parsing&quot; aria-label=&quot;Anchor link for: parsing&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now that you can extract a string from the path, you need to do something with it. However, you can’t just accept any string as part of the path. What if the user visited &lt;code&gt;&#x2F;roll&#x2F;foo&lt;&#x2F;code&gt;? What dice would they roll?&lt;&#x2F;p&gt;
&lt;p&gt;Instead, we’ll only accept strings that are valid dice notation. This is a compact way of representing the number and size of the dice to be rolled. The notation is of the form &lt;code&gt;&amp;lt;number&amp;gt;d&amp;lt;size&amp;gt;&lt;&#x2F;code&gt;, so &lt;code&gt;4d12&lt;&#x2F;code&gt; would represent four 12-sided dice.&lt;&#x2F;p&gt;
&lt;p&gt;To determine which strings are valid dice notation with a regular expression, add the regex crate to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rocket &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.4.4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default-features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;regex &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, create the file &lt;code&gt;parse.rs&lt;&#x2F;code&gt;, which is where you’ll put all of your parsing logic. We’re going to parse a string like &lt;code&gt;4d6&lt;&#x2F;code&gt; into a struct &lt;code&gt;RollCmd&lt;&#x2F;code&gt; that represents the number of dice and the size of the dice.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll limit the number of dice to 255 because that’s already a ton of dice and it fits nicely into a &lt;code&gt;u8&lt;&#x2F;code&gt;. Taking that one step further, we can recognize that it doesn’t make sense to roll zero dice, so instead we’ll parse into a &lt;code&gt;NonZeroU8&lt;&#x2F;code&gt;. The dice sizes are fixed numbers, so we’ll use an enum to represent the available sizes. Finally, we need a type to represent the various ways in which things can go wrong. We’ll use an &lt;code&gt;enum&lt;&#x2F;code&gt; for that as well.&lt;&#x2F;p&gt;
&lt;p&gt;Putting all of these pieces together, you should have the following type definitions.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; parse.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::num::NonZeroU8;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;ParseError {
&lt;&#x2F;span&gt;&lt;span&gt;    InvalidDiceNumber,
&lt;&#x2F;span&gt;&lt;span&gt;    InvalidDiceSize,
&lt;&#x2F;span&gt;&lt;span&gt;    UnableToParse,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, PartialEq, Copy, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;DiceSize {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D12&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D100&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;RollCmd {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span&gt;: NonZeroU8,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;: DiceSize,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next piece of the puzzle is the regular expression. Use the regex &lt;code&gt;^([1-9]\d*)d(\d+)$&lt;&#x2F;code&gt;. Any simpler, and you’ll allow invalid input. Any stricter, and you’ll lose information about which parts didn’t parse properly.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s take a look at the finished product, then break it down into smaller pieces.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; parse.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse_dice_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dice_str&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;RollCmd, ParseError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dice_regex = Regex::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;^([1-9]\d*)d(\d+)$&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; caps = dice_regex.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;captures&lt;&#x2F;span&gt;&lt;span&gt;(dice_str).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok_or&lt;&#x2F;span&gt;&lt;span&gt;(ParseError::UnableToParse)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dice_num = caps.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Option&amp;lt;Match&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok_or&lt;&#x2F;span&gt;&lt;span&gt;(ParseError::InvalidDiceNumber)?  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Match
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;().parse::&amp;lt;NonZeroU8&amp;gt;()  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Match -&amp;gt; str -&amp;gt; Result&amp;lt;NonZeroU8, Err&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span&gt;(|_| {ParseError::InvalidDiceNumber})?;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; NonZeroU8
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; dice_size = caps.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok_or&lt;&#x2F;span&gt;&lt;span&gt;(ParseError::InvalidDiceSize)?
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .parse::&amp;lt;DiceSize&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(RollCmd {
&lt;&#x2F;span&gt;&lt;span&gt;        num: dice_num,
&lt;&#x2F;span&gt;&lt;span&gt;        size: dice_size
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First, we compiled the regex with &lt;code&gt;Regex::new&lt;&#x2F;code&gt;, then we unwrapped it. This skips any error handling and is generally frowned upon. I know that this regex will compile properly, so it’s OK in this case. Next we applied the regex to the string supplied by the user. We then used the &lt;code&gt;?&lt;&#x2F;code&gt; operator to either get the matches or immediately return an error.&lt;&#x2F;p&gt;
&lt;p&gt;The next piece is more complicated, so I annotated the types. We’ll do the same trick with the &lt;code&gt;?&lt;&#x2F;code&gt; operator, then try to parse the string into a &lt;code&gt;NonZeroU8&lt;&#x2F;code&gt;. If an error occurs, we’ll throw it away and return our own error.  Parsing the dice size is largely the same, but this time we’ll return a &lt;code&gt;ParseError&lt;&#x2F;code&gt; directly from &lt;code&gt;parse&lt;&#x2F;code&gt; by telling the compiler how to convert a string into a &lt;code&gt;DiceSize&lt;&#x2F;code&gt; and specifying the type of error to return if it goes wrong.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; parse.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::str::FromStr;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;FromStr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;DiceSize {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Err = ParseError;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from_str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Err&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; s {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; Ok(DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D4&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; Ok(DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D6&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; Ok(DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D8&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; Ok(DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D10&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; Ok(DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D12&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; Ok(DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D20&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; Ok(DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D100&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            _ =&amp;gt; Err(ParseError::InvalidDiceSize)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rolling-the-dice&quot;&gt;Rolling the dice&lt;a class=&quot;zola-anchor&quot; href=&quot;#rolling-the-dice&quot; aria-label=&quot;Anchor link for: rolling-the-dice&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we know what to roll, we can work on how to roll. We’ll use the &lt;code&gt;rand&lt;&#x2F;code&gt; crate to generate our random dice rolls. Go ahead and add it to your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;rand = &amp;quot;0.7&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now create a file called &lt;code&gt;roll.rs&lt;&#x2F;code&gt;. This is where you’ll write the code that handles the dice rolls. The dice rolls are going to be &lt;code&gt;usize&lt;&#x2F;code&gt;s (&lt;code&gt;NonZeroUsize&lt;&#x2F;code&gt; would make more sense, but the math operations are defined for &lt;code&gt;usize&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Here is the struct that holds the dice rolls and the functions that will generate them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; roll.rs
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Rolls(pub Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;roll_normal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;RollCmd) -&amp;gt; Rolls {
&lt;&#x2F;span&gt;&lt;span&gt;    todo!()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;roll_critical&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;RollCmd) -&amp;gt; Rolls {
&lt;&#x2F;span&gt;&lt;span&gt;    todo!()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;generate_rolls&lt;&#x2F;span&gt;&lt;span&gt;(cmd: &amp;amp;RollCmd) -&amp;gt; Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    todo!()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;generate_rolls&lt;&#x2F;code&gt; function handles all the common dice-rolling operations, then &lt;code&gt;roll_normal&lt;&#x2F;code&gt; and &lt;code&gt;roll_critical&lt;&#x2F;code&gt; do their own specific jobs. Let’s look at how the random numbers are generated.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; roll.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;generate_rolls&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;RollCmd) -&amp;gt; Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rng = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;thread_rng&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; distribution = Uniform::new_inclusive(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;::from(cmd.size));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rolls: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..cmd.num.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|_| {
&lt;&#x2F;span&gt;&lt;span&gt;            distribution.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sample&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; rng).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    rolls
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This makes a random roll &lt;code&gt;cmd.num&lt;&#x2F;code&gt; times. The rolls are taken from a uniform probability distribution from &lt;code&gt;[1, cmd.size]&lt;&#x2F;code&gt;, meaning that each number on the dice is equally likely to appear. We make the rolls, collect them in a &lt;code&gt;Vec&lt;&#x2F;code&gt;, and return them.&lt;&#x2F;p&gt;
&lt;p&gt;If you’re paying close attention, you may have noticed the &lt;code&gt;usize::from(cmd.size)&lt;&#x2F;code&gt; on the third line. This operation converts a &lt;code&gt;DiceSize&lt;&#x2F;code&gt; into a &lt;code&gt;usize&lt;&#x2F;code&gt;. We tell the compiler how to do this by implementing the &lt;code&gt;From&lt;&#x2F;code&gt; trait.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; parse.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;DiceSize&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;usize {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;: DiceSize) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; d {
&lt;&#x2F;span&gt;&lt;span&gt;            DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D4 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D6 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D8 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D10 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D12 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D20 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            DiceSize::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;D100 &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once we have dice rolls, we can pass them off to &lt;code&gt;roll_normal&lt;&#x2F;code&gt; and &lt;code&gt;roll_critical&lt;&#x2F;code&gt;. For &lt;code&gt;roll_normal&lt;&#x2F;code&gt;, we’ll just return the dice rolls. For &lt;code&gt;roll_critical&lt;&#x2F;code&gt;, we’ll add a full-damage dice roll to the dice that have already been rolled (e.g., &lt;code&gt;4d6&lt;&#x2F;code&gt; becomes &lt;code&gt;4d6 + 24&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; roll.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;roll_normal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;RollCmd) -&amp;gt; Rolls {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rolls = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;generate_rolls&lt;&#x2F;span&gt;&lt;span&gt;(cmd);
&lt;&#x2F;span&gt;&lt;span&gt;    Rolls(rolls)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;roll_crit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmd&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;RollCmd) -&amp;gt; Rolls {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rolls = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;generate_rolls&lt;&#x2F;span&gt;&lt;span&gt;(cmd);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; num = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;::from(cmd.num.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; size = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;::from(cmd.size);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; crit = num.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;checked_mul&lt;&#x2F;span&gt;&lt;span&gt;(size).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    rolls.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(crit);
&lt;&#x2F;span&gt;&lt;span&gt;    Rolls(rolls)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When we multiply the number and size of the dice, we are given back a &lt;code&gt;Result&lt;&#x2F;code&gt; because the multiplication can overflow. We unwrap this &lt;code&gt;Result&lt;&#x2F;code&gt; because our maximum number of dice, 255, and our maximum dice size, 100, can never cause this overflow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;responding&quot;&gt;Responding&lt;a class=&quot;zola-anchor&quot; href=&quot;#responding&quot; aria-label=&quot;Anchor link for: responding&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;At this point, we’ve done all of the computation and we need to respond to the request while taking parsing errors into account. In our route handlers, we’ll return a &lt;code&gt;Result&lt;&#x2F;code&gt; where the &lt;code&gt;Err&lt;&#x2F;code&gt; will be a type that sets the HTTP status to &lt;code&gt;400 Bad Request&lt;&#x2F;code&gt;. Rocket has a built-in type that does this for us: &lt;code&gt;rocket::response::status::BadRequest&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We’ll use the &lt;code&gt;?&lt;&#x2F;code&gt; operator again to handle errors, which means we need to tell the compiler how to convert a &lt;code&gt;ParseError&lt;&#x2F;code&gt; into a &lt;code&gt;BadRequest&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; parse.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rocket::response::status::BadRequest;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;From&amp;lt;ParseError&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;BadRequest&amp;lt;String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;: ParseError) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; p {
&lt;&#x2F;span&gt;&lt;span&gt;            ParseError::InvalidDiceNumber =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                BadRequest(Some(String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Number of dice must be &amp;lt;= 255&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            ParseError::InvalidDiceSize =&amp;gt; BadRequest(Some(String::from(
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Dice size must be 4, 6, 8, 10, 12, 20, or 100&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            ))),
&lt;&#x2F;span&gt;&lt;span&gt;            ParseError::UnableToParse =&amp;gt; BadRequest(Some(String::from(
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Unable to parse, must be of the form &amp;lt;number&amp;gt;d&amp;lt;size&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            ))),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;Some(foo)&lt;&#x2F;code&gt; in each branch sets the body of the response to &lt;code&gt;foo&lt;&#x2F;code&gt; so that the user has some idea what went wrong.&lt;&#x2F;p&gt;
&lt;p&gt;Next, stitch the rolls together into a string of the form.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;1 + 2 + 3 + 4 = 10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can do this with a new function called &lt;code&gt;assemble_response&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main.rs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;assemble_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rolls&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Rolls) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; roll_str: String = rolls
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;| d.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Vec&amp;lt;String&amp;gt;&amp;gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; + &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sum_str = rolls.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().sum::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    [roll_str, sum_str].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; = &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We’re almost done! All we have to do is put these pieces together in our &lt;code&gt;normal&lt;&#x2F;code&gt; and &lt;code&gt;critical&lt;&#x2F;code&gt; handlers that we made way back in the beginning of the project.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main.rs
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&amp;lt;dice&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;normal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dice&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; Result&amp;lt;String, BadRequest&amp;lt;String&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmd = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_dice_str&lt;&#x2F;span&gt;&lt;span&gt;(dice.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rolls = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;roll_normal&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;cmd);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;assemble_response&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;rolls);
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(resp)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;crit&#x2F;&amp;lt;dice&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;critical&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dice&lt;&#x2F;span&gt;&lt;span&gt;: String) -&amp;gt; Result&amp;lt;String, BadRequest&amp;lt;String&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cmd = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_dice_str&lt;&#x2F;span&gt;&lt;span&gt;(dice.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rolls = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;roll_crit&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;cmd);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; resp = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;assemble_response&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;rolls);
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(resp)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Hopefully you had as much fun building this dice rolling service as I did! There’s still plenty of work to do; if you want to dive a little deeper, here are some ideas to get you started:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Roll character stats when the user visits &lt;code&gt;&#x2F;stats&lt;&#x2F;code&gt;, which will entail rolling &lt;code&gt;4d6&lt;&#x2F;code&gt; six times and dropping the lowest number from each roll&lt;&#x2F;li&gt;
&lt;li&gt;Keep a running total of the dice that have been rolled since the server started. To do this, you’ll need to explore Rocket’s State documentation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The code for this project is available on GitHub. If you have questions or want to submit either of the projects mentioned above, new contributors are always welcome!&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Polsim - a case study for small-scale scientific computing in Rust</title>
          <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/polsim/</link>
          <guid>https://tinkering.xyz/polsim/</guid>
          <description xml:base="https://tinkering.xyz/polsim/">&lt;!-- Math rendering --&gt;
&lt;script src=&#x27;https:&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;mathjax&#x2F;2.7.5&#x2F;latest.js?config=TeX-MML-AM_CHTML&#x27; async&gt;&lt;&#x2F;script&gt;
&lt;script type=&quot;text&#x2F;x-mathjax-config&quot;&gt;
MathJax.Hub.Config({tex2jax: {inlineMath: [[&#x27;$&#x27;,&#x27;$&#x27;], [&#x27;\\(&#x27;,&#x27;\\)&#x27;]]}});
&lt;&#x2F;script&gt;
&lt;p&gt;Let&#x27;s get this out of the way: &lt;code&gt;polsim&lt;&#x2F;code&gt; is a command line utility for doing &lt;strong&gt;pol&lt;&#x2F;strong&gt;arization &lt;strong&gt;sim&lt;&#x2F;strong&gt;ulations. I&#x27;m a physicist by day (shell of a man by night), and I work with lasers on a daily basis. My PhD is based on a measurement technique&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; that&#x27;s polarization-sensitive, so it would be useful to be able to predict or ballpark the polarization of a laser beam without too much trouble. The code can be found on GitHub:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;polarization&quot;&gt;&lt;code&gt;polarization&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: the library that handles the simulations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;polsim&quot;&gt;&lt;code&gt;polsim&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;: the command line utility for using &lt;code&gt;polarization&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The motivation for this post is to recount my experiences developing a scientific tool written in Rust in the context of someone with a scientific background&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#2&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. I&#x27;ll explain why I made certain choices, and I&#x27;ll document the things that I struggled with along the way.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;polarization&quot;&gt;Polarization&lt;a class=&quot;zola-anchor&quot; href=&quot;#polarization&quot; aria-label=&quot;Anchor link for: polarization&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;m not here to teach you physics, but a little bit of background is required. I&#x27;ll keep it to a minimum so that I don&#x27;t give you nightmares.&lt;&#x2F;p&gt;
&lt;p&gt;Polarization is loosely defined as how light oscillates as it travels through space. See the image below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;upload.wikimedia.org&#x2F;wikipedia&#x2F;commons&#x2F;0&#x2F;09&#x2F;Circular.Polarization.Circularly.Polarized.Light_Homogenous_Circular.Polarizer_Left.Handed.svg&quot; alt=&quot;circular and linear polarization&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Technically speaking, polarization is a vector, meaning that it has a size and a direction, which is why the polarization is represented by an arrow in the figure above (the size is the length of the arrow, the direction is the direction the arrow is pointing). The red line is the path traced out by the tip of the polarization vector. For linearly polarized light, the vector just swings back and forth along some line (this is the middle portion of the image). For circularly polarized light, the vector traces out a circle if you look at the beam head-on&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#3&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, or a spiral if you look at the beam traveling through space&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#4&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The polarization of a beam changes when it interacts with other objects, for instance, when the beam reflects from a surface or passes through some optical element (e.g. a polarizer). We want to be able to predict what will happen to the polarization of a beam after it interacts with a series of optical elements. Conversely, we could also look at the polarization before and after some optical elements and ask &quot;what could have made my beam look this way&quot;. This kind of modeling is what &lt;code&gt;polsim&lt;&#x2F;code&gt; is for.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily, there are standard techniques for this kind of modeling so I don&#x27;t need reinvent that wheel. The formalism that &lt;code&gt;polsim&lt;&#x2F;code&gt; is based on is called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Jones_calculus&quot;&gt;Jones calculus&lt;&#x2F;a&gt;. Jones calculus is relatively simple but approximates reality well enough for my purposes. There is a more complete formalism called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Mueller_calculus&quot;&gt;Mueller calculus&lt;&#x2F;a&gt; but it&#x27;s more complex and I don&#x27;t need the additional information it provides.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;jones-calculus&quot;&gt;Jones calculus&lt;a class=&quot;zola-anchor&quot; href=&quot;#jones-calculus&quot; aria-label=&quot;Anchor link for: jones-calculus&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Jones calculus informs the structure of &lt;code&gt;polsim&lt;&#x2F;code&gt; so I need to discuss this a little bit. In Jones calculus your polarization is a vector (basically a one-column matrix) of complex numbers&lt;&#x2F;p&gt;
&lt;p&gt;$$
\vec{E} = \begin{bmatrix} A \\ B e^{i\delta} \end{bmatrix} = \begin{bmatrix} \text{complex} \\ \text{complex} \end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;and optical elements, the things that interact with your beam, are 2x2 matrices of complex numbers:&lt;&#x2F;p&gt;
&lt;p&gt;$$
M = \begin{bmatrix}
m_{00} &amp;amp; m_{01} \\ m_{10} &amp;amp; m_{11} \end{bmatrix} = \begin{bmatrix} \text{complex} &amp;amp; \text{complex} \\ \text{complex} &amp;amp; \text{complex} \end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;You obtain the final polarization by multiplying the initial polarization by all the elements that the beam interacts with, like so:&lt;&#x2F;p&gt;
&lt;p&gt;$$
E_{f} = M_{N} \times \ldots \times M_2 \times M_1 \times E_i
$$&lt;&#x2F;p&gt;
&lt;p&gt;So, when you really get down to it, you&#x27;re just multiplying 2x2 matrices together. That fact means that I don&#x27;t need a ton of computational horsepower, freeing me up to make decisions based on preference rather than necessity. I&#x27;ll discuss this further when it comes to which linear algebra crate I chose.&lt;&#x2F;p&gt;
&lt;p&gt;In principle you could do all of this multiplication by hand. In fact, if you&#x27;re trying to see how one particular parameter of an optical element influences the final result, it&#x27;s often a good idea to do this multiplication by hand to get an analytical solution. However, these matrices can get ugly and doing the arithmetic by hand is tedious:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{bmatrix} \cos^{2}\left(\theta\right) + e^{i\varphi} \sin^{2}\left(\theta\right) &amp;amp; \sin\left(\theta\right)\cos\left(\theta\right) - e^{i\varphi} \sin\left(\theta\right)\cos\left(\theta\right) \\ \sin\left(\theta\right)\cos\left(\theta\right) - e^{i\varphi} \sin\left(\theta\right)\cos\left(\theta\right) &amp;amp; \sin^{2}\left(\theta\right) + e^{i\varphi} \cos^{2}\left(\theta\right) \\ \end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;No one has ever used this matrix without looking it up.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;crate-choices&quot;&gt;Crate choices&lt;a class=&quot;zola-anchor&quot; href=&quot;#crate-choices&quot; aria-label=&quot;Anchor link for: crate-choices&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Now that I have the background out of the way, I can walk through some of the necessary building blocks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;complex numbers&lt;&#x2F;li&gt;
&lt;li&gt;vectors (essentially a 1-column matrix)&lt;&#x2F;li&gt;
&lt;li&gt;matrices&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There&#x27;s no complex number support in the Rust standard library, so I had to look elsewhere. The most mature and feature-complete solution is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-num&#x2F;num&quot;&gt;&lt;code&gt;num&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate and its &lt;code&gt;num::complex::Complex&lt;&#x2F;code&gt; type. The type &lt;code&gt;Complex&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; is parameterized by some numerical type &lt;code&gt;T&lt;&#x2F;code&gt; e.g. &lt;code&gt;f32&lt;&#x2F;code&gt; or &lt;code&gt;f64&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;My choice in the linear algebra space was made more difficult by the wealth of linear algebra crates that are available. A &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;search?q=linear+algebra&quot;&gt;quick search on crates.io&lt;&#x2F;a&gt; for the query &quot;linear algebra&quot; returns 95 results. There are really two options that stand out: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-ndarray&#x2F;ndarray&quot;&gt;&lt;code&gt;ndarray&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rustsim&#x2F;nalgebra&quot;&gt;&lt;code&gt;nalgebra&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. The &lt;code&gt;ndarray&lt;&#x2F;code&gt; crate seems to be a generic multi-dimensional array, similar to what NumPy provides in the Python world, whereas &lt;code&gt;nalgebra&lt;&#x2F;code&gt; seems to be more focused on square matrices and vectors for computer graphics. I only need square (2x2) matrices, so I went with &lt;code&gt;nalgebra&lt;&#x2F;code&gt;, though I&#x27;m sure I would have been able to achieve the same results with &lt;code&gt;ndarray&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I use the &lt;code&gt;nalgebra::Vector2&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; and &lt;code&gt;nalgebra::Matrix2&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; types to represent beams and optical elements respectively, where &lt;code&gt;T&lt;&#x2F;code&gt; is &lt;code&gt;num::complex::Complex&amp;lt;f64&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-polarization-crate&quot;&gt;The polarization crate&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-polarization-crate&quot; aria-label=&quot;Anchor link for: the-polarization-crate&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Getting back to the code, I needed to translate the physics of the problem into Rust. To do this I made a crate called &lt;code&gt;polarization&lt;&#x2F;code&gt; which does the actual simulation work. &lt;code&gt;polsim&lt;&#x2F;code&gt; allows users to define simulations in a declarative fashion, does validation on those simulation definitions, then hands things off to &lt;code&gt;polarization&lt;&#x2F;code&gt; to do the simulation.&lt;&#x2F;p&gt;
&lt;p&gt;There were two distinct &quot;entities&quot; that I wanted to model, beams and optical elements, so I described each one with its own trait. In Jones calculus the polarization of a beam is represented by a two-element vector. We refer to this type of vector as a &quot;Jones vector&quot;. Some examples of things I expect to be able to do with a beam are get its intensity (brightness), pull out the x&#x2F;y-component, get the underlying vector so I can multiply it with a matrix, and a variety of other things. I came to the following (truncated) definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;JonesVector {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Intensity of the beam
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;intensity&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Returns the x-component of the beam
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Returns the y-component of the beam
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Returns the vector representation of the beam
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Vector2&amp;lt;Complex&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I implement this trait for a type called &lt;code&gt;Beam&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Basically a container for the Vector2&amp;lt;T&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Beam {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vec&lt;&#x2F;span&gt;&lt;span&gt;: Vector2&amp;lt;Complex&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The crate isn&#x27;t actually generic over the &lt;code&gt;JonesVector&lt;&#x2F;code&gt; trait (you&#x27;ll see functions take and return &lt;code&gt;Beam&lt;&#x2F;code&gt; explicitly), but the plan is to rectify that at some point.&lt;&#x2F;p&gt;
&lt;p&gt;For optical elements I again define a trait to encode the behavior that all optical elements should have. This trait is smaller because most of the behavior will be element-specific.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;JonesMatrix {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Rotate the element by the given angle
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;rotated&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle&lt;&#x2F;span&gt;&lt;span&gt;: Angle) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Return the matrix representation of the element
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;matrix&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Matrix2&amp;lt;Complex&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; An ideal linear polarizer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Polarizer {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mat&lt;&#x2F;span&gt;&lt;span&gt;: Matrix2&amp;lt;Complex&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;JonesMatrix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Polarizer {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In order to perform this simulation you need exactly one beam and at least one element for the beam to propagate through. You can represent a vacuum (which won&#x27;t change the polarization of the beam) with an identity matrix, so you really have no excuse for doing a simulation without at least one optical element. Another point to consider is that the order in which the beam encounters the optical elements determines the order in which the matrices should be multiplied together&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#6&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. I&#x27;m not just going to let you multiply matrices together willy-nilly, sorry.&lt;&#x2F;p&gt;
&lt;p&gt;I define a type called &lt;code&gt;OpticalSystem&lt;&#x2F;code&gt; so that there is an adult in the room. You add a beam and some elements to the system, call &lt;code&gt;OpticalSystem::propagate()&lt;&#x2F;code&gt;, and the system will return a &lt;code&gt;Result&amp;lt;Beam, JonesError&amp;gt;&lt;&#x2F;code&gt;. When you put it all together, a very simple simulation looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; initial_beam = Beam::linear(Angle::Degrees(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; pol = Polarizer::new(Angle::Degrees(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;45.0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; qwp = QuarterWavePlate::new(Angle::Degrees(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; system = OpticalSystem::new()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_beam&lt;&#x2F;span&gt;&lt;span&gt;(initial_beam)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_element&lt;&#x2F;span&gt;&lt;span&gt;(pol)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_element&lt;&#x2F;span&gt;&lt;span&gt;(qwp);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; final_beam = system.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;propagate&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;debugging&quot;&gt;Debugging&lt;a class=&quot;zola-anchor&quot; href=&quot;#debugging&quot; aria-label=&quot;Anchor link for: debugging&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;The first thing I struggled with was using a debugger. This was my first time using a debugger, so I was already in uncharted territory. At the time I was working on this I was using neovim and a terminal as my &quot;IDE&quot;, but since then I&#x27;ve moved to CLion and I can say that its debugger is relatively pleasant to use.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with some minor things, like how values are printed in the debugger. I&#x27;ll first set a breakpoint inside of a closure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(lldb) br set -f system.rs -l 348
&lt;&#x2F;span&gt;&lt;span&gt;Breakpoint 1: where = polarization-b20b1f754e235950`polarization
&lt;&#x2F;span&gt;&lt;span&gt;::jones::system::OpticalSystem::composed_elements
&lt;&#x2F;span&gt;&lt;span&gt;::_$u7b$$u7b$closure$u7d$$u7d$
&lt;&#x2F;span&gt;&lt;span&gt;::h19d2e65336af7615 + 577 at system.rs:348:30, address = 0x00000001001e8c11
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most of this looks fine except for the &lt;code&gt;_$u7b$$u7b$closure$u7d$$u7d$&lt;&#x2F;code&gt; piece. I think this is supposed to read &lt;code&gt;{{closure}}&lt;&#x2F;code&gt;, but this isn&#x27;t a big deal because you can still basically read what it says. Now let&#x27;s let the program run until we hit that breakpoint.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(lldb) r
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;Process 33329 stopped
&lt;&#x2F;span&gt;&lt;span&gt;* thread #2, name = &amp;#39;jones::system::test::test_beam_passes_through&amp;#39;, stop reason = breakpoint 1.1
&lt;&#x2F;span&gt;&lt;span&gt;    frame #0: 0x00000001001e8c11 polarization-b20b1f754e235950`polarization::jones::system::OpticalSystem
&lt;&#x2F;span&gt;&lt;span&gt;    ::composed_elements::_$u7b$$u7b$closure$u7d$$u7d$::h19d2e65336af7615((null)=0x000070000ef72f98,
&lt;&#x2F;span&gt;&lt;span&gt;    acc=Matrix&amp;lt;num_complex::Complex&amp;lt;f64&amp;gt;, nalgebra::base::dimension::U2, nalgebra::base::dimension::U2,
&lt;&#x2F;span&gt;&lt;span&gt;    nalgebra::base::matrix_array::MatrixArray&amp;lt;num_complex::Complex&amp;lt;f64&amp;gt;, nalgebra::base::dimension::U2,
&lt;&#x2F;span&gt;&lt;span&gt;    nalgebra::base::dimension::U2&amp;gt;&amp;gt; @ 0x000070000ef73030, elem=0x0000000100c16aa0) at system.rs:348:30
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s quite a bit more output now. If you wade through the sea of colons&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#5&quot;&gt;6&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, you can see the the entire second half of this output is just defining the type of a matrix named &lt;code&gt;acc&lt;&#x2F;code&gt; (this is inside of a &lt;code&gt;fold&lt;&#x2F;code&gt;, and &lt;code&gt;acc&lt;&#x2F;code&gt; is the accumulator). The point here is that the actual types of matrices in &lt;code&gt;nalgebra&lt;&#x2F;code&gt; can be very verbose. There is a language feature on the horizon called const-generics that should eventually alleviate some of the pain here.&lt;&#x2F;p&gt;
&lt;p&gt;Getting back to debugging, lets try to find the values inside this matrix &lt;code&gt;acc&lt;&#x2F;code&gt;. You can list the variables in this stack frame with the command &lt;code&gt;fr v&lt;&#x2F;code&gt;. There are three variables in this stack frame, but I&#x27;ll only show one because there&#x27;s a lot to wade through.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(nalgebra::base::matrix::Matrix&amp;lt;num_complex::Complex&amp;lt;double&amp;gt;, nalgebra::base::dimension::U2,
&lt;&#x2F;span&gt;&lt;span&gt;nalgebra::base::dimension::U2, nalgebra::base::matrix_array::MatrixArray&amp;lt;num_complex::Complex&amp;lt;double&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;nalgebra::base::dimension::U2, nalgebra::base::dimension::U2&amp;gt; &amp;gt;) acc = {
&lt;&#x2F;span&gt;&lt;span&gt;  data = {
&lt;&#x2F;span&gt;&lt;span&gt;    data = {
&lt;&#x2F;span&gt;&lt;span&gt;      data = {
&lt;&#x2F;span&gt;&lt;span&gt;        parent1 = {
&lt;&#x2F;span&gt;&lt;span&gt;          parent1 = {
&lt;&#x2F;span&gt;&lt;span&gt;            parent1 = &amp;lt;Unable to determine byte size.&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            parent2 = &amp;lt;Unable to determine byte size.&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            data = (re = 1, im = 0)
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;          parent2 = {
&lt;&#x2F;span&gt;&lt;span&gt;            parent1 = &amp;lt;Unable to determine byte size.&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            parent2 = &amp;lt;Unable to determine byte size.&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            data = (re = 0, im = 0)
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;          _marker = {}
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        parent2 = {
&lt;&#x2F;span&gt;&lt;span&gt;          parent1 = {
&lt;&#x2F;span&gt;&lt;span&gt;            parent1 = &amp;lt;Unable to determine byte size.&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            parent2 = &amp;lt;Unable to determine byte size.&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            data = (re = 0, im = 0)
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;          parent2 = {
&lt;&#x2F;span&gt;&lt;span&gt;            parent1 = &amp;lt;Unable to determine byte size.&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            parent2 = &amp;lt;Unable to determine byte size.&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            data = (re = 1, im = 0)
&lt;&#x2F;span&gt;&lt;span&gt;          }
&lt;&#x2F;span&gt;&lt;span&gt;          _marker = {}
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        _marker = {}
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  _phantoms = {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Again, you can see that there&#x27;s quite a lot of information here, but there&#x27;s really only four relevant lines:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;data = (re = 1, im = 0)
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;data = (re = 0, im = 0)
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;data = (re = 0, im = 0)
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;data = (re = 1, im = 0)
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I know from experience which element of the matrix (row&#x2F;column) each of these values is supposed to appear in, but there&#x27;s no other indicator which &lt;code&gt;data&lt;&#x2F;code&gt; belongs to which row&#x2F;column. I know I&#x27;m really harping on this debugging thing, but debugging is a crucial part of the developer experience. That&#x27;s not to say that effort hasn&#x27;t been put towards this, just that there&#x27;s still plenty of work to be done.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;testing&quot;&gt;Testing&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing&quot; aria-label=&quot;Anchor link for: testing&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;This is science, so you should be able to rely on the correctness of the results. It&#x27;s generally a good practice to test your code, but that goes doubly so for a scientific tool. In order to really cover my bases I&#x27;m using property based testing (PBT).&lt;&#x2F;p&gt;
&lt;p&gt;For those of you not familiar with PBT here&#x27;s a quick introduction. A unit test for a function that does addition might check a statement like &quot;the sum of 2 and 3 is 5&quot;. In this type of test you know (and supply) the exact input and verify that it produces some known exact output. This test is simple to write and simple to come up with, but doesn&#x27;t provide much confidence that the addition function would work for other inputs.&lt;&#x2F;p&gt;
&lt;p&gt;In PBT you make more general statements about your program and verify them several times with a sequence of randomly generated inputs. This type of test might check a statement like &quot;the sum of two positive integers &lt;strong&gt;x&lt;&#x2F;strong&gt; and &lt;strong&gt;y&lt;&#x2F;strong&gt; is also positive&quot;. The test would randomly generate several positive integers and make sure their sum is greater than zero, giving you the confidence that your addition function works for a wide range of inputs.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s always a tradeoff, however. Your test suite will generally take longer to run since you&#x27;re running each test several times. You will also spend some amount of time debugging broken tests when you discover  edge cases &lt;strong&gt;in your tests&lt;&#x2F;strong&gt; due to the randomly generated inputs.&lt;&#x2F;p&gt;
&lt;p&gt;I think PBT and science should be best friends, and here&#x27;s why: science provides you a wealth of properties to test. Different scientific fields may have more or less difficulty identifying properties that map well to software tests, but for a &quot;hard&quot;, quantitative field like experimental physics, there&#x27;s more properties to test than I care to implement.&lt;&#x2F;p&gt;
&lt;p&gt;For example, here is a very short list of properties I test just in &lt;code&gt;polarization&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The intensity of a beam that&#x27;s passed through two crossed polarizers should be zero.&lt;&#x2F;li&gt;
&lt;li&gt;The intensity of a beam shouldn&#x27;t change if it&#x27;s rotated by an arbitrary angle.&lt;&#x2F;li&gt;
&lt;li&gt;A beam that&#x27;s rotated 360 degrees should look exactly the same as the original beam.&lt;&#x2F;li&gt;
&lt;li&gt;An optical element that&#x27;s rotated 360 should look exactly the same as the original element.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;My PBT crate of choice is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;AltSysrq&#x2F;proptest&quot;&gt;&lt;code&gt;proptest&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. If you&#x27;ve ever used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;HypothesisWorks&#x2F;hypothesis&quot;&gt;&lt;code&gt;hypothesis&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; in the Python world, &lt;code&gt;proptest&lt;&#x2F;code&gt; is similar in spirit. The central idea is that there are &quot;strategies&quot; that produce instances of a given type, and your test specifies that its inputs should come from some strategies.&lt;&#x2F;p&gt;
&lt;p&gt;There are strategies for many primitive and built-in types like &lt;code&gt;f64&lt;&#x2F;code&gt;, &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;, etc. You can also create your own strategies or compose strategies together. Those two features allow you to generate instances of complicated types such as &lt;code&gt;OpticalSystem&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You tell &lt;code&gt;proptest&lt;&#x2F;code&gt; how to randomly generate an instance of your type by implementing the &lt;code&gt;Arbitrary&lt;&#x2F;code&gt; trait. Here&#x27;s what that looks like for my &lt;code&gt;Angle&lt;&#x2F;code&gt; type:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Angle {
&lt;&#x2F;span&gt;&lt;span&gt;    Degrees(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    Radians(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Arbitrary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Angle {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Parameters = ();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Strategy = BoxedStrategy&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;arbitrary_with&lt;&#x2F;span&gt;&lt;span&gt;(_: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Parameters) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Strategy {
&lt;&#x2F;span&gt;&lt;span&gt;        prop_oneof![
&lt;&#x2F;span&gt;&lt;span&gt;            (any::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| Angle::Degrees(x)),
&lt;&#x2F;span&gt;&lt;span&gt;            (any::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| Angle::Radians(x)),
&lt;&#x2F;span&gt;&lt;span&gt;        ]
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;boxed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Most of this is boilerplate so here&#x27;s the important bit:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;prop_oneof![
&lt;&#x2F;span&gt;&lt;span&gt;    (any::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| Angle::Degrees(x)),
&lt;&#x2F;span&gt;&lt;span&gt;    (any::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| Angle::Radians(x)),
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;prop_oneof!&lt;&#x2F;code&gt; macro instructs &lt;code&gt;proptest&lt;&#x2F;code&gt; to randomly select one strategy from a list of strategies, and is useful for generating the different variants of an enum. The &lt;code&gt;any::&amp;lt;T&amp;gt;()&lt;&#x2F;code&gt; function produces a strategy that generates instances of the type &lt;code&gt;T&lt;&#x2F;code&gt;. Both lines in the macro are generating &lt;code&gt;f64&lt;&#x2F;code&gt;s and mapping them into the variants of the &lt;code&gt;Angle&lt;&#x2F;code&gt; enum. So, if I were to call &lt;code&gt;any::&amp;lt;Angle&amp;gt;()&lt;&#x2F;code&gt; I would get a strategy that produces a random stream of &lt;code&gt;Angle::Degrees(some f64)&lt;&#x2F;code&gt; and &lt;code&gt;Angle::Radians(some f64)&lt;&#x2F;code&gt;. In fact, I do exactly that to generate &lt;code&gt;Beam&lt;&#x2F;code&gt;s:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Arbitrary &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Beam {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Parameters = PolarizationKind;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Strategy = BoxedStrategy&amp;lt;Beam&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;arbitrary_with&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Parameters) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Strategy {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; args {
&lt;&#x2F;span&gt;&lt;span&gt;            PolarizationKind::Linear =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;any_linear_beam&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;boxed&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ... omitted
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;any_linear_beam&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; impl Strategy&amp;lt;Value = Beam&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    any::&amp;lt;Angle&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;prop_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle&lt;&#x2F;span&gt;&lt;span&gt;| Beam::linear(angle))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;polsim&quot;&gt;polsim&lt;a class=&quot;zola-anchor&quot; href=&quot;#polsim&quot; aria-label=&quot;Anchor link for: polsim&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;With all of that out of the way, we can finally talk about &lt;code&gt;polsim&lt;&#x2F;code&gt; itself. Simulations are defined in a TOML file using a syntax I&#x27;ve laid out in the documentation. Here&#x27;s what it looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[beam]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;polarization &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;linear&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle_units &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;degrees&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[[elements]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;element_type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;polarizer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;45
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle_units &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;degrees&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[[elements]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;element_type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qwp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle_units &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;degrees&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It might look odd to have to define the angle units everywhere, but that&#x27;s done on purpose. It can be more convenient to use degrees in one place or radians in another, and I&#x27;m planning on incorporating other angles types in the future (wavelengths and fractions of &lt;code&gt;pi&lt;&#x2F;code&gt;). On top of that, you definitely don&#x27;t want your simulation results to be wrong because you meant radians where &lt;code&gt;polsim&lt;&#x2F;code&gt; thought you meant degrees.&lt;&#x2F;p&gt;
&lt;p&gt;I use &lt;code&gt;serde&lt;&#x2F;code&gt; to deserialize this TOML file into a struct so that I can do some validation. The structs that this gets deserialized into are a bit ugly because I have to account for all possible beam and element definitions. For example, the &lt;code&gt;polarization&lt;&#x2F;code&gt; field in the beam definition determines which other fields are required in the beam definition. Here&#x27;s the struct that a beam gets deserialized into:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Deserialize, Serialize)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;BeamDef {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;polarization&lt;&#x2F;span&gt;&lt;span&gt;: PolType,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angle_units&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;AngleType&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x_mag&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x_phase&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y_mag&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y_phase&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;phase_units&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;AngleType&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handedness&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;HandednessType&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next step is to validate the beam definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate_element&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;elem&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;ElemDef) -&amp;gt; Result&amp;lt;OpticalElement&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; elem.element_type {
&lt;&#x2F;span&gt;&lt;span&gt;        ElemType::Polarizer =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;validate_polarizer&lt;&#x2F;span&gt;&lt;span&gt;(elem).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chain_err&lt;&#x2F;span&gt;&lt;span&gt;(|| &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invalid polarizer definition&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        ElemType::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;HWP &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;validate_hwp&lt;&#x2F;span&gt;&lt;span&gt;(elem).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chain_err&lt;&#x2F;span&gt;&lt;span&gt;(|| &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invalid half-wave plate definition&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        ElemType::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;QWP &lt;&#x2F;span&gt;&lt;span&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;validate_qwp&lt;&#x2F;span&gt;&lt;span&gt;(elem).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chain_err&lt;&#x2F;span&gt;&lt;span&gt;(|| &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invalid quarter-wave plate definition&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        ElemType::Retarder =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;validate_retarder&lt;&#x2F;span&gt;&lt;span&gt;(elem).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chain_err&lt;&#x2F;span&gt;&lt;span&gt;(|| &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invalid retarder definition&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        ElemType::Rotator =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;validate_rotator&lt;&#x2F;span&gt;&lt;span&gt;(elem).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chain_err&lt;&#x2F;span&gt;&lt;span&gt;(|| &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;invalid polarization rotator definition&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll note that I&#x27;m using &lt;code&gt;error-chain&lt;&#x2F;code&gt; here for my error handling. I&#x27;ve never been very clear on what the in-vogue method of error handling is in the Rust ecosystem, but &lt;code&gt;error-chain&lt;&#x2F;code&gt; makes it very easy to spell out exactly where a user went wrong in their simulation definition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ polsim has_error.toml
&lt;&#x2F;span&gt;&lt;span&gt;error: invalid system definition
&lt;&#x2F;span&gt;&lt;span&gt;caused by: invalid element definition
&lt;&#x2F;span&gt;&lt;span&gt;caused by: invalid polarizer definition
&lt;&#x2F;span&gt;&lt;span&gt;caused by: invalid angle definition
&lt;&#x2F;span&gt;&lt;span&gt;caused by: missing parameter in definition: &amp;#39;angle_units&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If a user defines a simulation with more than one instance of a given optical element, &lt;code&gt;polsim&lt;&#x2F;code&gt; won&#x27;t point out which one has the error, so there&#x27;s some work to do there.&lt;&#x2F;p&gt;
&lt;p&gt;Another area that needs work is the output because it&#x27;s currently very basic:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ polsim examples&#x2F;circular_polarizer.toml
&lt;&#x2F;span&gt;&lt;span&gt;intensity: 5.00000e-1
&lt;&#x2F;span&gt;&lt;span&gt;x_mag: 5.00000e-1
&lt;&#x2F;span&gt;&lt;span&gt;x_phase: 0.00000e0
&lt;&#x2F;span&gt;&lt;span&gt;y_mag: 5.00000e-1
&lt;&#x2F;span&gt;&lt;span&gt;y_phase: 1.57080e0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ polsim --table examples&#x2F;circular_polarizer.toml
&lt;&#x2F;span&gt;&lt;span&gt;+------------+------------+-----------+------------+-----------+
&lt;&#x2F;span&gt;&lt;span&gt;| intensity  | x_mag      | x_phase   | y_mag      | y_phase   |
&lt;&#x2F;span&gt;&lt;span&gt;+------------+------------+-----------+------------+-----------+
&lt;&#x2F;span&gt;&lt;span&gt;| 5.00000e-1 | 5.00000e-1 | 0.00000e0 | 5.00000e-1 | 1.57080e0 |
&lt;&#x2F;span&gt;&lt;span&gt;+------------+------------+-----------+------------+-----------+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The goal is to have the initial and final polarization plotted with &lt;code&gt;gnuplot&lt;&#x2F;code&gt;, and some preliminary work on that front suggests that it shouldn&#x27;t be very difficult.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;future-work&quot;&gt;Future work&lt;a class=&quot;zola-anchor&quot; href=&quot;#future-work&quot; aria-label=&quot;Anchor link for: future-work&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;There&#x27;s a wealth of improvements that could be made to this project, so I&#x27;ll just drop a list of them right here.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Migrate to the Rust 2018 edition.&lt;&#x2F;li&gt;
&lt;li&gt;Add &lt;code&gt;wavelength&lt;&#x2F;code&gt; and &lt;code&gt;pi&lt;&#x2F;code&gt; angle units.&lt;&#x2F;li&gt;
&lt;li&gt;Plot the initial and final polarization ellipses using &lt;code&gt;gnuplot&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Add a way to sweep a parameter to see how the result changes as the input changes.&lt;&#x2F;li&gt;
&lt;li&gt;Improve support for custom optical element types.&lt;&#x2F;li&gt;
&lt;li&gt;Add support for reflections from metals&#x2F;dielectrics (blocked by a bug).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;This was a fun project to work on because it gave me an excuse to bring Rust into my day job, but I&#x27;m ready to focus my efforts on other projects for now. I would be more than happy to mentor anyone that wants to contribute, and I&#x27;ve put a good deal of effort into making sure that the documentation is thorough and easy to read.&lt;&#x2F;p&gt;
&lt;p&gt;As for the state of the Rust ecosystem, I still don&#x27;t think it&#x27;s quite there yet for the average scientist. I felt pretty comfortable with Rust because I&#x27;m a programming nerd, but I still see Python as the tool of choice for most physicists. Here&#x27;s an illustrative example: find a modified Bessel function of the second kind of order 0. In Python (even if you don&#x27;t know what I just asked) your first step is to search the SciPy documentation (the function is called &lt;code&gt;k0&lt;&#x2F;code&gt; there). In Rust, without looking I&#x27;m not confident that function exists yet. In the Python world you know that &lt;code&gt;X&lt;&#x2F;code&gt; exists somewhere, you just need to find it, but that certainty that &lt;code&gt;X&lt;&#x2F;code&gt; exists isn&#x27;t there yet for Rust. Give it time and I think Rust will start to show up in some surprising places.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t want this to come off as too negative towards Rust, I love it and wish more scientific software was written in it. When it comes to handling communication between equipment or data collection, I see Rust being a superpower due to its speed, safety, and ease of use. I&#x27;ve been toying with the idea of reimplementing the program that controls&#x2F;coordinates the equipment in my experiment because I inherited the spaghettiest of spaghetti code, but at the same time I&#x27;d like to graduate at some point.&lt;&#x2F;p&gt;
&lt;p&gt;Like I mentioned at the beginning, this was just meant to document my experience, but hopefully you at least learned a little bit about polarization. Feel free to open an issue on either of the &lt;code&gt;polsim&lt;&#x2F;code&gt; or &lt;code&gt;polarization&lt;&#x2F;code&gt; repositories if you have any questions!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;footnotes&quot;&gt;Footnotes&lt;a class=&quot;zola-anchor&quot; href=&quot;#footnotes&quot; aria-label=&quot;Anchor link for: footnotes&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;It&#x27;s an ultrafast circular-dichroism spectrometer, if you must know.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;2&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;At this point I&#x27;ve been programming for about half as long as I&#x27;ve been doing science, so I&#x27;m not a complete n00b. That last statement is probably inviting the wrath of The Internet. YOLO&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;3&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;APPLY DIRECTLY TO THE FOREHEAD&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;4&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;How is it possible for the polarization to spiral? I&#x27;m glad you asked! You can always break down the polarization into two separate pieces that oscillate perpendiular to one another e.g. x- and y-components. If the two components oscillate in lock-step with each other i.e. in phase with each other, you get linear polarization. If one of the components lags behind the other one by a fixed amount, you get elliptical polarization. Circular polarization is a special case of elliptical polarization for which the two components have the same size and one component lags by a quarter of a cycle (a phase of &lt;code&gt;pi&#x2F;2&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;5&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;Admit it, you thought I was going to make a joke about colons here. You know what they say happens when you assume.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;6&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;5&lt;&#x2F;sup&gt;
&lt;p&gt;For you math-inclined folks, these matrices don&#x27;t commute.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</description>
      </item>
      <item>
          <title>Bringing macros to Python by abusing type annotations</title>
          <pubDate>Sat, 04 Aug 2018 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/abusing-type-annotations/</link>
          <guid>https://tinkering.xyz/abusing-type-annotations/</guid>
          <description xml:base="https://tinkering.xyz/abusing-type-annotations/">&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#introduction&quot; aria-label=&quot;Anchor link for: introduction&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;The desire to bring macros to Python came from my experience with Rust&#x27;s procedural macros, so we&#x27;re going to talk about Rust for a second. If you&#x27;d like to skip ahead to the Python stuff, &lt;a href=&quot;#skip&quot;&gt;click here&lt;&#x2F;a&gt;. Rust is becoming more and more popular by the day for reasons that you&#x27;ve probably heard about:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It&#x27;s really fast.&lt;&#x2F;li&gt;
&lt;li&gt;It has a nice, modern type system.&lt;&#x2F;li&gt;
&lt;li&gt;It prevents lots of memory errors.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, my favorite feature of Rust isn&#x27;t its speed, helpful error messages, etc, but rather its macro system.&lt;&#x2F;p&gt;
&lt;p&gt;There are two types of macros in Rust: declarative and procedural. The real heavy hitters are the procedural macros. The compiler takes your program, parses it into a data structure called an abstract syntax tree (AST), then hands it to a procedural macro. The macro can then do whatever it wants to the AST as long as it hands a valid AST back to the compiler in the end. These are great for code generation. Let&#x27;s see an example.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say I want to parse some command line arguments into this struct:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Opt {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;: PathBuf,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s &lt;s&gt;an app&lt;&#x2F;s&gt; a crate for that: &lt;code&gt;structopt&lt;&#x2F;code&gt;. All we have to do is sprinkle some &lt;code&gt;#[...]&lt;&#x2F;code&gt; things (attributes) into our struct definition. I&#x27;m not teaching you Rust right now, so don&#x27;t worry about the details.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(StructOpt, Debug)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;structopt&lt;&#x2F;span&gt;&lt;span&gt;(name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;basic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Opt {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Enable debug mode
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;structopt&lt;&#x2F;span&gt;&lt;span&gt;(short = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, long = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Set verbosity
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;structopt&lt;&#x2F;span&gt;&lt;span&gt;(short = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, long = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(from_occurrences))]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Output file
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;structopt&lt;&#x2F;span&gt;&lt;span&gt;(short = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;o&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, long = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;(from_os_str))]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;: PathBuf,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler will see the macro and generate all of the code needed to parse command line arguments into the struct &lt;code&gt;Opt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; opt = Opt::from_args();  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; thank you structopt!
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, opt);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s pretty handy, right? All you had to do was define which arguments you were expecting, and the macro took care of the rest!&lt;&#x2F;p&gt;
&lt;p&gt;You can also do less useful things, like blow up your editor with error messages from The Wickerman.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;not-the-bees-editor.jpg&quot; alt=&quot;error message saying &amp;quot;not the bees&amp;quot; pointing to a struct field named &amp;quot;bees&amp;quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;d like to read about that, you can do so here: &lt;a href=&quot;https:&#x2F;&#x2F;tinkering.xyz&#x2F;introduction-to-proc-macros&quot;&gt;link to shameless plug&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;So, here&#x27;s the million dollar question: Can you make Rust-like macros in Python?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a name=&quot;skip&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-am-i-trying-to-build&quot;&gt;What am I trying to build?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-am-i-trying-to-build&quot; aria-label=&quot;Anchor link for: what-am-i-trying-to-build&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s unpack what it means to have Rust-like macros in Python. I&#x27;ll examine this with three questions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;What is a macro?&lt;&#x2F;li&gt;
&lt;li&gt;What&#x27;s special about Rust macros?&lt;&#x2F;li&gt;
&lt;li&gt;What do my Python macros need to do?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;what-is-a-macro&quot;&gt;What is a macro?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-a-macro&quot; aria-label=&quot;Anchor link for: what-is-a-macro&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Usually a macro provides a shorthand for something. In this case, a macro would be a function that takes your class definition as input, reads it, generates some code for you, and returns a new class with the generated code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-s-special-about-rust-macros&quot;&gt;What&#x27;s special about Rust macros?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-special-about-rust-macros&quot; aria-label=&quot;Anchor link for: what-s-special-about-rust-macros&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;A primitive macro system operates by simply replacing one bit of text with another i.e. replacing &lt;code&gt;PY_VERSION&lt;&#x2F;code&gt; with &lt;code&gt;3.6.5&lt;&#x2F;code&gt;. Rust&#x27;s (procedural) macros operate by performing operations on the logical structure of your code (the AST). Rust&#x27;s macros can be applied to struct, enum, function, and module declarations. Furthermore, macros can be applied to the members of structs&#x2F;enums, like in the example above.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-do-my-macros-need-to-do&quot;&gt;What do my macros need to do?&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-do-my-macros-need-to-do&quot; aria-label=&quot;Anchor link for: what-do-my-macros-need-to-do&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I want the macros to provide a convenient alternative to something tedious. That said, this is only a proof of concept, so the problems I&#x27;m solving will be a little contrived. I&#x27;m going to keep the scope narrow and apply my macros only to class definitions. I still want to be able to configure how the macro operates on individual class&#x2F;instance attributes, though.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;research&quot;&gt;Research&lt;a class=&quot;zola-anchor&quot; href=&quot;#research&quot; aria-label=&quot;Anchor link for: research&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I set out to determine if it was even possible to do what I wanted to do. I knew that I could apply a decorator to a class, so that part was covered. The part that would be trickier is attaching information to individual class or instance attributes. Eventually something jumped out at me. Take a look:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    foo: int  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &amp;lt;-- information attached to &amp;quot;foo&amp;quot;!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A type annotation looks like what I want to do, but what if I want to put something other than &lt;code&gt;int&lt;&#x2F;code&gt;, &lt;code&gt;str&lt;&#x2F;code&gt;, &lt;code&gt;List[int]&lt;&#x2F;code&gt;, etc in the annotation? I looked around and remembered that in some cases you put a string where you would normally put the annotation, like so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    foo: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows you to use types that haven&#x27;t been defined yet as an annotation, like when you&#x27;re defining a recursive data structure. So the type annotation doesn&#x27;t have to be an actual class, it can also be a string. Well, what can go in this string? Anything, apparently!&lt;&#x2F;p&gt;
&lt;p&gt;If you read PEP 484 (relevent section &lt;a href=&quot;https:&#x2F;&#x2F;www.python.org&#x2F;dev&#x2F;peps&#x2F;pep-0484&#x2F;#acceptable-type-hints&quot;&gt;here&lt;&#x2F;a&gt;) you&#x27;ll see that the type annotation can actually be any valid Python expression. The implications of that didn&#x27;t really sink in at first, so we&#x27;ll come back to it later.&lt;&#x2F;p&gt;
&lt;p&gt;At this point I realized that I could stick arbitrary information in a string and attach it to a variable. Sure, this wouldn&#x27;t play well with type checkers, or really any sane use case for type annotations, but no one &lt;em&gt;really&lt;&#x2F;em&gt; uses type annotations, right? All the cool kids are doing it, no one will get hurt. Don&#x27;t be such a square!&lt;&#x2F;p&gt;
&lt;p&gt;Ok, so I can store information in the annotations, but how do I read it at some later time? To the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;datamodel.html&quot;&gt;Python data model&lt;&#x2F;a&gt;! I dove into the data model to learn about the guts of Python. I actually got my first CPython contribution from this endeavor.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;cpython-pr.png&quot; alt=&quot;a pull request changing a single letter in some documentation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m still waiting for my core developer invitation. Anyway, I learned that annotations are stored in the &lt;code&gt;__annotations__&lt;&#x2F;code&gt; attribute. The &lt;code&gt;__annotations__&lt;&#x2F;code&gt; attribute is a dictionary where the keys are the attribute names, and the values are the annotations. Consider the following class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    foo: int
&lt;&#x2F;span&gt;&lt;span&gt;    bar: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;anything&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The contents of &lt;code&gt;__annotations__&lt;&#x2F;code&gt; would look like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; MyClass.__annotations__
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;foo&amp;#39;: &amp;lt;class &amp;#39;int&amp;#39;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;#39;bar&amp;#39;: &amp;#39;anything&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now I know I can store information in type annotations, and I know how to retrieve that information. All that&#x27;s left is messing with abstract syntax trees.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;abstract-syntax-trees&quot;&gt;Abstract syntax trees&lt;a class=&quot;zola-anchor&quot; href=&quot;#abstract-syntax-trees&quot; aria-label=&quot;Anchor link for: abstract-syntax-trees&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Parsing code into an abstract syntax tree is something that Python does when it compiles your source code into bytecode. In fact, the &lt;code&gt;ast&lt;&#x2F;code&gt; module contains all of the data structures, or &quot;nodes&quot;, that your Python code can be parsed into. The &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;ast.html&quot;&gt;module documentation&lt;&#x2F;a&gt; doesn&#x27;t do a great job of making it clear which nodes exist or what their attributes are. Instead, I recommend &lt;a href=&quot;https:&#x2F;&#x2F;greentreesnakes.readthedocs.io&#x2F;en&#x2F;latest&#x2F;&quot;&gt;this page&lt;&#x2F;a&gt; if you want to see what&#x27;s at your disposal. For those of you that have never seen or heard of an abstract syntax tree, I&#x27;ll show you the basics by building up the AST of a small code snippet.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with a really basic code snippet: &lt;code&gt;10&lt;&#x2F;code&gt;. This is just the number 10. Exciting. To represent this you create an instance of &lt;code&gt;ast.Num&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;num = ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Num&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What about &lt;code&gt;-10&lt;&#x2F;code&gt;? That&#x27;s more complicated because &lt;code&gt;-&lt;&#x2F;code&gt; is an operator, so &lt;code&gt;-10&lt;&#x2F;code&gt; is &lt;strong&gt;not&lt;&#x2F;strong&gt; just &lt;code&gt;ast.Num(n=-10)&lt;&#x2F;code&gt;. Instead, it&#x27;s this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;num = ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UnaryOp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span&gt;=ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USub&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operand&lt;&#x2F;span&gt;&lt;span&gt;=ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Num&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What if I want to assign &lt;code&gt;-10&lt;&#x2F;code&gt; to a variable &lt;code&gt;x&lt;&#x2F;code&gt;? That&#x27;s an assignment, so we&#x27;ll need an &lt;code&gt;ast.Assign&lt;&#x2F;code&gt; node, but how do you handle &lt;code&gt;x&lt;&#x2F;code&gt;? Any time you reference a variable, you need an &lt;code&gt;ast.Name&lt;&#x2F;code&gt; node. Each &lt;code&gt;Name&lt;&#x2F;code&gt; has an &lt;code&gt;id&lt;&#x2F;code&gt;, which is the name of the variable, and a context, &lt;code&gt;ctx&lt;&#x2F;code&gt;, which indicates whether you&#x27;re getting (&lt;code&gt;ast.Load()&lt;&#x2F;code&gt;) or setting (&lt;code&gt;ast.Store()&lt;&#x2F;code&gt;) the value of the variable. Putting all of that together, the assignment looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# x = -10
&lt;&#x2F;span&gt;&lt;span&gt;num_node = ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;UnaryOp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;op&lt;&#x2F;span&gt;&lt;span&gt;=ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USub&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operand&lt;&#x2F;span&gt;&lt;span&gt;=ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Num&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;x_node = ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;=ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Store&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;assign_node = ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Assign&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;targets&lt;&#x2F;span&gt;&lt;span&gt;=[x_node], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=num_node)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s really all there is to it, so hopefully you get the idea. Building up anything more complicated than that is just a matter of putting the right nodes together. If you want to play around with this, you can also do the reverse:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; ast.parse(&amp;quot;x = -10&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;_ast.Module object at 0x10f5f3208&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that any time you use &lt;code&gt;ast.parse&lt;&#x2F;code&gt;, the result will be a module. The &lt;code&gt;Assign&lt;&#x2F;code&gt; node will be in the &lt;code&gt;body&lt;&#x2F;code&gt; of the &lt;code&gt;Module&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; module = ast.parse(&amp;quot;x = -10&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; module.body[0]
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;_ast.Assign object at 0x101ad4d68&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the string representation isn&#x27;t super helpful. Some libraries that provide useful tools for dealing with ASTs in Python (and printing them in more useful ways) are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;berkerpeksag&#x2F;astor&quot;&gt;astor&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;asottile&#x2F;astpretty&quot;&gt;astpretty&lt;&#x2F;a&gt;. Here&#x27;s the same thing using &lt;code&gt;astpretty&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; import ast
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; from astpretty import pprint
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; pprint(ast.parse(&amp;quot;x = -10&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;Module(
&lt;&#x2F;span&gt;&lt;span&gt;    body=[
&lt;&#x2F;span&gt;&lt;span&gt;        Assign(
&lt;&#x2F;span&gt;&lt;span&gt;			lineno=1,
&lt;&#x2F;span&gt;&lt;span&gt;			col_offset=0,
&lt;&#x2F;span&gt;&lt;span&gt;			targets=[Name(lineno=1, col_offset=0, id=&amp;#39;x&amp;#39;, ctx=Store())],
&lt;&#x2F;span&gt;&lt;span&gt;			value=UnaryOp(
&lt;&#x2F;span&gt;&lt;span&gt;				lineno=1,
&lt;&#x2F;span&gt;&lt;span&gt;				col_offset=4,
&lt;&#x2F;span&gt;&lt;span&gt;				op=USub(),
&lt;&#x2F;span&gt;&lt;span&gt;				operand=Num(lineno=1, col_offset=5, n=10),
&lt;&#x2F;span&gt;&lt;span&gt;			),
&lt;&#x2F;span&gt;&lt;span&gt;		),
&lt;&#x2F;span&gt;&lt;span&gt;	],
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now that I have all of the pieces in place (decorators, type annotations, and ASTs), I can show you what you can do with all of this!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;example-1-inrange&quot;&gt;Example 1 - &lt;code&gt;@inrange&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-1-inrange&quot; aria-label=&quot;Anchor link for: example-1-inrange&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;For my first trick, I&#x27;ve created a decorator, &lt;code&gt;@inrange&lt;&#x2F;code&gt;. If you place the annotation &lt;code&gt;&quot;0 &amp;lt; foo &amp;lt; 3&quot;&lt;&#x2F;code&gt; on a class variable named &lt;code&gt;foo&lt;&#x2F;code&gt;, the decorator will generate a class with a property named &lt;code&gt;foo&lt;&#x2F;code&gt; that only accepts values in the range (0, 3) exclusive. Consider the following class definition:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inrange
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    var: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0 &amp;lt; var &amp;lt; 10&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The decorator will generate a class equivalent to this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    var: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0 &amp;lt; var &amp;lt; 10&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._var = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;property
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._var
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @var.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setter
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;var&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new_value&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; new_value &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;._var = new_value
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;raise &lt;&#x2F;span&gt;&lt;span&gt;ValueError
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here&#x27;s what it looks like in action:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; @inrange
&lt;&#x2F;span&gt;&lt;span&gt;... class MyClass:
&lt;&#x2F;span&gt;&lt;span&gt;...     foo: &amp;quot;0 &amp;lt; foo &amp;lt; 5&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; bar = MyClass()
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; bar.foo = 1  # no problems here!
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; bar.foo = 6  # oh no, greater than 5!
&lt;&#x2F;span&gt;&lt;span&gt;Traceback (most recent call last):
&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&amp;lt;input&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    bar.foo = 6
&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&#x2F;Users&#x2F;zmitchell&#x2F;Projects&#x2F;annotation-abuse&#x2F;annotation_abuse&#x2F;asts.py&amp;quot;, line 1, in foo_setter
&lt;&#x2F;span&gt;&lt;span&gt;    import ast
&lt;&#x2F;span&gt;&lt;span&gt;ValueError: value outside of range 0 &amp;lt; foo &amp;lt; 5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are some weird things here. Note that the line above the &lt;code&gt;ValueError&lt;&#x2F;code&gt; says &lt;code&gt;import ast&lt;&#x2F;code&gt;, even though I didn&#x27;t import the &lt;code&gt;ast&lt;&#x2F;code&gt; module in the shell. I use the &lt;code&gt;ast&lt;&#x2F;code&gt; module to generate code, but I don&#x27;t really know what that&#x27;s about. The error message also says that the error occurs in &lt;code&gt;foo_setter&lt;&#x2F;code&gt;, even though you don&#x27;t have a function called &lt;code&gt;foo_setter&lt;&#x2F;code&gt;. This is a result of the way that I make the properties. For a variable named &lt;code&gt;foo&lt;&#x2F;code&gt; I create the functions &lt;code&gt;foo_getter&lt;&#x2F;code&gt; and &lt;code&gt;foo_setter&lt;&#x2F;code&gt;, create a property with &lt;code&gt;property(foo_getter, foo_setter)&lt;&#x2F;code&gt;, then bind that to the attribute &lt;code&gt;foo&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here are the broad strokes of how this works, assuming you have a class named &lt;code&gt;MyClass&lt;&#x2F;code&gt; and you&#x27;ve annotated a class variable named &lt;code&gt;var&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Grab the annotation from &lt;code&gt;MyClass.__annotations__[&quot;var&quot;]&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Grab the endpoints of the range from the annotation.&lt;&#x2F;li&gt;
&lt;li&gt;Generate ASTs for the getter and setter of &lt;code&gt;var&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Compile the ASTs to Python functions.&lt;&#x2F;li&gt;
&lt;li&gt;Create a property from the compiled functions.&lt;&#x2F;li&gt;
&lt;li&gt;Bind the property to the class.&lt;&#x2F;li&gt;
&lt;li&gt;Create an AST for the &lt;code&gt;__init__&lt;&#x2F;code&gt; method.&lt;&#x2F;li&gt;
&lt;li&gt;Compile the &lt;code&gt;__init__&lt;&#x2F;code&gt; AST to a function.&lt;&#x2F;li&gt;
&lt;li&gt;Bind the &lt;code&gt;__init__&lt;&#x2F;code&gt; function to the class.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each class variable with an annotation is represented by a &lt;code&gt;MacroItem&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MacroItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;var_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;annotation&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.var = var_name
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.annotation = annotation
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.lower = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.upper = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.getter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.setter = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.init_stmt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;These &lt;code&gt;MacroItem&lt;&#x2F;code&gt;s get passed to the functions that extract information from the annotation, generate ASTs, etc. For example, here is the function that generates a getter from a &lt;code&gt;MacroItem&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;item&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    func_name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;{item.var}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_getter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    self_arg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;annotation&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    func_args = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arguments&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;=[self_arg],
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kwonlyargs&lt;&#x2F;span&gt;&lt;span&gt;=[],
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vararg&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kwarg&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;defaults&lt;&#x2F;span&gt;&lt;span&gt;=[],
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kw_defaults&lt;&#x2F;span&gt;&lt;span&gt;=[],
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    inst_var = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Attribute&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;=ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Load&lt;&#x2F;span&gt;&lt;span&gt;()), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;{item.var}&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;=ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Load&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    ret_stmt = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Return&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;=inst_var)
&lt;&#x2F;span&gt;&lt;span&gt;    func_node = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FunctionDef&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=func_name,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;=func_args,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;=[ret_stmt],
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decorator_list&lt;&#x2F;span&gt;&lt;span&gt;=[],
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;returns&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;    mod_node = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Module&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;=[func_node])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ast_to_func&lt;&#x2F;span&gt;&lt;span&gt;(mod_node, func_name)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that you can&#x27;t compile a &lt;code&gt;FunctionDef&lt;&#x2F;code&gt; node by itself, you have to wrap it in a &lt;code&gt;Module&lt;&#x2F;code&gt; node first. Here is the magic that compiles an AST into a function.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ast_to_func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    ast.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fix_missing_locations&lt;&#x2F;span&gt;&lt;span&gt;(node)
&lt;&#x2F;span&gt;&lt;span&gt;    code = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(node, __file__, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    context = {}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt;(code, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;globals&lt;&#x2F;span&gt;&lt;span&gt;(), context)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;context[name]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This definitively shows that you can make Rust-like macros in Python. That&#x27;s not to say that it&#x27;s easy or recommended though. Constructing an AST is definitely (the AST for &lt;code&gt;-10&lt;&#x2F;code&gt; is ~4x as many characters as &lt;code&gt;10&lt;&#x2F;code&gt;), so it can be tedious. It was a fun exercise, but I&#x27;ll show you a better way to make code-generating macros.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;example-2-notify&quot;&gt;Example 2 - &lt;code&gt;@notify&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-2-notify&quot; aria-label=&quot;Anchor link for: example-2-notify&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;For my next trick, I&#x27;ve made a decorator &lt;code&gt;@notify&lt;&#x2F;code&gt; that will print a message to the terminal when you try to assign a new value to a class or instance variable marked with a specific annotation.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;notify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    var: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;this one&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.x = x
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.y: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;this one&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you try typing that into the Python shell, it will crash. If you&#x27;re working in the shell and you decorate a class with &lt;code&gt;@notify&lt;&#x2F;code&gt; that has an &lt;code&gt;__init__&lt;&#x2F;code&gt; method, it will crash. I have no idea what that&#x27;s about. If you want to try this in the shell, put the annotation on a class variable. You can put whatever you want into a file though, and it will work just fine. Let&#x27;s see what happens when you try to assign to a variable you&#x27;ve marked.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;annotation_abuse.notify &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;notify
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;notify
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.x = x
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.y: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;this one&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    foo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    foo.y = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run this, and you&#x27;ll see a familiar face:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;   _________________________________________________
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;                                                 \
&lt;&#x2F;span&gt;&lt;span&gt;  | It looks like you&amp;#39;re trying to update MyClass.y |
&lt;&#x2F;span&gt;&lt;span&gt;  |                 from &amp;quot;0&amp;quot; to &amp;quot;1&amp;quot;.                |
&lt;&#x2F;span&gt;&lt;span&gt;  |       Would you like some help with that?       |
&lt;&#x2F;span&gt;&lt;span&gt;  \_________________________________________________&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    \
&lt;&#x2F;span&gt;&lt;span&gt;     \
&lt;&#x2F;span&gt;&lt;span&gt;        __
&lt;&#x2F;span&gt;&lt;span&gt;       &#x2F;  \
&lt;&#x2F;span&gt;&lt;span&gt;       |  |
&lt;&#x2F;span&gt;&lt;span&gt;       @  @
&lt;&#x2F;span&gt;&lt;span&gt;       || |&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;       || ||
&lt;&#x2F;span&gt;&lt;span&gt;       |\_&#x2F;|
&lt;&#x2F;span&gt;&lt;span&gt;       \___&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Let Clippy update the value? (y&#x2F;n):
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you say yes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Let Clippy update the value? (y&#x2F;n): y
&lt;&#x2F;span&gt;&lt;span&gt;   _____________
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;             \
&lt;&#x2F;span&gt;&lt;span&gt;  | No problem! |
&lt;&#x2F;span&gt;&lt;span&gt;  \_____________&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    \
&lt;&#x2F;span&gt;&lt;span&gt;     \
&lt;&#x2F;span&gt;&lt;span&gt;        __
&lt;&#x2F;span&gt;&lt;span&gt;       &#x2F;  \
&lt;&#x2F;span&gt;&lt;span&gt;       |  |
&lt;&#x2F;span&gt;&lt;span&gt;       @  @
&lt;&#x2F;span&gt;&lt;span&gt;       || |&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;       || ||
&lt;&#x2F;span&gt;&lt;span&gt;       |\_&#x2F;|
&lt;&#x2F;span&gt;&lt;span&gt;       \___&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you say no:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Let Clippy update the value? (y&#x2F;n): n
&lt;&#x2F;span&gt;&lt;span&gt;   ______
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;      \
&lt;&#x2F;span&gt;&lt;span&gt;  | FINE |
&lt;&#x2F;span&gt;&lt;span&gt;  \______&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    \
&lt;&#x2F;span&gt;&lt;span&gt;     \
&lt;&#x2F;span&gt;&lt;span&gt;        __
&lt;&#x2F;span&gt;&lt;span&gt;       &#x2F;  \
&lt;&#x2F;span&gt;&lt;span&gt;       \  &#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;       @  @
&lt;&#x2F;span&gt;&lt;span&gt;       || |&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;       || ||
&lt;&#x2F;span&gt;&lt;span&gt;       |\_&#x2F;|
&lt;&#x2F;span&gt;&lt;span&gt;       \___&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This example was easier in some ways, but harder in others. I&#x27;m not constructing ASTs, so the code is much less verbose. On the other hand, I&#x27;m overriding &lt;code&gt;MyClass.__setattr__&lt;&#x2F;code&gt; in order to intercept writes to the marked variables. Boy oh boy was that a can of worms.&lt;&#x2F;p&gt;
&lt;p&gt;Annotations on class variables can be pulled from &lt;code&gt;MyClass.__annotations__&lt;&#x2F;code&gt; (like the previous example), but annotations that appear inside &lt;code&gt;__init__&lt;&#x2F;code&gt; don&#x27;t show up there. To find those annotations, I parse &lt;code&gt;__init__&lt;&#x2F;code&gt; into an AST (look, I&#x27;m sorry, I couldn&#x27;t help myself), then traverse the tree looking for things that have the annotation &lt;code&gt;&quot;this one&quot;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Once I&#x27;ve built a list of attributes to watch, I need to intercept writes to those attributes. I knew I could intercept writes to certain attributes by replacing them with properties, but I wondered if there was a different way to do it (just for kicks). I went back to the documentation for the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;datamodel.html&quot;&gt;data model&lt;&#x2F;a&gt; and read up on &lt;code&gt;__setattr__&lt;&#x2F;code&gt;. The &lt;code&gt;__setattr__&lt;&#x2F;code&gt; method gets called when you try to set the value of an attribute, so overriding &lt;code&gt;__setattr__&lt;&#x2F;code&gt; will let me intercept writes to the attributes I care about.&lt;&#x2F;p&gt;
&lt;p&gt;I generate a new &lt;code&gt;__setattr__&lt;&#x2F;code&gt; as a closure, as you can see below:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;make_setattr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cls&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;var_names&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new_setattr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attr_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new_value&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;attr_name not in var_names:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setattr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, attr_name, new_value)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# The instance variable will be set for the first time during
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# __init__, but we don&amp;#39;t want to prompt the user on instantiation.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;attr_name not in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.__dict__.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setattr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, attr_name, new_value)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;        current_value = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.__dict__[attr_name]
&lt;&#x2F;span&gt;&lt;span&gt;        attr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cls&lt;&#x2F;span&gt;&lt;span&gt;.__name__ + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + attr_name
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;show_message&lt;&#x2F;span&gt;&lt;span&gt;(attr, current_value, new_value)
&lt;&#x2F;span&gt;&lt;span&gt;        user_resp = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt_user&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;user_resp == Response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;no_problem_message&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setattr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, attr_name, new_value)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;user_resp == Response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;angry_message&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;new_setattr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I model the user&#x27;s response with an enum, storing the acceptable responses in the value of each enum variant to make it easier to validate the response. The &lt;code&gt;Response.INVALID&lt;&#x2F;code&gt; case is handled in the &lt;code&gt;prompt_user&lt;&#x2F;code&gt; function. Rust taught me how powerful enums can be, so now I want to use them everywhere!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Enum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YES &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;yes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Yes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NO &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;N&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;no&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;No&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INVALID &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;interpret_resp&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Interpret the user&amp;#39;s response.&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    resp = text.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;resp in Response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YES&lt;&#x2F;span&gt;&lt;span&gt;.value:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YES
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;resp in Response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NO&lt;&#x2F;span&gt;&lt;span&gt;.value:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NO
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INVALID
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One thing I found confusing during this process is that lots of documentation surrounding &lt;code&gt;__setattr__&lt;&#x2F;code&gt; says that you should call the super class&#x27;s &lt;code&gt;__setattr__&lt;&#x2F;code&gt; when you&#x27;re overriding &lt;code&gt;__setattr__&lt;&#x2F;code&gt;, and most documentation just cites &lt;code&gt;object.__setattr__(self, name, value)&lt;&#x2F;code&gt;. I found the documentation around this to be sparse, at best, and I only accidentally stumbled onto a solution. Here&#x27;s what happened.&lt;&#x2F;p&gt;
&lt;p&gt;My working solution uses &lt;code&gt;setattr&lt;&#x2F;code&gt;, so let&#x27;s replace &lt;code&gt;setattr(self, attr_name, new_value)&lt;&#x2F;code&gt; with &lt;code&gt;object.__setattr__(self, attr_name, new_value)&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;TypeError: can&amp;#39;t apply this __setattr__ to type object
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Huh? I searched the internet for what this error message meant, and my understanding is that it&#x27;s related to setting new attributes on built-in types. So, that tells me that I was accidentally trying to set a new attribute on &lt;code&gt;object&lt;&#x2F;code&gt;. Using &lt;code&gt;super(cls, self).__setattr__&lt;&#x2F;code&gt; gives you the same error.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try &lt;code&gt;super().__setattr__(self, attr_name, new_value)&lt;&#x2F;code&gt; and see if it just sorts itself out:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;RuntimeError: super(): __class__ cell not found
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, this one actually makes sense (&lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;reference&#x2F;datamodel.html#creating-the-class-object&quot;&gt;see here&lt;&#x2F;a&gt;). In short, I&#x27;m calling &lt;code&gt;super()&lt;&#x2F;code&gt; in a function that&#x27;s not bound to a class when it&#x27;s defined, so it doesn&#x27;t know what class it belongs to. I think.&lt;&#x2F;p&gt;
&lt;p&gt;Eventually I just tried &lt;code&gt;setattr&lt;&#x2F;code&gt; and it worked. I was pressed for time preparing this for a lightning talk, so I didn&#x27;t have time to really dig into the issue. If someone knows what&#x27;s going on, let me know!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;taking-it-to-the-next-level&quot;&gt;Taking it to the next level&lt;a class=&quot;zola-anchor&quot; href=&quot;#taking-it-to-the-next-level&quot; aria-label=&quot;Anchor link for: taking-it-to-the-next-level&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I presented the two examples above in a lightning talk at PyOhio 2018. The reception was good, and I ended up talking to Dan Lindeman and Jace Browning in an open space about alternative uses for type annotations. As we were talking, we came to a realization.&lt;&#x2F;p&gt;
&lt;p&gt;Remember earlier when I said that a type annotation can be any valid Python expression? Well, lots of things are valid Python expressions. Say, for instance, a &lt;code&gt;lambda&lt;&#x2F;code&gt;. Take a look:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; class MyClass:
&lt;&#x2F;span&gt;&lt;span&gt;...     foo: lambda x: 0 &amp;lt; x &amp;lt; 5
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; MyClass.__annotations__[&amp;quot;foo&amp;quot;](3)
&lt;&#x2F;span&gt;&lt;span&gt;True
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you&#x27;re not amazed that this is possible, check your pulse. This is saying that you can attach entire functions to an attribute, not just a string or a type! It&#x27;s like every variable carries around a little suitcase that can hold (almost) anything you want!&lt;&#x2F;p&gt;
&lt;p&gt;I think I&#x27;m done with this particular project for now, but I&#x27;m sure there&#x27;s all kinds of &lt;s&gt;terrible&lt;&#x2F;s&gt; wonderful things you can do with this. If you have any ideas, I&#x27;d love to hear them! The code for all of this can be found on my GitHub at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;annotation-abuse&quot;&gt;zmitchell&#x2F;annotation-abuse&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Using Python&#x27;s asyncio with serial devices</title>
          <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/async-serial/</link>
          <guid>https://tinkering.xyz/async-serial/</guid>
          <description xml:base="https://tinkering.xyz/async-serial/">&lt;p&gt;I&#x27;m an experimental physicist, so part of my job entails writing software that orchestrates equipment in my experiment. Most of the code that runs my experiment is written in a proprietary scripting language that I guarantee none of you have ever heard of. The old code is brittle, difficult to debug, and generally makes it too much of a pain to add features unless absolutely necessary. Lately I&#x27;ve been thinking about how I would do a modernized rewrite in Python.
&lt;a name=&quot;continue-reading&quot;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you&#x27;re working in an industrial, IoT, or scientific setting you might find yourself communicating with various devices via serial protocols. In my experience, ASCII-over-serial is the JSON of the scientific world in the sense that just about any piece of equipment you buy will have some sort of ASCII&#x2F;serial support. For example, every single piece of equipment in my experiment uses ASCII-over-serial.&lt;&#x2F;p&gt;
&lt;p&gt;Lots of serial devices still default to a baud rate (bitrate) of 9600, or ~830us per character (byte). Your processor is running at several GHz. Furthermore, a read operation that times out will block the whole time it&#x27;s waiting. Have some empathy for the machine. Give it permission to do something interesting when it would otherwise be dying of boredom.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve written this article because despite &lt;code&gt;asyncio&lt;&#x2F;code&gt; blowing up the Python world, and despite &lt;a href=&quot;https:&#x2F;&#x2F;pyserial.readthedocs.io&#x2F;en&#x2F;latest&#x2F;pyserial.html&quot;&gt;&lt;code&gt;pyserial&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (the de-facto serial library) providing an &lt;code&gt;asyncio&lt;&#x2F;code&gt;-compatible module, there is basically nothing written about how to actually &lt;em&gt;use&lt;&#x2F;em&gt; these two things together. Let&#x27;s fix that.&lt;&#x2F;p&gt;
&lt;p&gt;A quick note before I get your hopes up: async serial doesn&#x27;t yet work on Windows. Furthermore, the async serial functionality is listed as &quot;experimental,&quot; so maybe don&#x27;t bet your entire business on it.&lt;&#x2F;p&gt;
&lt;p&gt;Alright, enough hedging, let&#x27;s get down to business.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;virtual-serial-ports-with-socat&quot;&gt;Virtual serial ports with &lt;code&gt;socat&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#virtual-serial-ports-with-socat&quot; aria-label=&quot;Anchor link for: virtual-serial-ports-with-socat&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;It would be a real shame if you needed a real serial device to even try this out. Luckily, some smart people made a tool called &lt;a href=&quot;http:&#x2F;&#x2F;www.dest-unreach.org&#x2F;socat&#x2F;&quot;&gt;&lt;code&gt;socat&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; which lets you create virtual serial ports. Not only is this great for just tooling around, but it also means that you can test your serial-facing code in a CI environment as opposed to using a hardware loopback adapter or sticking a wire into the TX&#x2F;RX pins of a serial cable (experimental physicists are half Einstein, half MacGyver).&lt;&#x2F;p&gt;
&lt;p&gt;This is the command I&#x27;ll use to create a pair of virtual serial ports:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socat -d -d -v&lt;&#x2F;span&gt;&lt;span&gt; pty,rawer,echo=0,link=.&#x2F;reader pty,rawer,echo=0,link=.&#x2F;writer
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-d -d&lt;&#x2F;code&gt; specifies the logging level.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-v&lt;&#x2F;code&gt; writes the data sent to each device to the terminal.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pty&lt;&#x2F;code&gt; specifies that the device should be a pseudoterminal.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rawer&lt;&#x2F;code&gt; is the sound a lion makes.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;echo&lt;&#x2F;code&gt; specifies whether each port should echo the data sent to it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;link&lt;&#x2F;code&gt; is explained below.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When you run this command &lt;code&gt;socat&lt;&#x2F;code&gt; creates two virtual serial ports in &lt;code&gt;&#x2F;dev&#x2F;&lt;&#x2F;code&gt; that are connected to one another, but it&#x27;s not guaranteed to connect to those same devices every time. To make this more deterministic you can use the &lt;code&gt;link=&amp;lt;path&amp;gt;&lt;&#x2F;code&gt; option which creates a symlink at &lt;code&gt;&amp;lt;path&amp;gt;&lt;&#x2F;code&gt; to the device in &lt;code&gt;&#x2F;dev&#x2F;&lt;&#x2F;code&gt;. I&#x27;ve created two symlinks located at &lt;code&gt;.&#x2F;reader&lt;&#x2F;code&gt; and &lt;code&gt;.&#x2F;writer&lt;&#x2F;code&gt; so that I know exactly which paths to use when connecting to the serial ports in Python. There&#x27;s a variety of other options that can be specified when using &lt;code&gt;socat&lt;&#x2F;code&gt;, so I encourage you to take a look at the &lt;a href=&quot;http:&#x2F;&#x2F;www.dest-unreach.org&#x2F;socat&#x2F;doc&#x2F;socat.html&quot;&gt;docs&lt;&#x2F;a&gt; if you&#x27;re interested in learning more.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;synchronous-serial-communication&quot;&gt;Synchronous serial communication&lt;a class=&quot;zola-anchor&quot; href=&quot;#synchronous-serial-communication&quot; aria-label=&quot;Anchor link for: synchronous-serial-communication&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;If you&#x27;re using a serial port right now in Python, you&#x27;re probably using the &lt;code&gt;pyserial&lt;&#x2F;code&gt; library to do something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;serial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Serial
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ser = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Serial&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;dev&#x2F;ttysomething&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baudrate&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;ser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;ser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(num_bytes)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You create a &lt;code&gt;Serial&lt;&#x2F;code&gt; object by telling it which device to connect to and how the connection should be configured. Once you have the &lt;code&gt;Serial&lt;&#x2F;code&gt; object you can send or receive bytes from the serial port via the &lt;code&gt;Serial.write&lt;&#x2F;code&gt; and &lt;code&gt;Serial.read&lt;&#x2F;code&gt; methods respectively. To create a class representing some equipment that uses this connection, you can just pass the &lt;code&gt;Serial&lt;&#x2F;code&gt; object into the constructor.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;serial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Serial
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MeasurementDevice&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ser&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.ser = ser
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.idn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_identifier&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.ser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;?IDN&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        response_length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.idn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.ser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;(response_length)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;foo = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Serial&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;dev&#x2F;ttysomething&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baudrate&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9600&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;my_device = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MeasurementDevice&lt;&#x2F;span&gt;&lt;span&gt;(foo)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You could of course just create the connection inside the constructor, but if your class takes the &lt;code&gt;Serial&lt;&#x2F;code&gt; object as an argument you can provide it objects configured in different ways in different situations i.e. configured to connect to &lt;code&gt;&#x2F;dev&#x2F;something&lt;&#x2F;code&gt; in production and configured to connect to &lt;code&gt;&#x2F;foo&#x2F;bar&lt;&#x2F;code&gt; in tests.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-asynchronous-story&quot;&gt;The asynchronous story&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-asynchronous-story&quot; aria-label=&quot;Anchor link for: the-asynchronous-story&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;strong&gt;Aside:&lt;&#x2F;strong&gt; I will not be covering the basics of &lt;code&gt;asyncio&lt;&#x2F;code&gt;, that is beyond the scope of this post.&lt;&#x2F;p&gt;
&lt;p&gt;It would be great if &lt;a href=&quot;http:&#x2F;&#x2F;pyserial-asyncio.readthedocs.io&#x2F;en&#x2F;latest&#x2F;index.html&quot;&gt;&lt;code&gt;pyserial-asyncio&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; provided a magically async version of the &lt;code&gt;Serial&lt;&#x2F;code&gt; class, but that doesn&#x27;t exist yet. Here is a list of what &lt;code&gt;pyserial-asyncio&lt;&#x2F;code&gt; does provide:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;serial_asyncio.SerialTransport&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;serial_asyncio.create_serial_connection&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;serial_asyncio.open_serial_connection&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;code&gt;SerialTransport&lt;&#x2F;code&gt; class is a subclass of &lt;code&gt;asyncio.Transport&lt;&#x2F;code&gt;, and is really what allows all of this async serial stuff to work. Setting that aside, there are two ways to bring async to your serial code:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a subclass of &lt;code&gt;asyncio.Protocol&lt;&#x2F;code&gt; that uses &lt;code&gt;serial_asyncio.SerialTransport&lt;&#x2F;code&gt; as its transport.&lt;&#x2F;li&gt;
&lt;li&gt;Generate an &lt;code&gt;asyncio.StreamReader&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;asyncio.StreamWriter&lt;&#x2F;code&gt; pair.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I consider subclassing &lt;code&gt;asyncio.Protocol&lt;&#x2F;code&gt; to be the hard way, so we&#x27;ll look at that first.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;subclassing-asyncio-protocol&quot;&gt;Subclassing &lt;code&gt;asyncio.Protocol&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#subclassing-asyncio-protocol&quot; aria-label=&quot;Anchor link for: subclassing-asyncio-protocol&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;The &lt;code&gt;asyncio&lt;&#x2F;code&gt; module provides some helpful classes for handling asynchronous communication over a network connection. Two pieces of that puzzle are &lt;code&gt;asyncio.Transport&lt;&#x2F;code&gt; and &lt;code&gt;asyncio.Protocol&lt;&#x2F;code&gt;. A transport represents a type of connection, and handles the buffering and I&#x2F;O. A protocol, which uses a transport, is generally responsible for telling the transport what to write, and for interpreting the data coming from the transport.&lt;&#x2F;p&gt;
&lt;p&gt;You tell your protocol how to behave by implementing a set of callbacks (see the &lt;a href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;asyncio-protocol.html#protocols&quot;&gt;docs&lt;&#x2F;a&gt; for the list of callbacks). These callbacks are called by the transport in response to certain events i.e. when a connection is opened, when data arrives, etc. The default implementations of the callbacks are all empty, so we only need to override the methods that we&#x27;re actually interested in. The callbacks we&#x27;ll focus on are &lt;code&gt;connection_made&lt;&#x2F;code&gt;, &lt;code&gt;connection_lost&lt;&#x2F;code&gt;, and &lt;code&gt;data_received&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see an example. Suppose I have a device that produces ASCII messages that are terminated with a newline character, and suppose I want to read and print those messages. I&#x27;ll make my imaginary device using one protocol subclass (&lt;code&gt;Writer&lt;&#x2F;code&gt;), and I&#x27;ll read the messages it sends with another protocol subclass (&lt;code&gt;Reader&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;writer&quot;&gt;&lt;code&gt;Writer&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#writer&quot; aria-label=&quot;Anchor link for: writer&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here is the protocol subclass that will send the messages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Writer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;asyncio.Protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;connection_made&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transport&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Store the serial transport and schedule the task to send data.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.transport = transport
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Writer connection created&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensure_future&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Writer.send() scheduled&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;connection_lost&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exc&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Writer closed&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Send four newline-terminated messages, one byte at a time.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;message:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.transport.serial.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;([b]))
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Writer sent: &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;([b])}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.transport.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;connection_made&lt;&#x2F;code&gt; and &lt;code&gt;connection_lost&lt;&#x2F;code&gt; methods will each be called once per connection. If you need to do any setup or teardown, those methods are a good place to do it. The transport passed to &lt;code&gt;connection_made&lt;&#x2F;code&gt; will be a &lt;code&gt;SerialTransport&lt;&#x2F;code&gt;, and it will have a field &lt;code&gt;SerialTransport.serial&lt;&#x2F;code&gt; that is a &lt;code&gt;Serial&lt;&#x2F;code&gt; instance. We&#x27;ll use this &lt;code&gt;Serial&lt;&#x2F;code&gt; instance to read and write data to the serial port.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve defined a coroutine function &lt;code&gt;send&lt;&#x2F;code&gt; that is responsible for sending messages a single character at a time with a delay of 0.5 seconds between characters. I&#x27;ve made &lt;code&gt;send&lt;&#x2F;code&gt; a coroutine function rather than a normal function because I want there to be a delay between characters, but calling &lt;code&gt;time.sleep(0.5)&lt;&#x2F;code&gt; would block the whole program, which kind of defeats the purpose when I&#x27;m trying to teach you about non-blocking I&#x2F;O.&lt;&#x2F;p&gt;
&lt;p&gt;When you want to close the connection you call the &lt;code&gt;Transport.close&lt;&#x2F;code&gt; method, which will trigger the &lt;code&gt;Protocol.connection_lost&lt;&#x2F;code&gt; callback. I&#x27;ve sprinkled in some &lt;code&gt;print&lt;&#x2F;code&gt; statements so that if you run this on your own you&#x27;ll see the flow of execution and things being scheduled on the event loop.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reader&quot;&gt;&lt;code&gt;Reader&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#reader&quot; aria-label=&quot;Anchor link for: reader&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Here is the protocol subclass that will receive messages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;asyncio.Protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;connection_made&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transport&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Store the serial transport and prepare to receive data.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.transport = transport
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.msgs_recvd = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reader connection created&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;data_received&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Store characters until a newline is received.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf += data
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf:
&lt;&#x2F;span&gt;&lt;span&gt;            lines = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf = lines[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# whatever was left over
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;lines[:-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reader received: &lt;&#x2F;span&gt;&lt;span&gt;{line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;()}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.msgs_recvd += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.msgs_recvd == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.transport.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;connection_lost&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exc&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reader closed&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This time in &lt;code&gt;connection_made&lt;&#x2F;code&gt; I create an emtpy &lt;code&gt;bytes&lt;&#x2F;code&gt; object that I will use to store the received characters. For the sake of brevity I also store a count of how many complete messages I&#x27;ve received, and I&#x27;ll use this as my termination condition since I know exactly how many messages that &lt;code&gt;Writer&lt;&#x2F;code&gt; will send (I designed it after all).&lt;&#x2F;p&gt;
&lt;p&gt;The interesting part of &lt;code&gt;Reader&lt;&#x2F;code&gt; is &lt;code&gt;data_received&lt;&#x2F;code&gt;. You aren&#x27;t guaranteed whether you receive data byte-by-byte or in chunks, so doing the comparison &lt;code&gt;data == b&#x27;\n&#x27;&lt;&#x2F;code&gt; isn&#x27;t guaranteed to work. Instead, I just add the new data to the buffer and then check whether there&#x27;s a newline in there somewhere. If there is, I split the buffer on the newlines and increment the number of messages that have been received. I stop once I&#x27;ve read the number of messages that I know &lt;code&gt;Writer&lt;&#x2F;code&gt; will send.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-rest&quot;&gt;The rest&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-rest&quot; aria-label=&quot;Anchor link for: the-rest&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve shown you the interesting bits, so here&#x27;s the rest of the stuff that you need to run the program (I&#x27;ve put the whole program on GitHub &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;async-serial&#x2F;blob&#x2F;master&#x2F;async_serial_protocol.py&quot;&gt;here&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;asyncio
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;serial_asyncio
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Reader, Writer
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;loop = asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_event_loop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;reader = serial_asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create_serial_connection&lt;&#x2F;span&gt;&lt;span&gt;(loop, Reader, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;reader&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baudrate&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;115200&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;writer = serial_asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create_serial_connection&lt;&#x2F;span&gt;&lt;span&gt;(loop, Writer, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;writer&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baudrate&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;115200&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensure_future&lt;&#x2F;span&gt;&lt;span&gt;(reader)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reader scheduled&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensure_future&lt;&#x2F;span&gt;&lt;span&gt;(writer)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Writer scheduled&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;call_later&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, loop.stop)
&lt;&#x2F;span&gt;&lt;span&gt;loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run_forever&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Done&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here I&#x27;m importing the requisite modules and setting all of the async stuff into motion. The &lt;code&gt;create_serial_connection&lt;&#x2F;code&gt; function takes a protocol subclass along with any arguments you want to pass to the constructor of &lt;code&gt;Serial&lt;&#x2F;code&gt; i.e. &lt;code&gt;baudrate&lt;&#x2F;code&gt;. The value returned by &lt;code&gt;create_serial_connection&lt;&#x2F;code&gt; is a coroutine object that creates connections to that particular serial port. Finally, I schedule the execution of the &lt;code&gt;reader&lt;&#x2F;code&gt; and &lt;code&gt;writer&lt;&#x2F;code&gt; coroutine objects, and schedule the loop to stop 10 seconds later.&lt;&#x2F;p&gt;
&lt;p&gt;If all goes well, you should see something like this in your terminal:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Reader scheduled
&lt;&#x2F;span&gt;&lt;span&gt;Writer scheduled
&lt;&#x2F;span&gt;&lt;span&gt;Reader connection created
&lt;&#x2F;span&gt;&lt;span&gt;Writer connection created
&lt;&#x2F;span&gt;&lt;span&gt;Writer.send() scheduled
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;f&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;o&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;o&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;\n&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Reader received: foo
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;b&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;r&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;\n&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Reader received: bar
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;b&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;a&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;z&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;\n&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Reader received: baz
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;q&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;u&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;x&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer sent: b&amp;#39;\n&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Writer closed
&lt;&#x2F;span&gt;&lt;span&gt;Reader received: qux
&lt;&#x2F;span&gt;&lt;span&gt;Reader closed
&lt;&#x2F;span&gt;&lt;span&gt;Done
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is a pretty trivial example. Neither protocol needs to communicate with the outside world, so they basically just go off and do their own thing. Subclassing &lt;code&gt;Protocol&lt;&#x2F;code&gt; gives you lots of control over the behavior of the connection, but it&#x27;s not immediately obvious how you get data &lt;em&gt;out&lt;&#x2F;em&gt; of your &lt;code&gt;Protocol&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One method is to override the default constructor as a way of storing some kind of connection to the outside world. In the constructor you&#x27;ll take an argument that is a resource shared between your protocol subclass and the rest of your code. This resource could be an &lt;code&gt;asyncio.Queue&lt;&#x2F;code&gt;, for instance. Here&#x27;s how that would look:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;asyncio
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Reader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;asyncio.Protocol&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Receives newline-terminated messages and places them on a queue.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.transport = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.queue = queue
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;connection_made&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;transport&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.transport = transport
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;data_received&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;Store received messages on the queue.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf += data
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf:
&lt;&#x2F;span&gt;&lt;span&gt;            lines = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.buf = lines[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# whatever was left over
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;lines[:-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;                asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensure_future&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.queue.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(line))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the constructor I store the queue, and in &lt;code&gt;data_received&lt;&#x2F;code&gt; I place complete messages onto the queue as they arrive. The &lt;code&gt;create_serial_connection&lt;&#x2F;code&gt; function won&#x27;t pass anything to the constructor of your protocol subclass, so you&#x27;ll need to somehow store the queue before handing the subclass to &lt;code&gt;create_serial_connection&lt;&#x2F;code&gt;. This is exactly the kind of problem that &lt;code&gt;functools.partial&lt;&#x2F;code&gt; was meant to solve. The &lt;code&gt;partial&lt;&#x2F;code&gt; function lets you specify some of the arguments to a function right now, and get back a function that takes the remaining arguments. In our case we&#x27;re specifying the arguments to the constructor of &lt;code&gt;Reader&lt;&#x2F;code&gt;, and getting back something that will create &lt;code&gt;Reader&lt;&#x2F;code&gt; instances without needing any arguments.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;asyncio
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;serial_asyncio
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;functools &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;partial
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;my_queue = asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Queue&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;reader_with_queue = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;partial&lt;&#x2F;span&gt;&lt;span&gt;(Reader, my_queue)
&lt;&#x2F;span&gt;&lt;span&gt;loop = asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_event_loop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;reader = serial_asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create_serial_connection&lt;&#x2F;span&gt;&lt;span&gt;(loop, reader_with_queue, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;port_name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baudrate&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;115200&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ve modified the &lt;code&gt;Reader&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;Writer&lt;&#x2F;code&gt; example to use a queue as described above and put it &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;async-serial&#x2F;blob&#x2F;master&#x2F;async_serial_protocol_queue.py&quot;&gt;here&lt;&#x2F;a&gt;. This obviously works, but it feels like a lot of work to do something relatively simple. Isn&#x27;t there an easier way?&lt;&#x2F;p&gt;
&lt;h1 id=&quot;streams&quot;&gt;Streams&lt;a class=&quot;zola-anchor&quot; href=&quot;#streams&quot; aria-label=&quot;Anchor link for: streams&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;m glad you asked! As mentioned above, subclassing &lt;code&gt;asyncio.Protocol&lt;&#x2F;code&gt; has its drawbacks. A simpler solution is to use the &lt;code&gt;serial_asyncio.open_serial_connection&lt;&#x2F;code&gt; function (note the difference in names: &lt;code&gt;create_serial_connection&lt;&#x2F;code&gt; vs. &lt;code&gt;open_serial_connection&lt;&#x2F;code&gt;) to generate an &lt;code&gt;asyncio.StreamReader&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;asyncio.StreamWriter&lt;&#x2F;code&gt; pair.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;reader, writer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;serial_asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open_serial_connection&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;your_device&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baudrate&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;115200&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s no need to subclass anything, you just call a function. The &lt;code&gt;url=&#x27;&amp;lt;your_device&amp;gt;&#x27;&lt;&#x2F;code&gt; bit is a little odd (what do URLs have to do with anything?)&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#1&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, but &lt;code&gt;&amp;lt;your_device&amp;gt;&lt;&#x2F;code&gt; is just the name of the serial device i.e. &lt;code&gt;&#x2F;dev&#x2F;ttysomething&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Using these two objects could not be easier. If you want to read from your serial device, you call one of the &lt;code&gt;read&lt;&#x2F;code&gt; coroutine methods on your &lt;code&gt;StreamReader&lt;&#x2F;code&gt; (&lt;code&gt;read&lt;&#x2F;code&gt;, &lt;code&gt;readexactly&lt;&#x2F;code&gt;, &lt;code&gt;readuntil&lt;&#x2F;code&gt;, or &lt;code&gt;readline&lt;&#x2F;code&gt;). If you want to write to your serial device, you call the &lt;code&gt;write&lt;&#x2F;code&gt; method on your &lt;code&gt;StreamWriter&lt;&#x2F;code&gt;. Let&#x27;s see an example.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;streams-and-queues&quot;&gt;Streams and Queues&lt;a class=&quot;zola-anchor&quot; href=&quot;#streams-and-queues&quot; aria-label=&quot;Anchor link for: streams-and-queues&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s say that I have two devices, &lt;code&gt;reader&lt;&#x2F;code&gt; and &lt;code&gt;writer&lt;&#x2F;code&gt;, and one of them will send messages to the other. Here&#x27;s the entire program:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;asyncio
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;serial_asyncio
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loop&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    reader, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;serial_asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open_serial_connection&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;reader&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baudrate&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;115200&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reader created&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, writer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;serial_asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;open_serial_connection&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;writer&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baudrate&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;115200&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Writer created&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    messages = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;qux&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;    sent = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(writer, messages)
&lt;&#x2F;span&gt;&lt;span&gt;    received = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;recv&lt;&#x2F;span&gt;&lt;span&gt;(reader)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wait&lt;&#x2F;span&gt;&lt;span&gt;([sent, received])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msgs&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;msg &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;msgs:
&lt;&#x2F;span&gt;&lt;span&gt;        w.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(msg)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sent: &lt;&#x2F;span&gt;&lt;span&gt;{msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rstrip&lt;&#x2F;span&gt;&lt;span&gt;()}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    w.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DONE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Done sending&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;async def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;recv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        msg = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;await &lt;&#x2F;span&gt;&lt;span&gt;r.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readuntil&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rstrip&lt;&#x2F;span&gt;&lt;span&gt;() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DONE&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Done receiving&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;received: &lt;&#x2F;span&gt;&lt;span&gt;{msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rstrip&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;()}&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;loop = asyncio.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_event_loop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run_until_complete&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(loop))
&lt;&#x2F;span&gt;&lt;span&gt;loop.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In &lt;code&gt;main&lt;&#x2F;code&gt; I create my &lt;code&gt;reader&lt;&#x2F;code&gt; and &lt;code&gt;writer&lt;&#x2F;code&gt; objects, define the messages that will be sent, then create two coroutine objects for actually doing the reading&#x2F;writing. At the end of &lt;code&gt;main&lt;&#x2F;code&gt; I say to wait for the reading and writing to finish before calling it quits.&lt;&#x2F;p&gt;
&lt;p&gt;I defined two coroutine functions &lt;code&gt;send&lt;&#x2F;code&gt; and &lt;code&gt;recv&lt;&#x2F;code&gt;, and each one does what it says on the tin. The &lt;code&gt;send&lt;&#x2F;code&gt; coroutine function takes a &lt;code&gt;StreamWriter&lt;&#x2F;code&gt; and a list of messages, then sends one message every 0.5 seconds. The &lt;code&gt;recv&lt;&#x2F;code&gt; coroutine function takes a &lt;code&gt;StreamReader&lt;&#x2F;code&gt; and tries to read until a newline character is encountered. If the message is &lt;code&gt;DONE&lt;&#x2F;code&gt;, then we pack up and go home, otherwise we print the message.&lt;&#x2F;p&gt;
&lt;p&gt;This is about as close as it gets to having a magically async-aware &lt;code&gt;Serial&lt;&#x2F;code&gt; class. In fact, if you wanted to make an async-aware &lt;code&gt;Serial&lt;&#x2F;code&gt; class, you could do it just by wrapping the various &lt;code&gt;read&lt;&#x2F;code&gt; and &lt;code&gt;write&lt;&#x2F;code&gt; methods of your stream reader&#x2F;writer.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;a class=&quot;zola-anchor&quot; href=&quot;#conclusion&quot; aria-label=&quot;Anchor link for: conclusion&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Well, that wraps things up. I recommend going the &lt;code&gt;StreamReader&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;StreamWriter&lt;&#x2F;code&gt; route unless you need fine-grained control over how your connection is handled. Another word of caution: make sure you actually need &lt;code&gt;asyncio&lt;&#x2F;code&gt; before you commit to it. There&#x27;s a definite learning curve to &lt;code&gt;asyncio&lt;&#x2F;code&gt;, and it adds another layer of complexity. Having said that, go have some fun with &lt;code&gt;asyncio&lt;&#x2F;code&gt; and serial devices!&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;1&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;code&gt;open_serial_connection&lt;&#x2F;code&gt; calls &lt;code&gt;create_serial_connection&lt;&#x2F;code&gt;, which calls &lt;code&gt;serial.serial_for_url&lt;&#x2F;code&gt;, which will in most cases just call the &lt;code&gt;Serial&lt;&#x2F;code&gt; constructor with the arguments supplied to &lt;code&gt;serial_for_url&lt;&#x2F;code&gt;. &lt;code&gt;open_serial_connection&lt;&#x2F;code&gt; also requires that you specify all of its arguments as keyword arguments, but most of these arguments just get passed straight to &lt;code&gt;serial_for_url&lt;&#x2F;code&gt;. &lt;code&gt;serial_for_url&lt;&#x2F;code&gt; has a parameter called &lt;code&gt;url&lt;&#x2F;code&gt;, which gets passed to &lt;code&gt;Serial&lt;&#x2F;code&gt; as &lt;code&gt;portname&lt;&#x2F;code&gt; if you haven&#x27;t specified a URL. So, the &lt;code&gt;portname&lt;&#x2F;code&gt; parameter of the &lt;code&gt;Serial&lt;&#x2F;code&gt; constructor comes from &lt;code&gt;serial_for_url&lt;&#x2F;code&gt;&#x27;s &lt;code&gt;url&lt;&#x2F;code&gt; parameter all the way up in &lt;code&gt;open_serial_connection&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</description>
      </item>
      <item>
          <title>About</title>
          <pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/about/</link>
          <guid>https://tinkering.xyz/about/</guid>
          <description xml:base="https://tinkering.xyz/about/">&lt;p&gt;Hi, I&#x27;m Zach. I &lt;em&gt;love&lt;&#x2F;em&gt; learning how things works and using that knowledge to build new things. When I&#x27;m not reading about software you can find me on a disc golf course, rolling dice with a Dungeons &amp;amp; Dragons group, or playing around with generative art.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m currently building developer tools at &lt;a href=&quot;https:&#x2F;&#x2F;tinkering.xyz&#x2F;about&#x2F;flox.dev&quot;&gt;Flox&lt;&#x2F;a&gt; with Rust and Nix.
I&#x27;m also one of the organizers for the Boulder Rust Meetup.&lt;&#x2F;p&gt;
&lt;p&gt;I recently completed a physics PhD at Purdue University where I studied the details of photosynthesis using ultrafast spectroscopy. I built state of the art time resolved laser systems and did computational modeling of quantum-biological systems both on small computers (laptops) and big computers (supercomputing clusters). I also wrote all of the software currently running in the lab ranging from data acquisition and hardware control to numerical analysis.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contact&quot;&gt;Contact&lt;a class=&quot;zola-anchor&quot; href=&quot;#contact&quot; aria-label=&quot;Anchor link for: contact&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you need to reach me, you can find me in the following places:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&quot;&gt;GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;linkedin.com&#x2F;in&#x2F;zmitchell22&quot;&gt;LinkedIn&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hachyderm.io&#x2F;@zmitchell&quot;&gt;Mastodon&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Email: &lt;a href=&quot;mailto:zmitchell@fastmail.com&quot;&gt;zmitchell@fastmail.com&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>Introduction to Procedural Macros in Rust</title>
          <pubDate>Sat, 03 Feb 2018 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://tinkering.xyz/introduction-to-proc-macros/</link>
          <guid>https://tinkering.xyz/introduction-to-proc-macros/</guid>
          <description xml:base="https://tinkering.xyz/introduction-to-proc-macros/">&lt;p&gt;As a newcomer to Rust, I heard the phrase &quot;procedural macro&quot; thrown around a lot without really understanding what it meant. I figured that I would learn about them if I ever needed them. Well, I&#x27;m working on the guts of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;antoyo&#x2F;relm&quot;&gt;&lt;code&gt;relm&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and a large chunk of it is procedural macros. I&#x27;ve learned enough about procedural macros to be dangerous, so I thought I would pass on some knowledge.&lt;&#x2F;p&gt;
&lt;p&gt;The purpose of this post is to give you an overview of the ins and outs of procedural macros so that you feel confident enough to incorporate them into your own Rust arsenal. I&#x27;ll start off by discussing what makes a declarative macro (&lt;code&gt;macro_rules!&lt;&#x2F;code&gt;) different from a procedural macro, then I&#x27;ll discuss the different types of procedural macros, how to define them, where to define them, and the basics of packaging them. At the end I&#x27;ll walk you through making your very first procedural macro. Here&#x27;s a taste of where we&#x27;re going to end up:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;not-the-bees-editor.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve included below a list of other resources you might find helpful. Sometimes you need to hear the same information explained multiple ways before it really sinks in.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;first-edition&#x2F;macros.html&quot;&gt;Macros - The Rust Programming Language - First Edition&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;first-edition&#x2F;procedural-macros.html&quot;&gt;Procedural Macros (and custom derive) - The Rust Programming Language - First Edition&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch19-06-macros.html#procedural-macros-for-generating-code-from-attributes&quot;&gt;Procedural Macros for Generating Code from Attributes 0 Rust Book&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;macros-by-example.html&quot;&gt;Macros By Example - The Rust Reference&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;rust-by-example&#x2F;macros.html&quot;&gt;Macros - Rust By Example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rreverser.com&#x2F;writing-complex-macros-in-rust&#x2F;&quot;&gt;Writing complex macros in Rust&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Macros in Rust &lt;a href=&quot;https:&#x2F;&#x2F;www.ncameron.org&#x2F;blog&#x2F;macros-in-rust-pt1&#x2F;&quot;&gt;part 1&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.ncameron.org&#x2F;blog&#x2F;macros-in-rust-pt2&#x2F;&quot;&gt;part 2&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.ncameron.org&#x2F;blog&#x2F;macros-in-rust-pt3&#x2F;&quot;&gt;part 3&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.ncameron.org&#x2F;blog&#x2F;macros-in-rust-pt4&#x2F;&quot;&gt;part 4&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;words.steveklabnik.com&#x2F;an-overview-of-macros-in-rust&quot;&gt;An Overview of Macros in Rust - Steve Klabnik&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;declarative-macros&quot;&gt;Declarative Macros&lt;a class=&quot;zola-anchor&quot; href=&quot;#declarative-macros&quot; aria-label=&quot;Anchor link for: declarative-macros&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Your first contact with macros is probably &lt;code&gt;macro_rules!&lt;&#x2F;code&gt;. The &lt;code&gt;macro_rules!&lt;&#x2F;code&gt; macro defines a declarative macro. These are great when you want to define a shorthand for something tedious or verbose. For example, I&#x27;m working on a revamped parser for the &lt;code&gt;view!&lt;&#x2F;code&gt; macro in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;antoyo&#x2F;relm&quot;&gt;&lt;code&gt;relm&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and I want to be able to test that it can parse several different examples, so I wrote a macro to make my tests much more concise.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;macro_rules! &lt;&#x2F;span&gt;&lt;span&gt;failed {
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;) =&amp;gt; (format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to parse `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;macro_rules! &lt;&#x2F;span&gt;&lt;span&gt;check_example {
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$y&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;) =&amp;gt; ({
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _parse_result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$y &lt;&#x2F;span&gt;&lt;span&gt;= syn::parse_str(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(failed!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;macro_rules! &lt;&#x2F;span&gt;&lt;span&gt;check_examples {
&lt;&#x2F;span&gt;&lt;span&gt;    (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$x&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$y&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;) =&amp;gt; ({
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; ex in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$x &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            check_example!(ex, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$y&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    })
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;parse_message&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; examples = vec![
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Message(x)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Message(x, y, z)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;    check_examples!(examples, Message);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This post isn&#x27;t about declarative macros, so I&#x27;ll keep this explanation brief. The &lt;code&gt;failed!&lt;&#x2F;code&gt; macro just generates a formatted string saying &lt;code&gt;failed to parse &amp;lt;whatever the example was&amp;gt;&lt;&#x2F;code&gt;. The &lt;code&gt;check_example!&lt;&#x2F;code&gt; macro lets me test that a given example can be parsed into the given type (&lt;code&gt;Message&lt;&#x2F;code&gt; in this case). The &lt;code&gt;check_examples!&lt;&#x2F;code&gt; macro lets me test several examples at once. I&#x27;m not doing anything crazy here, and I&#x27;m not doing anything that couldn&#x27;t be done by hand. I&#x27;m just lazy, and I&#x27;d like my tests to be short and to the point.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s entirely possible to write complex, intricate, incredibly useful declarative macros using this syntax, but (to me, at least) these macro definitions become nearly illegible as they get larger. Procedural macros, in my opinoin, are much better suited to writing something non-trivial.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;procedural-macros-introduction&quot;&gt;Procedural Macros - Introduction&lt;a class=&quot;zola-anchor&quot; href=&quot;#procedural-macros-introduction&quot; aria-label=&quot;Anchor link for: procedural-macros-introduction&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;When you define a macro with &lt;code&gt;macro_rules!&lt;&#x2F;code&gt;, you are writing pattern matching expressions to define what your input should look like, and what output to generate using those matched patterns. When you write a procedural macro, you are handed a fully &lt;s&gt;armed and operational battle station&lt;&#x2F;s&gt; parsed syntax tree, at which point the compiler says &quot;go nuts, just give me back another syntax tree when you&#x27;re done.&quot;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;syntax-trees&quot;&gt;Syntax Trees&lt;a class=&quot;zola-anchor&quot; href=&quot;#syntax-trees&quot; aria-label=&quot;Anchor link for: syntax-trees&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Before we get too deep into procedural macros, you&#x27;ll want to have at least a vague understanding of what a syntax tree is. If you&#x27;re someone like me that doesn&#x27;t come from a computer science background, maybe you don&#x27;t have any idea what a syntax tree is. Well, buckle up, you&#x27;re going to need to get pretty cozy with this concept.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say we want to parse the definition of a function. How would we represent the pieces of a function definition as a Rust struct? Well, there&#x27;s obviously the characters &lt;code&gt;fn&lt;&#x2F;code&gt; somewhere, so we&#x27;ll store that in our struct. There might also be a &lt;code&gt;pub&lt;&#x2F;code&gt; at the front of the definition, so we&#x27;ll store that as an &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; of some kind. Then there are parentheses, so we&#x27;ll store those too. What about the contents of the parentheses (the arguments)? There might be nothing there, and there might be a bunch of stuff there. The arguments have names, types, and potentially trait or lifetime bounds, so we&#x27;ll store that as well. This goes on and on until you&#x27;ve built a collection of structs and enums that represent the various bits and pieces of Rust code. This is what the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;0.12.12&#x2F;syn&#x2F;&quot;&gt;&lt;code&gt;syn&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate does for you. We&#x27;ll come back to &lt;code&gt;syn&lt;&#x2F;code&gt; in a minute.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;types-of-procedural-macros&quot;&gt;Types of Procedural Macros&lt;a class=&quot;zola-anchor&quot; href=&quot;#types-of-procedural-macros&quot; aria-label=&quot;Anchor link for: types-of-procedural-macros&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There are three basic kinds of procedural macros: function-like, attribute-like, and custom derive. The procedural macros page in the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch19-06-macros.html#procedural-macros-for-generating-code-from-attributes&quot;&gt;Unstable Book&lt;&#x2F;a&gt; contains really useful information about how these are different from one another, and how to define them.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;attribute-like&quot;&gt;Attribute-like&lt;a class=&quot;zola-anchor&quot; href=&quot;#attribute-like&quot; aria-label=&quot;Anchor link for: attribute-like&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;An attribute-like procedural macro can be used to create a custom attribute like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;my_custom_attribute&lt;&#x2F;span&gt;&lt;span&gt;(arg1, arg2)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; struct fields
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The definition of an attribute-like procedural macro looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proc_macro_attribute&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_custom_attribute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The first argument is the metadata contained in the attribute i.e. the arguments or values. There are a few different ways to use a custom attribute, so refer back to the Unstable Book for more details. The second argument is the syntax tree of the item that the attribute was applied to (the struct &lt;code&gt;Foo&lt;&#x2F;code&gt; in the example above).&lt;&#x2F;p&gt;
&lt;p&gt;A great example for how to use a custom attribute can be found in the &lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&#x2F;attributes.html&quot;&gt;&lt;code&gt;serde&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate, where they&#x27;re used to customize how a struct&#x2F;enum will be (de)serialized.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;custom-derive&quot;&gt;Custom Derive&lt;a class=&quot;zola-anchor&quot; href=&quot;#custom-derive&quot; aria-label=&quot;Anchor link for: custom-derive&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;A custom derive is great when you want to make life easier for a consumer of your library. The way a custom derive works is very similar to how a custom attribute works, with some restrictions. A procedural macro for a custom derive only takes one &lt;code&gt;TokenStream&lt;&#x2F;code&gt; as an argument, and can only be applied where the &lt;code&gt;derive&lt;&#x2F;code&gt; attribute is valid i.e. on structs and enums. Here&#x27;s how it looks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in the library consumer&amp;#39;s code
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Foo)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Bar(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in your proc-macro crate
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(Foo)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;derive_foo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that the name of the function doesn&#x27;t have to be &lt;code&gt;derive_&amp;lt;trait name&amp;gt;&lt;&#x2F;code&gt;, that&#x27;s just what I called it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;function-like&quot;&gt;Function-Like&lt;a class=&quot;zola-anchor&quot; href=&quot;#function-like&quot; aria-label=&quot;Anchor link for: function-like&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;A function-like procedural macro is the Wild West of procedural macros. These are valid anywhere as long as their output is valid at the location the macro is invoked. The definition of a function-like macro only takes one &lt;code&gt;TokenStream&lt;&#x2F;code&gt; as input. Here is what one looks like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in the library user&amp;#39;s code
&lt;&#x2F;span&gt;&lt;span&gt;my_macro!(all kinds of stuff)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; in your proc-macro crate
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proc_macro&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_macro&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that in the case of a function-like macro, the macro has the same name as the function you apply the &lt;code&gt;#[proc_macro]&lt;&#x2F;code&gt; attribute to.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;summary&quot;&gt;Summary&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary&quot; aria-label=&quot;Anchor link for: summary&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Here are the basics all in one place. Take note of the different attributes applied to each function, and the number of arguments that each function takes.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; custom attribute
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proc_macro_attribute&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_attribute&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; custom derive
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proc_macro_derive&lt;&#x2F;span&gt;&lt;span&gt;(TraitName)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_custom_derive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; function-like macro
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proc_macro&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_macro&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;defining-and-packaging-procedural-macros&quot;&gt;Defining and Packaging Procedural Macros&lt;a class=&quot;zola-anchor&quot; href=&quot;#defining-and-packaging-procedural-macros&quot; aria-label=&quot;Anchor link for: defining-and-packaging-procedural-macros&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s talk about how and where you define procedural macros.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;packaging&quot;&gt;Packaging&lt;a class=&quot;zola-anchor&quot; href=&quot;#packaging&quot; aria-label=&quot;Anchor link for: packaging&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Procedural macros must be defined in their own crates. It&#x27;s customary to name a crate containing a custom derive macro with the &lt;code&gt;&amp;lt;crate&amp;gt;-derive&lt;&#x2F;code&gt; pattern, where &lt;code&gt;&amp;lt;crate&amp;gt;&lt;&#x2F;code&gt; is the name of the main crate i.e. &lt;code&gt;serde&lt;&#x2F;code&gt; and &lt;code&gt;serde-derive&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; of your procedural macro crate must be defined as a crate of type &lt;code&gt;proc-macro&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# in Cargo.toml
&lt;&#x2F;span&gt;&lt;span&gt;[lib]
&lt;&#x2F;span&gt;&lt;span&gt;proc-macro = true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Procedural macros are still an unstable feature, so you must also put the following line at the root of your procedural macro crate and the crate using the procedural macro:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;#![feature(proc_macro)]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;a class=&quot;zola-anchor&quot; href=&quot;#dependencies&quot; aria-label=&quot;Anchor link for: dependencies&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;proc_macro&#x2F;index.html&quot;&gt;&lt;code&gt;proc-macro&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate is part of the standard library, but you&#x27;ll need a few other crates to make your macros.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; proc_macro;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; syn;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; quote;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll go through these one by one.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;proc-macro&quot;&gt;&lt;code&gt;proc-macro&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#proc-macro&quot; aria-label=&quot;Anchor link for: proc-macro&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;This crate defines the &lt;code&gt;TokenStream&lt;&#x2F;code&gt; type. There&#x27;s not much else to see here as the &lt;code&gt;proc_macro&lt;&#x2F;code&gt; crate is intentionally barebones.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;syn&quot;&gt;&lt;code&gt;syn&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#syn&quot; aria-label=&quot;Anchor link for: syn&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;When you&#x27;re writing your procedural macro you&#x27;re going to have about 40 tabs open that start with &lt;code&gt;syn::&lt;&#x2F;code&gt; because this crate defines all of the syntax items that your code will get parsed into. For example, &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;syn&#x2F;0.12.12&#x2F;syn&#x2F;enum.Expr.html&quot;&gt;this&lt;&#x2F;a&gt; is the page for &lt;code&gt;syn::Expr&lt;&#x2F;code&gt;, which is the enum describing all the various types of expressions. Take a look, I&#x27;ll wait. Yeah, there&#x27;s a lot going on there. You&#x27;ll just have to keep the documentation open while you work. That&#x27;s not a bad thing though, because there&#x27;s all kinds of useful stuff in there.&lt;&#x2F;p&gt;
&lt;p&gt;The most recent versions of &lt;code&gt;syn&lt;&#x2F;code&gt; (&lt;code&gt;0.12.x&lt;&#x2F;code&gt;) provide you some really nice tools for creating error messages. Let&#x27;s say your macro allows the user to write code in a custom syntax. The compiler doesn&#x27;t know your custom syntax (you can actually make custom parsers with &lt;code&gt;syn&lt;&#x2F;code&gt;, but that&#x27;s another topic), so you&#x27;re responsible for parsing your custom syntax and generating valid Rust code from it. If you determine that the user has made a syntax error, you can generate a compiler error pointing to the exact location of the error. I&#x27;ll show you how to do this in a minute.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;quote&quot;&gt;&lt;code&gt;quote&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#quote&quot; aria-label=&quot;Anchor link for: quote&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;quote&#x2F;0.4.2&#x2F;quote&#x2F;&quot;&gt;&lt;code&gt;quote&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate is basically the opposite of &lt;code&gt;syn&lt;&#x2F;code&gt; in that it generates tokens rather than parsing them. The basic idea is that you use &lt;code&gt;syn&lt;&#x2F;code&gt; to parse strings or tokens into syntax trees, then use &lt;code&gt;quote&lt;&#x2F;code&gt; to turn syntax trees back into tokens or strings.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;let-s-write-a-the-wicker-man-macro&quot;&gt;Let&#x27;s Write a &quot;The Wicker Man&quot; Macro&lt;a class=&quot;zola-anchor&quot; href=&quot;#let-s-write-a-the-wicker-man-macro&quot; aria-label=&quot;Anchor link for: let-s-write-a-the-wicker-man-macro&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;First, some context:&lt;&#x2F;p&gt;
&lt;div class=&quot;youtube &quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;EVCrmXW6-Pk&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Let&#x27;s lay out the requirements for our macro. We want to create a custom attribute that a user can only apply to a struct definition. If the user applies the attribute to an enum, function, etc, we should generate a compiler error. If the struct has a field named &quot;bees,&quot; we want the compiler to lose its mind.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve posted the code for this macro on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zmitchell&#x2F;wickerman&quot;&gt;GitHub&lt;&#x2F;a&gt; so you can do all kinds of crazy things with it. If you&#x27;re reading this post to learn procedural macros for the first time, take a look at the commit history of the repo to see how I put the macro together piece by piece. I&#x27;ve largely followed the same process in the sections that follow.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;getting-started&quot;&gt;Getting Started&lt;a class=&quot;zola-anchor&quot; href=&quot;#getting-started&quot; aria-label=&quot;Anchor link for: getting-started&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s the most barebones version of our macro crate:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;(proc_macro)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; syn;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; proc_macro;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;proc_macro::TokenStream;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proc_macro_attribute&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;not_the_bees&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_metadata&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: TokenStream) -&amp;gt; TokenStream {
&lt;&#x2F;span&gt;&lt;span&gt;    input
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This obviously doesn&#x27;t do any of the devious things that we want, but it does compile. That&#x27;s a start.&lt;&#x2F;p&gt;
&lt;p&gt;Next we try to parse the input into a &lt;code&gt;syn::Item&lt;&#x2F;code&gt; using the &lt;code&gt;syn::parse&lt;&#x2F;code&gt; function. In &lt;code&gt;syn&lt;&#x2F;code&gt; parlance, an &lt;code&gt;Item&lt;&#x2F;code&gt; is a syntax tree that can appear at the module level, which includes things like function, struct, and enum definitions. If parsing fails (maybe we&#x27;re trying to parse something that isn&#x27;t an &lt;code&gt;Item&lt;&#x2F;code&gt;), we&#x27;ll panic with the given error message.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Parse the `TokenStream` into a syntax tree, specifically an `Item`. An `Item` is a
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; syntax item that can appear at the module level i.e. a function definition, a struct
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; or enum definition, etc.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; item: syn::Item = syn::parse(input).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to parse input&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Use `quote` to convert the syntax tree back into tokens so we can return them. Note
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; that the tokens we&amp;#39;re returning at this point are still just the input, we&amp;#39;ve simply
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; converted it between a few different forms.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; output = quote!{ #item };
&lt;&#x2F;span&gt;&lt;span&gt;output.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Parsing moves the syntax tree, so we can&#x27;t get away with just converting &lt;code&gt;input&lt;&#x2F;code&gt; back into &lt;code&gt;proc_macro::TokenStream&lt;&#x2F;code&gt;. We could just clone &lt;code&gt;input&lt;&#x2F;code&gt; to return a copy of it, but instead we&#x27;ll introduce the &lt;code&gt;quote!&lt;&#x2F;code&gt; macro. The &lt;code&gt;quote!&lt;&#x2F;code&gt; macro lets you write normal Rust code, insert syntax trees into it, and get tokens back. In this case I&#x27;m just turning the parsed &lt;code&gt;Item&lt;&#x2F;code&gt; back into tokens. This is the extent to which we&#x27;ll be using &lt;code&gt;quote&lt;&#x2F;code&gt; in this post, but you can see how to generate more complicated code in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;syn&#x2F;tree&#x2F;master&#x2F;examples&#x2F;lazy-static&quot;&gt;&lt;code&gt;lazy_static!&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; example from &lt;code&gt;syn&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;examining-the-syntax-tree&quot;&gt;Examining the Syntax Tree&lt;a class=&quot;zola-anchor&quot; href=&quot;#examining-the-syntax-tree&quot; aria-label=&quot;Anchor link for: examining-the-syntax-tree&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;A quick perusal of the docs for &lt;code&gt;syn::Item&lt;&#x2F;code&gt; reveals that there are quite a few things that could be considered items. We&#x27;re only looking for &lt;code&gt;syn::Item::Struct&lt;&#x2F;code&gt;, so we&#x27;ll use a &lt;code&gt;match&lt;&#x2F;code&gt; statement:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Match on the parsed item and respond accordingly.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; item {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If the attribute was applied to a struct, we&amp;#39;re going to do
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; some more work to figure out if there&amp;#39;s a field named &amp;quot;bees&amp;quot;.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; It&amp;#39;s important to take a reference to `struct_item`, otherwise
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; you partially move `item`.
&lt;&#x2F;span&gt;&lt;span&gt;    Item::Struct(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; struct_item) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;has_bees&lt;&#x2F;span&gt;&lt;span&gt;(struct_item) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;light_it_up&lt;&#x2F;span&gt;&lt;span&gt;(struct_item);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If the attribute was applied to any other kind of item, we want
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; to generate a compiler error.
&lt;&#x2F;span&gt;&lt;span&gt;    _ =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is how you generate a compiler error. You can also
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; generate a &amp;quot;note,&amp;quot; or a &amp;quot;warning.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        item.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unstable&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;This is not a struct&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;emit&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Determine if the struct has a field named &amp;quot;bees&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;has_bees&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;struct_&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;syn::ItemStruct) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    unimplemented!()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Generate fun compiler errors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;light_it_up&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;struct_&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;syn::ItemStruct) {
&lt;&#x2F;span&gt;&lt;span&gt;    unimplemented!()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I like to keep things nice and tidy, so I&#x27;ve introduced two new functions, &lt;code&gt;has_bees&lt;&#x2F;code&gt; and &lt;code&gt;light_it_up&lt;&#x2F;code&gt;, to move some of the code out of the match statement. Notice that each function takes a reference to a &lt;code&gt;syn::ItemStruct&lt;&#x2F;code&gt;, and that I&#x27;m passing &lt;code&gt;struct_item&lt;&#x2F;code&gt; rather than &lt;code&gt;&amp;amp;struct_item&lt;&#x2F;code&gt; to each function. I just want to look at the contents, not take them, so I destructure with &lt;code&gt;ref&lt;&#x2F;code&gt; here.&lt;&#x2F;p&gt;
&lt;p&gt;The other thing to take not of is how I generate the compiler error:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;item.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unstable&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;This is not a struct&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;emit&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The trait &lt;code&gt;syn::spanned::Spanned&lt;&#x2F;code&gt; allows you to retrieve the span of any syntax tree defined by &lt;code&gt;syn&lt;&#x2F;code&gt;, so you&#x27;ll want to bring that into scope. Why is the &lt;code&gt;unstable()&lt;&#x2F;code&gt; there? I have no idea, but you need it. Rather than &lt;code&gt;error&lt;&#x2F;code&gt; you could also use &lt;code&gt;warning&lt;&#x2F;code&gt;, &lt;code&gt;note&lt;&#x2F;code&gt;, or &lt;code&gt;help&lt;&#x2F;code&gt;. See &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;proc_macro&#x2F;struct.Span.html&quot;&gt;this page&lt;&#x2F;a&gt; for details.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;finding-a-named-field&quot;&gt;Finding a named field&lt;a class=&quot;zola-anchor&quot; href=&quot;#finding-a-named-field&quot; aria-label=&quot;Anchor link for: finding-a-named-field&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Let&#x27;s dig into the &lt;code&gt;has_bees&lt;&#x2F;code&gt; function. We want &lt;code&gt;has_bees&lt;&#x2F;code&gt; to examine the syntax tree and return &lt;code&gt;true&lt;&#x2F;code&gt; or &lt;code&gt;false&lt;&#x2F;code&gt; depending on whether there is a field in the struct named &quot;bees.&quot; To do that we&#x27;re going to need to dig into the definition of &lt;code&gt;syn::ItemStruct&lt;&#x2F;code&gt;. I&#x27;ll just show you what this looks like.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; from the `syn` docs
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;ItemStruct {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Attribute&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vis&lt;&#x2F;span&gt;&lt;span&gt;: Visibility,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;struct_token&lt;&#x2F;span&gt;&lt;span&gt;: Struct,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;: Ident,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;generics&lt;&#x2F;span&gt;&lt;span&gt;: Generics,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fields&lt;&#x2F;span&gt;&lt;span&gt;: Fields,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;semi_token&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Semi&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Fields {
&lt;&#x2F;span&gt;&lt;span&gt;    Named(FieldsNamed),
&lt;&#x2F;span&gt;&lt;span&gt;    Unnamed(FieldsUnnamed),
&lt;&#x2F;span&gt;&lt;span&gt;    Unit,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;FieldsNamed {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;brace_token&lt;&#x2F;span&gt;&lt;span&gt;: Brace,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;named&lt;&#x2F;span&gt;&lt;span&gt;: Punctuated&amp;lt;Field, Comma&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Field {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Attribute&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vis&lt;&#x2F;span&gt;&lt;span&gt;: Visibility,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ident&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Ident&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;colon_token&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Colon&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ty&lt;&#x2F;span&gt;&lt;span&gt;: Type,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Yikes, that&#x27;s quite the rabbit hole. Unfortunately, this is the price you pay for all of the goodies that &lt;code&gt;syn&lt;&#x2F;code&gt; gives you for free. Alright, here&#x27;s what we&#x27;re going to do:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;match on &lt;code&gt;fields&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;destructure the &lt;code&gt;Named&lt;&#x2F;code&gt; variant to bind its contents to a variable&lt;&#x2F;li&gt;
&lt;li&gt;use the iterator methods provided by &lt;code&gt;Punctuated&lt;&#x2F;code&gt; to iterate over the fields&lt;&#x2F;li&gt;
&lt;li&gt;compare the &lt;code&gt;ident&lt;&#x2F;code&gt; (name) of each field with &quot;bees&quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Determine if the struct has a field named &amp;quot;bees&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;has_bees&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;struct_&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;syn::ItemStruct) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; struct_.fields {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; A field can only be named &amp;quot;bees&amp;quot; if it has a name, so we&amp;#39;ll
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; match those fields and ignore the rest.
&lt;&#x2F;span&gt;&lt;span&gt;        Fields::Named(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; fields) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Unwrap the field names because we know these are named fields.
&lt;&#x2F;span&gt;&lt;span&gt;            fields.named.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;field&lt;&#x2F;span&gt;&lt;span&gt;| field.ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bees&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Ignore unit structs or anonymous fields.
&lt;&#x2F;span&gt;&lt;span&gt;        _ =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that I&#x27;m able to directly compare the &lt;code&gt;ident&lt;&#x2F;code&gt; with a value of type &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; even though &lt;code&gt;ident&lt;&#x2F;code&gt; is of type &lt;code&gt;syn::Ident&lt;&#x2F;code&gt;. This is because &lt;code&gt;Ident&lt;&#x2F;code&gt; implements &lt;code&gt;PartialEq&amp;lt;T: AsRef&amp;lt;str&amp;gt;&amp;gt;&lt;&#x2F;code&gt;, or, in other words, &lt;code&gt;Ident&lt;&#x2F;code&gt; can be compared with types that can be converted to &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. Nice! Although you don&#x27;t need to explicity convert the &lt;code&gt;Ident&lt;&#x2F;code&gt; to a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; or &lt;code&gt;String&lt;&#x2F;code&gt; for the sake of comparison (remember, the &lt;code&gt;PartialEq&lt;&#x2F;code&gt; implementation does it for you), you can still get the textual representation of &lt;code&gt;ident&lt;&#x2F;code&gt; using its &lt;code&gt;as_ref&lt;&#x2F;code&gt; or &lt;code&gt;to_string&lt;&#x2F;code&gt; methods.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing to point out is that I&#x27;m unwrapping &lt;code&gt;ident&lt;&#x2F;code&gt;, which is of type &lt;code&gt;Option&amp;lt;Ident&amp;gt;&lt;&#x2F;code&gt;. This seems odd at first glance. We know that the fields are named because they come from the &lt;code&gt;Fields::Named&lt;&#x2F;code&gt; variant, but the type of each field is &lt;code&gt;Option&amp;lt;Ident&amp;gt;&lt;&#x2F;code&gt;, which suggests that there is some uncertainty as to whether the field actually has a name. According to David Tolnay, one of the authors of &lt;code&gt;syn&lt;&#x2F;code&gt;, this is a trade off. On one hand, it would make more sense to use just &lt;code&gt;Ident&lt;&#x2F;code&gt; in this situation, rather than &lt;code&gt;Option&amp;lt;Ident&amp;gt;&lt;&#x2F;code&gt;. On the other hand, using &lt;code&gt;Option&amp;lt;Ident&amp;gt;&lt;&#x2F;code&gt; for the type of &lt;code&gt;Field.ident&lt;&#x2F;code&gt; allows you to treat named and unnamed fields mostly the same, which makes sense from an API and maintenance point of view. Interesting!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;generating-the-compiler-errors&quot;&gt;Generating the compiler errors&lt;a class=&quot;zola-anchor&quot; href=&quot;#generating-the-compiler-errors&quot; aria-label=&quot;Anchor link for: generating-the-compiler-errors&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Now that we&#x27;ve seen how to locate the fields of a struct and generate a compiler error, let&#x27;s go ahead and do this in our &lt;code&gt;light_it_up&lt;&#x2F;code&gt; function (it will look very similar to &lt;code&gt;has_bees&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; Generate fun compiler errors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;light_it_up&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;struct_&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;syn::ItemStruct) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Fields::Named(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; fields) = struct_.fields {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Piece together our exquisite error message.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bees = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;🐝 &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;repeat&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;🐝   not the bees!!! NOT THE BEEEEEES!!! 🐝&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The `join` method places the provided string between the joined items,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; so putting empty strings at the beginning and end will put extra
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; newline characters at the beginning and end of the error message.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; bees_msg = [&amp;quot;&amp;quot;, bees.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(), msg, bees.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;quot;&amp;quot;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Find the field named &amp;quot;bees&amp;quot;.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; field in &amp;amp;fields.named {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ident = field.ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ident == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bees&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Deliver the error message.
&lt;&#x2F;span&gt;&lt;span&gt;                ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unstable&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(bees_msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;emit&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we&#x27;ll make a simple example to show that it works:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;(proc_macro)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span&gt; wickerman;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;wickerman::wickerman;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; This one shouldn&amp;#39;t raise any errors because it doesn&amp;#39;t have a field
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; named &amp;quot;bees&amp;quot;, or any named fields at all for that matter.
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wickerman&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Foo(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; This is where the action will happen.
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wickerman&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Bar {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baz&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bees&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F; This is only here so that the crate will run as a binary crate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;*crosses fingers*&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;not-the-bees-editor.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;BINGO! At 1:30am this was basically the funniest thing I had ever seen. I laughed myself to sleep.&lt;&#x2F;p&gt;
&lt;p&gt;Now, there is some weirdness involved. At first the errors only showed up when I tried to build the example in my terminal. I&#x27;m guessing I had to build both the &lt;code&gt;wickerman&lt;&#x2F;code&gt; crate and the example before the error messages would show up in my editor (Sublime Text). I would also like to point out that things may look different in your editor or your terminal because Unicode Is Hard (TM). I know that the error message doesn&#x27;t look like this (different spacing) in either iTerm2 or the built in terminal on macOS, and each terminal renders it differently. I think the issue lies in the width of the bee emoji. I&#x27;m not all that concerned about it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;blowing-up-the-editor&quot;&gt;Blowing up the editor&lt;a class=&quot;zola-anchor&quot; href=&quot;#blowing-up-the-editor&quot; aria-label=&quot;Anchor link for: blowing-up-the-editor&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;We&#x27;re generating an error message for the field named &quot;bees,&quot; but I said I wanted the compiler to lose its mind. So, here&#x27;s what I want to do: if I find the &quot;bees&quot; field, I&#x27;ll show the bees error message, but for every other field and its type I&#x27;ll show a random error message inspired by The Wicker Man. First, some inspiration (WARNING: GRATUITOUS AMOUNTS OF 240p):&lt;&#x2F;p&gt;
&lt;div class=&quot;youtube &quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;Qjme5hh&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now let&#x27;s get to work. The first order of business is creating a function to return a random error message. Here&#x27;s the outline:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;random_error_message&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; String {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Create the error messages...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Store the error messages in an array so one can be chosen at random. We use an array
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; rather than a `Vec&amp;lt;String&amp;gt;` because we know exactly how many error messages we have,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; and we know the number will never change.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; messages = [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; List the error messages here.
&lt;&#x2F;span&gt;&lt;span&gt;    ];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Use the `rand` crate to choose a random message to return. Note that `choose` returns
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; `Option&amp;lt;&amp;amp;T&amp;gt;`, which will only be `None` if `messages` is empty, so it&amp;#39;s safe to unwrap
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; here. Unwrapping gives us `&amp;amp;String`, so we call `to_owned` to return `String`.
&lt;&#x2F;span&gt;&lt;span&gt;    rand::thread_rng().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;choose&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;messages).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The next step is to apply the error messages to the other syntax items. I&#x27;ll do this by adding an &lt;code&gt;else&lt;&#x2F;code&gt; branch to the &lt;code&gt;if ident.as_ref() = &quot;bees&quot;&lt;&#x2F;code&gt; conditional statement in &lt;code&gt;light_it_up&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bees&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; You&amp;#39;ve already seen this part.
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Here&amp;#39;s where the new stuff will go.
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;First I&#x27;ll attach an error message to the identifier (the name of the field), and then I&#x27;ll attach an error message to the type of the field.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bees&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; You&amp;#39;ve already seen this part.
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Show a random error message referencing the name of the field.
&lt;&#x2F;span&gt;&lt;span&gt;    ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unstable&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random_error_message&lt;&#x2F;span&gt;&lt;span&gt;(ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;emit&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Show a random error message referencing the type of the field.
&lt;&#x2F;span&gt;&lt;span&gt;    field.ty.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;span&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unstable&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;random_error_message&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;emit&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Alright, all the pieces are in place! Let&#x27;s see what it looks like!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;insanity.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;BEAUTIFUL! I&#x27;m pretty happy with how this looks. To satisfy the purists, I added some feature flags to the &lt;code&gt;wickerman&lt;&#x2F;code&gt; crate. The default feature is &lt;code&gt;just-the-bees-please&lt;&#x2F;code&gt;, which will only show the &quot;not the bees!&quot; message. The other feature is &lt;code&gt;go-nuts&lt;&#x2F;code&gt;, which will show the randomly selected error messages on the other fields and types. I did this using the &lt;code&gt;cfg!&lt;&#x2F;code&gt; macro:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; ident.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;() == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bees&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Take the pedestrian way out.
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;cfg!(feature = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;go-nuts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Let&amp;#39;s get weird.
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is the first time I&#x27;ve used feature flags in one of my own crates. Do they make &quot;Baby&#x27;s First Conditional Compilation&quot; refrigerator magnets? Someone look into it and let me know.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary-1&quot;&gt;Summary&lt;a class=&quot;zola-anchor&quot; href=&quot;#summary-1&quot; aria-label=&quot;Anchor link for: summary-1&quot;&gt;&lt;svg viewBox=&quot;0 0 24 24&quot; height=&quot;20&quot;&gt;&lt;path d=&quot;M12.11,15.39,8.23,19.27a2.52,2.52,0,0,1-3.5,0,2.47,2.47,0,0,1,0-3.5l3.88-3.88a1,1,0,1,0-1.42-1.42L3.31,14.36a4.48,4.48,0,0,0,6.33,6.33l3.89-3.88a1,1,0,0,0-1.42-1.42ZM20.69,3.31a4.49,4.49,0,0,0-6.33,0L10.47,7.19a1,1,0,1,0,1.42,1.42l3.88-3.88a2.52,2.52,0,0,1,3.5,0,2.47,2.47,0,0,1,0,3.5l-3.88,3.88a1,1,0,0,0,0,1.42,1,1,0,0,0,1.42,0l3.88-3.89A4.49,4.49,0,0,0,20.69,3.31ZM8.83,15.17a1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29l4.92-4.92a1,1,0,1,0-1.42-1.42L8.83,13.75A1,1,0,0,0,8.83,15.17Z&quot;&#x2F;&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;ve read this far, you&#x27;re a saint. Hopefully you got something out of it. Like some other nightly features of Rust, procedural macros are a bit of a moving target. I&#x27;ve done my best to make sure everything was up to date, but if you find something that&#x27;s out of date be sure to let me know!&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
